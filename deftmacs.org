#+TITLE: Deftmacs - Deftpunk's Emacs Configuration
#+AUTHOR: Deftpunk
#+STARTUP: content
#+OPTIONS: toc:4 :num:nil ^:nil
* Introduction
** About Emacs

The big, beautiful, thermonuclear editor.

#+begin_quote
“Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.”

--Neal Stephenson,“In the Beginning was the Command Line”
#+end_quote

#+begin_quote
“Emacs is written in Lisp, which is the only computer language that is
beautiful.”

--Neal Stephenson
#+end_quote

** Literate Programming

Blocks of code alternating with explanatory text.

** Versions of Emacs for Mac

I do most of my work on MacOSX these days and have tried several different builds
of Emacs on Mac.

*** The GNU versions, homebrew or build from scratch

=brew install emacs --with-cocoa --with-modules --with-gnutls --with-librsvg --with-imagemagick=

=brew cask install emacs=

*** The railwaycat version

Wed Aug 23 11:54:20 2017 - Tried the [[https://github.com/railwaycat/homebrew-emacsmacport][railwaycat emacsmacport]] port.  Ultimately decided
not to use it.

- didn't solve my ansi-term problem with full configuration
- the Command key is now Alt; I liked having Alt & Super keys
- looks really, really nice
- the devicons package did not work out of the box, nor did the flycheck, etc. images

*** The emacs-plus version

[[https://github.com/d12frosted/homebrew-emacs-plus][Emacs Plus]]

** External Dependencies

* Initialization
** Crumbs

Keep all of the extraneous Emacs files/dirs in a single location.

I tried out [[https://github.com/tarsius/no-littering][no-littering]] but found that it didn't work as well as I expected.

#+begin_src emacs-lisp :name crumbs
(defconst deftmacs-crumbs-directory
  (expand-file-name (concat user-emacs-directory "crumbs/"))
  "Deftmacs crumbs directory.")
(unless (file-exists-p deftmacs-crumbs-directory)
  (make-directory deftmacs-crumbs-directory))
#+end_src

** Packaging

I use [[https://github.com/jwiegley/use-package][use-package]] to handle package management.

*** Initial Plumbing

Initialize the package plumbing -> so that we can use-package.

#+begin_src emacs-lisp :name package-plumbing
(require 'package)
(setq package-enable-at-startup nil
      package--init-file-ensured t)
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize nil)
#+end_src

*** use-package

[[https://github.com/jwiegley/use-package][use-package]] - the best way to isolate package configuration in Emacs.

[[https://emacs.stackexchange.com/questions/26810/why-doesnt-use-package-dired-work-for-me/26830#26830][use-package with ensure]] - Since I have set =use-package-always-ensure=
I need to add =:ensure nil= to configure any non-=package.el= packages
with use-package.

#+begin_src emacs-lisp :name use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-verbose t
      use-package-always-ensure t)
#+end_src

*** Paradox

[[https://github.com/Malabarba/paradox/][Paradox]] - modernize the Emacs package menu

Usage:
=list-packages= or =paradox-list-packages=

Some useful filters:
=f u= Display only packages with upgrades
=f k= Filter by keyword
=f r= Filter by regexp

#+begin_src emacs-lisp :name paradox
  (use-package paradox
    :config
    (paradox-enable))
#+end_src

** Custom

Set up the custom file early so that custom stuff doesn't get written to this file.

#+begin_src emacs-lisp :name custom
(setq custom-file (expand-file-name "custom.el" deftmacs-crumbs-directory))
(unless (file-exists-p custom-file)
  (with-temp-buffer (write-file custom-file)))
(load custom-file 'noerror)
#+end_src

** Display

All of the goofy stuff related to making Emacs pretty ... in my eyes.

*** GUI elements

Get some annoying GUI elements out of the way.  The menu-bar mostly stays out of the way on Mac so I am
leaving it enabled.

#+begin_src emacs-lisp :name gui-elements
(menu-bar-mode 1)
(setq ring-bell-function 'ignore
      inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message ()
      initial-scratch-message nil
      use-dialog-box nil                        ; All questions in the minibuffer
      display-time-default-load-average nil)
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Transparency

frame transparency for Mac.

#+begin_src emacs-lisp :name transparency
(set-frame-parameter (selected-frame) 'alpha '(92 92))
(add-to-list 'default-frame-alist '(alpha 92 92))
#+end_src

*** Frame title

Set the frame title to the full path of the buffer we are working on.

#+begin_src emacs-lisp :name frame-title
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+end_src

*** Hide the modeline

This makes the graphics less jerky at startup.  I got this from Spacemacs, which got it from
http://bzg.fr/emacs-hide-mode-line.html

#+begin_src emacs-lisp :name hide modeline
(defvar-local hidden-mode-line-mode nil)
(defvar-local hide-mode-line nil)
(define-minor-mode hidden-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global t
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; Apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "Hidden Mode Line Mode enabled.  "
             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))
 (hidden-mode-line-mode)
#+end_src

*** Themes

Gruvbox, challenger-deep, etc.

#+begin_src emacs-lisp :name gruvbox
;; (use-package gruvbox-theme)
;; (use-package challenger-deep-theme)
(use-package tao-theme)
(load-theme 'tao-yang t)
  ;; (use-package monokai-emacs)
  ;; (load-theme 'monokai t)
#+end_src

*** Fonts

I use Roboto Mono and also use Symbola as a fallback to display unicode characters.
https://github.com/ryanoasis/nerd-fonts
http://www.fontspace.com/unicode-fonts-for-ancient-scripts/symbola

#+begin_src emacs-lisp :name fonts
(set-frame-font "RobotoMono Nerd Font 12")
(when (member "Symbola" (font-family-list))
	      (set-fontset-font t 'unicode "Symbola" nil 'prepend))
#+end_src

*** Spaceline dependencies

Some things that Spaceline and Spaceline-all-the-icons need before initializing.

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] - A utility package to collect various
Icon Fonts and propertize them within Emacs.

#+begin_src emacs-lisp :name all-the-icons.el
(use-package all-the-icons)
#+end_src

[[https://github.com/syohex/emacs-anzu][Anzu]] - Show the total number of search hits and where you are in the modeline.

#+begin_src emacs-lisp :name anzu
(use-package anzu
  :defer t
  :config
  (global-anzu-mode +1))
#+end_src

[[https://www.emacswiki.org/emacs/info+.el][info+]] - Extensions to info.el by Drew Adams.

#+begin_src emacs-lisp :name info+
(use-package info+)
#+end_src

*** Spaceline

[[https://github.com/TheBB/spaceline][Spaceline]] - The Powerline theme from Spacemacs

#+begin_src emacs-lisp :name Spaceline
(use-package spaceline)
(require 'spaceline-config)
(spaceline-emacs-theme)
(spaceline-helm-mode)
(spaceline-info-mode)  ; depends on info+

(spaceline-toggle-anzu-on)
(spaceline-toggle-auto-compile-on)
(spaceline-toggle-buffer-modified-on)
(spaceline-toggle-buffer-size-on)
(spaceline-toggle-buffer-id-on)
(spaceline-toggle-remote-host-on)
(spaceline-toggle-major-mode-on)
(spaceline-toggle-flycheck-error-on)
(spaceline-toggle-flycheck-warning-on)
(spaceline-toggle-flycheck-info-on)
(spaceline-toggle-minor-modes-on)
(spaceline-toggle-version-control-on)
(spaceline-toggle-which-function-on)
(spaceline-toggle-python-pyvenv-on)
(spaceline-toggle-selection-info-on)
(spaceline-toggle-buffer-encoding-abbrev-on)
(spaceline-toggle-line-column-on)
(spaceline-toggle-buffer-position-on)
(spaceline-toggle-projectile-root-on)

(spaceline-toggle-process-off)

(spaceline-compile)
#+end_src

*** spaceline-all-the-icons

[[https://github.com/domtronn/spaceline-all-the-icons.el][spaceline-all-the-icons]] - A Spaceline mode line theme using All The Icons for Emacs.

NOTE: The combination of Spaceline and spaceline-all-the-icons adds a significant amount of time to the
startup of Emacs.

#+begin_src emacs-lisp :name spaceline-all-the-icons
(use-package spaceline-all-the-icons
  :after spaceline
  :config
  (spaceline-all-the-icons--setup-package-updates)
  (spaceline-all-the-icons--setup-git-ahead)

  ;; enable some segments
  (spaceline-toggle-all-the-icons-bookmark-on)

  (spaceline-all-the-icons-theme))
#+end_src

** Libraries and general dependencies

*** Exec Path

[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] - Make Emacs use the $PATH set up by the users shell.
Load exec-path-from-shell early in case we need it.  Otherwise things like magit have a hard time
finding git in MacOSX.

#+begin_src emacs-lisp :name exec-path-from-shell
(use-package exec-path-from-shell
  :init
  (setq exec-path-from-shell-check-startup-files nil)
  ;; Set up correct PATH, etc. for Mac
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))
#+end_src

*** Crux

[[https://github.com/bbatsov/crux][Crux]] - A collection of ridiculously useful extensions.

#+begin_src emacs-lisp :name crux library
(use-package crux
  :config
  (crux-reopen-as-root-mode))
#+end_src

*** popwin

[[https://github.com/m2ym/popwin-el][popwin-el]] - A popup window manager for Emacs; helps with all of the windows that magically pop in and out.

#+begin_src emacs-lisp :name popwin
(use-package popwin
 :config
 (popwin-mode 1))
#+end_src

*** which-key

[[https://github.com/justbur/emacs-which-key][emacs-which-key]] - Displays available keybindings in a popup.

#+begin_src emacs-lisp :name which-key
(use-package which-key
    :defer t
    :init
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+end_src

*** Deftmacs Libraries

Add my library of functions and miscellaneous.

#+begin_src emacs-lisp :name deftlisp
(defconst my-library (expand-file-name "lib" user-emacs-directory))
(add-to-list 'load-path my-library)
(require 'misc-functions)
#+end_src

** Defaults and Settings

What Operating System are we on?

#+begin_src emacs-lisp :name operating-systems
(defconst *is-a-mac* (eq system-type 'darwin))
(defconst *is-a-penguin* (eq system-type 'gnu/linux))
(defconst *is-a-windoze* (eq system-type 'windwos-nt))
#+end_src

*** Autosave

*** Backups

Change where all of the backup files go.  Usually Emacs dumps them in the current directory with a ~
ending, cluttering up the file system.  The following dumps in a directory under our crumbs directory.

#+begin_src emacs-lisp :name Backups
  (defconst deftmacs-backups-dir (expand-file-name "backups/" deftmacs-crumbs-directory))
  (make-directory deftmacs-backups-dir t)
  (setq backup-directory-alist `(("." . ,deftmacs-backups-dir)))
  (setq tramp-backup-directory-alist `(("." . ,deftmacs-backups-dir)))

  (setq backup-by-copying   t                         ; don't clobber symlinks
        delete-old-versions -1
        kept-new-versions   6
        kept-old-versions   2
        version-control     t)
#+end_src

*** Bells

Bells should never go off.

#+begin_src emacs-lisp :name bells
  (setq ring-bell-function 'ignore)
  (setq visible-bell t)
#+end_src

*** Clipboard

All of the mess that we have to do to make system clipboard access work.

#+begin_src emacs-lisp :name clipboard
  ;; Some functions from http://writequit.org/org/settings.html#sec-1
  ;; for copy/paste on a Mac.
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
        save-interprogram-paste-before-kill t
        mouse-yank-at-point t)

  (defun copy-from-osx ()
    "Handle copy/paste intelligently on osx."
    (let ((pbpaste (purecopy "/usr/bin/pbpaste")))
      (if (and (eq system-type 'darwin)
               (file-exists-p pbpaste))
          (let ((tramp-mode nil)
                (default-directory "~"))
            (shell-command-to-string pbpaste)))))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "/usr/bin/pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))

  (setq interprogram-cut-function 'paste-to-osx
        interprogram-paste-function 'copy-from-osx)
#+end_src

*** Comment column

Column to indent right-margins to.

#+begin_src emacs-lisp :name Emacs defaults
  (setq-default comment-column 79)
#+end_src

*** Compilation

#+begin_src emacs-lisp :name compilation
  (setq compilation-context-lines 2
        compilation-error-screen-columns nil
        compilation-scroll-output t)
#+end_src

*** Cursors

Cursors should *NEVER* blink.

#+begin_src emacs-lisp :name cursors
  (blink-cursor-mode 0)
  (when (display-graphic-p)
    (setq-default cursor-type 'box))
  (setq x-stretch-cursor 1)          ; draw the block cursor as wide as the glyph under it.
#+end_src

*** Encoding

Set all the things to utf-8

#+begin_src emacs-lisp :name Encoding
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")
#+end_src

*** Files and buffers

#+begin_src emacs-lisp :name files and buffers
  (setq kill-read-only-ok                  t            ; don't error when killing a read-only text
        large-file-warning-threshold       100000000    ; warn when opening files bigger than 100MB
        confirm-nonexistent-file-or-buffer nil          ; don't ask to create files/buffers
        )

  ;; don't ask to kill buffers
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))
#+end_src

*** Fringe

Set the left fringe width to something big enough for line numbers, flycheck and git-gutter

#+begin_src emacs-lisp :name fringe-width
  (setq-default left-fringe-width 15)
#+end_src

*** Miscellaneous settings

#+begin_src emacs-lisp :name miscellaneous settings
  ;; Enable disabled commands
  ;; To protect new users from destructive commands, some commands are turned
  ;; off by default, turn them back on.
  (setq disabled-command-function nil)

  ;; Some miscellaneous settings
  (setq transient-mark-mode   t                     ; if you change focus disable the current mark
        line-move-visual      t                     ; move around lines based on how they are displayed
        random                t                     ; seed the random number generator
        apropos-do-all        t                     ; search for everything.
        fill-column           105
        recenter-positions    '(top middle bottom)  ; make =C-l= start at the top instead of the middle.
        )

  (setq tab-always-indent 'complete
        confirm-nonexistent-file-or-buffer nil   ; don't ask to create a buffer
        vc-follow-symlinks t                     ; follow symlinks automatically
        recentf-max-saved-items 5000             ; same up to 5000 recent files
        eval-expression-print-length nil         ; do not truncate printed expressions
        eval-expression-print-level nil          ; print nested expressions
        kill-ring-max 5000                       ; truncate kill ring after 5000 entries
        mark-ring-max 5000                       ; truncate mark ring after 5000 entries
        load-prefer-newer t                      ; prefer newer .el instead of the .elc
        switch-to-buffer-preserve-window-point t
        )

  ;; don't ask to kill buffers
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))


  ;;
  (setq set-mark-command-repeat-pop 't)
#+end_src

*** Mouse

#+begin_src emacs-lisp :name Emacs defaults
  (setq mouse-yank-at-point nil                  ; yank at mouse click
        confirm-nonexistent-file-or-buffer nil   ; don't ask to create files/buffers
        make-pointer-invisible t                 ; hide the mouse while typing
        )
#+end_src

*** Scrolling

Smooth scrolling is another detail that is somehow a mess in Emacs.

#+begin_src emacs-lisp :name scrolling
  (setq scroll-margin                    0
        scroll-conservatively            100000
        scroll-preserve-screen-position  1
        mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control))) ;make mouse scrolling smooth
        )
#+end_src

*** tabs vs spaces

That other religious war - tabs and spaces - I am on team spaces.

#+begin_src emacs-lisp :name spaces
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq c-basic-offset 4)
#+end_src

** Emacs minor modes

Configuration for Emacs minor modes that come with Emacs.

*** abbreviations

#+begin_src emacs-lisp :name abbreviations
  (setq abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory)
        default-abbrev-mode t
        save-abbrevs 'silently)
  (diminish 'abbrev-mode)
#+end_src

*** auto-fill

#+begin_src emacs-lisp :name auto-fill
  (diminish 'auto-fill-mode)
  (diminish 'auto-fill-function)
#+end_src

*** auto-revert

Automatically reload a file if its changed outside of Emacs.

#+begin_src emacs-lisp :name auto-revert
  (global-auto-revert-mode 1)
  (diminish 'auto-revert-mode)
#+end_src

*** bookmarks

#+begin_src emacs-lisp :name bookmarks
  (setq bookmark-default-file (expand-file-name "bookmarks" user-emacs-directory))
  (use-package bookmark+
    :config
    (setq bookmark-version-control t
          bookmark-save-flag 1))
#+end_src

*** delete-selection-mode

Turn this on so that we can delete regions using the *Delete* key

#+begin_src emacs-lisp :name delete-selection-mode
  (delete-selection-mode 1)
#+end_src

*** Dired

Directory listing in Emacs.

#+begin_src emacs-lisp :name Dired
  (use-package dired
    :ensure nil
      :init
      ;; Omit the . and .. files.
      (setq-default dired-omit-mode t)
      (setq-default dired-omit-verbose nil)
      (setq-default dired-omit-files "^\\.$\\|^\\.\\.$")

      ;; Use gls on a Mac
      (when *is-a-mac*
        (if (executable-find "gls")
            (progn
              (setq insert-directory-program "gls")
              (setq dired-listing-switches "-lFaGh1v --group-directories-first"))
          (setq dired-listing-switches "-ahlF"))))
#+end_src

**** dired-subtree

[[https://github.com/Fuco1/dired-hacks#dired-subtree][dired-subtree]] - Show subtree under directory in dired

#+begin_src emacs-lisp :name dired-subtree
(use-package dired-subtree
  :config
  (bind-keys :map dired-mode-map
             ("i" . dired-subtree-insert)
             (";" . dired-subtree-remove)))
#+end_src

**** WDired

Writeable Dired - Edit a Dired buffer just like any other bother using a binding.

Mastering Emacs has a good article on its configuration and usage - [[https://masteringemacs.org/article/wdired-editable-dired-buffers][WDired]]

#+begin_src emacs-lisp :name wdired
  (use-package wdired
    :init
    (setq wdired-allow-to-change-permissions t
          wdired-use-interactive-rename t
          wdired-confirm-overwrite t
          wdired-use-dired-vertical-movement t))
#+end_src

**** peep-dired

[[https://github.com/asok/peep-dired][peep-dired]] - Preview files from dired.

#+begin_src emacs-lisp :name peep-dired
  (use-package peep-dired
    :ensure t
    :defer t
    :bind (:map dired-mode-map
                ("P" . peep-dired))
    :init
    (setq peep-dired-cleanup-on-disable t
          peep-dired-cleanup-eagerly t
          peep-dired-enable-on-directories t
          peep-dired-ignored-extensions '("mkv" "iso" "mp4" "pyc")))
#+end_src

*** ediff

I really like ediff but I want the split to be vertical not horizontal -
perversly, in Emacs, "horizontal" is vertical everywhere else.

[[https://coderwall.com/p/mcrwag/use-magit-ediff-to-resolve-merge-conflicts][magit + ediff]] - Use the two together to resolve merge conflicts.

#+begin_src emacs-lisp :name ediff
  (use-package ediff
    :defer t
    :init
    (setq ediff-split-window-function 'split-window-horizontally
          ediff-use-long-help-message 1
          ediff-diff-options "-w"

          ;; This makes the control panel show up inside the original frame.
          ediff-window-setup-function 'ediff-setup-windows-plain)
    :config
    (add-hook 'ediff-after-quit-hook-internal 'winner-undo))
#+end_src

*** eldoc

minibuffer hints when working with emacs lisp.

#+begin_src emacs-lisp :name eldoc
  (use-package "eldoc"
    :diminish eldoc-mode
    :commands turn-on-eldoc-mode
    :defer t
    :init
    (setq eldoc-idle-delay 0.1))
#+end_src

*** eww

[[https://www.gnu.org/software/emacs/manual/html_node/eww/index.html#Top][Emacs Web Wowser]] - The Emacs web browser

#+begin_src emacs-lisp :name eww
  (use-package eww
    :defer t
    :config
    (define-key eww-mode-map "o" 'eww)
    (define-key eww-mode-map "O" 'eww-browse-with-external-browser)

    ;; https://github.com/m00natic/eww-lnum
    (use-package eww-lnum
      :defer t
      :init
      (eval-after-load "eww"
        '(progn
           (define-key eww-mode-map "f" 'eww-lnum-follow)
           (define-key eww-mode-map "F" 'eww-lnum-universal)))))
#+end_src

*** finder

Adds a neat way to look at just the Commentary section - http://irreal.org/blog/?p=6248

#+begin_src emacs-lisp :name finder
  (use-package finder
    :bind (
           :map help-mode-map
           ("C-c" . finder-commentary)
           ("C-l" . find-library)))
#+end_src

*** Help Mode

Some packages and utilities to help with Help Mode

**** help+

[[https://www.emacswiki.org/emacs/help+.el][help+]]

The following bindings are made here:

   `C-h u'      `manual-entry'
   `C-h C-a'    `apropos'
   `C-h C-l'    `locate-library'
   `C-h RET'    `help-on-click/key'
   `C-h M-a'    `apropos-documentation'
   `C-h M-o'    `pop-to-help-toggle'
   `C-h C-M-a'  `tags-apropos'
   [mouse-1]    `mouse-help-on-click' (non-mode-line)
   [mouse-1]    `mouse-help-on-mode-line-click' (mode-line)

#+begin_src emacs-lisp :name help-plus
  (use-package help+)
#+end_src

**** help-fns

[[https://www.emacswiki.org/emacs/help-fns+.el][help-fns]]

Keys bound here:

   `C-h B'      `describe-buffer'
   `C-h c'      `describe-command'     (replaces `describe-key-briefly')
   `C-h o'      `describe-option'
   `C-h C-c'    `describe-key-briefly' (replaces `C-h c')
   `C-h C-o'    `describe-option-of-type'
   `C-h M-c'    `describe-copying'     (replaces `C-h C-c')
   `C-h M-f'    `describe-file'
   `C-h M-k'    `describe-keymap'
   `C-h M-l'    `find-function-on-key'

   #+begin_src emacs-lisp :name help-fns
     (use-package help-fns+)
   #+end_src
*** info

Do some fancy things with Info docs.  The "o" character in the Info mode map
triggers ace-link.

#+begin_src emacs-lisp :name Info
  (use-package info
    :bind (:map Info-mode-map
                ("h" . backward-char)
                ("l" . forward-char)
                ("g" . beginning-of-buffer)
                ("G" . end-of-buffer)
                ("j" . next-line)
                ("k" . previous-line)
                ("a" . beginning-of-line)
                ("e" . end-of-line)
                ("]" . ora-para-down)
                ("[" . ora-para-up)))
#+end_src

*** midnight

Clean up obsolete buffers.

#+begin_src emacs-lisp :name midnight
  (use-package midnight)
#+end_src

*** saveplace

Save our position between sessions

#+begin_src emacs-lisp :name saveplace
  (use-package saveplace
    :init
    ;; Keep Emacs from being slow to exit after enabling saveplace.
    (setq save-place-forget-unreadable-files nil)
    (setq save-place-file (expand-file-name "savedplaces" deftmacs-crumbs-directory))
    :config
    (save-place-mode 1))
#+end_src

*** size-inidication-mode

Show the file size.

#+begin_src emacs-lisp :name size-indication-mode
  (size-indication-mode t)
  (diminish 'size-indication-mode)
#+end_src

*** visual-line-mode

"Soft" wrapping of lines

#+begin_src emacs-lisp :name visual-line-mode
;; Little arrows in the fringe.
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+end_src

*** whitespace

Manage and show whitespace.

#+begin_src emacs-lisp :name whitespace
  (use-package whitespace
    :defer t
    :diminish global-whitespace-mode
    :init
    (progn
      (setq whitespace-style '(face tabs trailing lines tab-mark)
            whitespace-line-column 105))
    :config
    (progn
      (add-hook 'prog-mode-hook '(lambda ()
                                   (setq show-trailing-whitespace 1)))))
#+end_src

Delete trailing whitespace just before saving.

#+begin_src emacs-lisp :name trailing_whitespace
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

*** Winner mode

THis is handy for when window splits go off the rails or you want to get the
original split layout back.

#+begin_src emacs-lisp :name winner mode
  (winner-mode 1)
#+end_src

** Highlighting

Non mode or file type specific highlighting, e.g. numbers, current
line, etc.

*** beacon

[[https://github.com/Malabarba/beacon][Never lose your cursor again]] - Whenever the window scrolls a light will shine on top of your cursor so
you know where it is.

#+begin_src emacs-lisp :name beacon
  (use-package beacon
    :config
    (beacon-mode 1))
#+end_src

*** Current line

#+begin_src emacs-lisp :name highlight current line
  (global-hl-line-mode 1)
#+end_src

*** Escape sequences

[[https://github.com/dgutov/highlight-escape-sequences/blob/master/highlight-escape-sequences.el][highlight-escape-sequences]] - what the title says.

#+begin_src emacs-lisp :name highlight-escape
  (use-package highlight-escape-sequences
    :defer t
    :init
    (add-hook 'prog-mode-hook 'hes-mode)
    :config

    (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
    (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face)
    )
#+end_src

*** Numbers

[[https://github.com/Fanael/highlight-numbers][highlight-numbers]] - Highlight numeric literals in source code.

#+begin_src emacs-lisp :name highlight-numbers
  (use-package highlight-numbers
    :defer t
    :init (add-hook 'prog-mode-hook #'highlight-numbers-mode))
#+end_src

*** Parenthesis

#+begin_src emacs-lisp :name highlight parenthesis
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+end_src

*** Quotes

[[https://github.com/Fanael/highlight-quoted][highlight-quoted]] - Highlight Lisp quotes and quoted symbols

#+begin_src emacs-lisp :name highlight-quoted
  (use-package highlight-quoted
    :config
    (add-hook 'emacs-lisp-mode-hook 'highlight-quoted-mode))
#+end_src

*** Symbols

[[https://github.com/gennad/auto-highlight-symbol][highlight-symbol]] - Highlight the symbol under point.

#+begin_src emacs-lisp :name highlight-symbol
  (use-package auto-highlight-symbol
    :diminish auto-highlight-symbol-mode
    :init
    (setq ahs-case-fold-search nil
          ahs-default-range 'ahs-range-whole-buffer
          ahs-idle-interval 0.25
          ahs-inhibit-face-list nil)
    (add-hook 'prog-mode-hook 'auto-highlight-symbol-mode)
    ;; but a box around the face.
    (custom-set-faces `(ahs-face ((t (:box t)))))
    (custom-set-faces `(ahs-definition-face ((t (:box t)))))
    (custom-set-faces `(ahs-plugin-whole-buffer-face ((t (:box t)))))
    )

  (defun toggle-auto-highlight-symbol ()
    "Toggle the auto-highlight-symbol-mode"
    (interactive)
    (if auto-highlight-symbol-mode
        (auto-highlight-symbol-mode -1)
      (auto-highlight-symbol-mode)))
#+end_src

*** Volatile highlights

[[https://www.emacswiki.org/emacs/VolatileHighlights][Volatile highlights]] - temporarily highlights changes to the buffer associated with certain commands that
add blocks of text at once. An example is that if you paste (yank) a block of text, it will be
highlighted until you press the next key.

#+begin_src emacs-lisp :naame volatile-highlights
  (use-package volatile-highlights
    :config
    (volatile-highlights-mode 1))
#+end_src
*** Window changes

Indicate buffer boundaries and scrolling.

#+begin_src emacs-lisp :name window changes
  (setq-default inidicate-buffer-boundaries 'right)
#+end_src

** Org mode

The manual: [[http://orgmode.org/manual/index.html][Org Manual]]

[[http://orgmode.org/manual/Easy-templates.html#Easy-templates][Easy templates:]]

<s <TAB> expands/completes the 'src' block
<e <TAB> -> example block
<q <TAB> -> quote
<v <TAB> -> verse; renders block quotes and newline breaks

Possibilities for adding unicode characters:
http://heikkil.github.io/blog/2015/03/22/hydra-for-unicode-input-in-emacs/
http://thewanderingcoder.com/2015/03/emacs-org-mode-styling-non-smart-quotes-zero-width-space-and-tex-input-method/

Markup:

http://ergoemacs.org/emacs/emacs_org_markup.

** *** library of functions for Org mode

TODO: Change the size or the screenshot before pasting it in.

#+begin_src emacs-lisp :name deftmacs-org-functions
  ;; Modified from -> http://stackoverflow.com/a/31868530
  (defun defmacs::org-paste-screenshot ()
    "Paste the screenshot previously taken by the OS."
    (interactive)
    (org-display-inline-images)
    (setq filename
          (concat
           (make-temp-name
            (concat (file-name-nondirectory (buffer-file-name))
                    "_imgs/"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (unless (file-exists-p (file-name-directory filename))
      (make-directory (file-name-directory filename)))
                                          ; take screenshot
    (if (eq system-type 'darwin)
        (call-process "pngpaste" nil nil nil filename))
                                          ;(call-process "screencapture" nil nil nil "-i" filename))
    (if (eq system-type 'gnu/linux)
        (call-process "import" nil nil nil filename))
                                          ; insert into file if correctly taken
    (if (file-exists-p filename)
        (insert (concat "[[file:" filename "]]"))))
#+end_src

*** Initial configuration

#+begin_src emacs-lisp :name Org mode
    (use-package org-plus-contrib
      :defer t
      :mode (("\\.org$" . org-mode))
      :init
      (setq org-startup-indented t
            org-startup-folded "showall"
            org-ellipsis "⤵"              ;; Make the outline fold more compact.
            )

      ;; Modifications to Org mode Speed Keys - from Sacha Chau
      ;; To list all of the Speed Keys, go to the begining of a header and press ?
      (defun my/org-use-speed-commands-for-headings-and-lists ()
        "Activate speed commands on list items too."
        (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
            (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))
      (setq org-use-speed-commands 'my/org-use-speed-commands-for-headings-and-lists)

      :config

      ;; Some general configuration.
      (add-hook 'org-mode-hook (lambda ()
                                  (visual-line-mode 1)  ;; soft wrap
                                  (setq fill-column 120))))
    (eval-after-load 'org-mode
      (diminish 'org-indent-mode))

  ;; Tracking TODO state changes
  ;; The ! exclamation will add a timestamp
  ;; The @ ampersand will ask for a note with time-stamp
  (setq org-todo-keywords
        '((sequence "TODO(t!)" "WORKING(w!)" "DONE(d!)" "CANCELLED(c@!)" )))
#+end_src

*** Tags

Display TAGS from column 72

#+begin_src emacs-lisp :name org-tags
  (setq org-tags-column -72)
#+end_src

*** org-bullets

[[https://github.com/sabof/org-bullets][org-bullets]] - UTF-8 bullets for org-mode bullets

#+begin_src emacs-lisp :name org-bullets
(use-package org-bullets
  :defer t
  :init
  (add-hook 'org-mode-hook (lambda ()
                             (org-bullets-mode 1))))
#+end_src

*** org-download

[[https://github.com/abo-abo/org-download][org-download]] - Drag/drop/download images into Org

#+begin_src emacs-lisp :name org-download
  (use-package org-download)
#+end_src

** Navigation

*** ace-link

[[https://github.com/abo-abo/ace-link][ace-link]] - Select a link to jump to in Info, help, woman, org or eww modes

#+begin_src emacs-lisp :name ace-link
  (use-package ace-link
    :commands ace-link-setup-default
    :init (ace-link-setup-default))
#+end_src

*** ace-window

[[https://github.com/abo-abo/ace-window][ace-window]] - Selecting a window to switch to

#+begin_src emacs-lisp :name ace-window
(use-package ace-window
  :defer t
  :config
  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
	aw-leading-char-style 'path)
  (set-face-attribute 'aw-leading-char-face nil :height 3.0))
#+end_src

*** counsel/ivy/avy/swiper

[[https://github.com/abo-abo/swiper][avy, ivy, counsel and swiper]] - avy, ivy, counsel and swiper from the great abo-abowho also came up with hydra.

- Ivy, a generic completion mechanism for Emacs.
- Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
- Swiper, an Ivy-enhanced alternative to isearch.

Turning on counsel-mode to see remaps of Emacs commands - https://github.com/abo-abo/swiper#user-content-counsel

#+begin_src emacs-lisp :name counsel
  (use-package counsel
    :config (counsel-mode 1)
    :bind (("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable)
           ("C-h i" . counsel-info-lookup-symbol)))
#+end_src

#+begin_src emacs-lisp :name swiper
(use-package swiper
    :bind (:map ivy-minibuffer-map
                ("C-w" . ivy-yank-word)
                ([escape] . minibuffer-keyboard-quit))
    :config
    (ivy-mode 1))
#+end_src

#+begin_src emacs-lisp :name avy
(use-package avy
    :config
    (setq avy-background t
          avy-all-windows nil))
#+end_src

*** Helm

[[https://github.com/emacs-helm-helm][Helm]]

#+begin_src emacs-lisp :name Helm
  (use-package helm
    :init
  ;  (use-package helm-config)
   ; (use-package helm-man)
   ; (use-package helm-org)
   ; (use-package helm-mt)
   ; (use-package helm-ring)
    (use-package helm-ag
      :init
      (setq helm-ag-fuzzy-match t
            helm-ag-use-agignore t
            helm-ag-command-option "--ignore-dir elpa"))

    ;; options
    (setq helm-idle-delay                        0.0    ; Update fast sources immediately (doesn't).
          helm-move-to-line-cycle-in source
          helm-input-idle-delay                  0.01   ; This actually updates things reeeelatively quickly.
          helm-quick-update                      t
          helm-M-x-requires-pattern              nil
          helm-candidate-number-limit            99     ; Setting this above 100 will slow down fuzzy matching
          helm-autoresize-max-height             45     ; Set the max window height to 45% of current frame.
          helm-mode-fuzzy-match                  t      ; Turn on fuzzy matching for buffers, semantic, recentf
          helm-completion-in-region-fuzzy-match  t      ; Completion, imenu, apropos, M-x
          helm-buffer-skip-remote-checking       t      ; Ignore checking if file exists on remote files, ie. Tramp
          helm-tramp-verbose                     6      ; See Tramp messages in helm
          helm-ff-skip-boring-files              t)

    (helm-autoresize-mode t)

    ;; helm-ag and find-grep in find-files or helm-mini
    (when (executable-find "ag")
      (setq helm-grep-default-command "ag "))

    ;; Save the current position to mark ring when jumping around.
    (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

    (helm-mode))
#+end_src

*** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] for sane project management.

#+begin_src emacs-lisp :name Projectile
  (use-package projectile
    :defer t
    :commands (projectile-project-root)
    :init (add-hook 'after-init-hook 'projectile-global-mode)
    :config
    (setq projectile-globally-ignored-file-suffixes '("*.pyc"  "*.class"))
    (setq projectile-completion-system 'ivy
          projectile-enable-caching t
          projectile-use-git-grep t
          ;; projectile-indexing-method 'native
          projectile-remember-window-configs t
          projectile-switch-project-action 'projectile-find-file)
    (add-to-list 'projectile-globally-ignored-files ".DS_Store")
    (add-to-list 'projectile-globally-ignored-files "*.i")
    (setq projectile-globally-ignored-directories
          (append projectile-globally-ignored-directories '(".git"
                                                            ".hg"
                                                            ".cache"
                                                            "__pycache__"
                                                            ".mypy_cache"
                                                            "elpa")))
    )
#+end_src

***** helm-projectile

[[http://tuhdo.github.io/helm-projectile.html][helm-projectile]] use helm to
find files & buffers in projectile with a good explanation [[http://tuhdo.github.io/helm-projectile.html][Exploring large projects]]

#+begin_src emacs-lisp :name helm-projectile
  (use-package helm-projectile
    :defer t
    :config
    (setq helm-projectile-sources-list
          '(helm-source-projectile-projects
            helm-source-projectile-recentf-list
            helm-source-projectile-buffers-list
            helm-source-projectile-files-list))
    (helm-projectile-on))

  (setq projectile-indexing-method 'native)
#+end_src

** Completion

*** Company

[[http://company-mode.github.io/][Company Completion]] - text completion framework.

#+begin_src emacs-lisp :name company
    (use-package company
      :defer t
      :diminish company-mode
      :bind (:map company-active-map
                 ("M-n" . nil)
                 ("M-p" . nil)
                 ([tab] . company-complete)
                 ("C-n" . company-select-next)
                 ("C-p" . company-select-previous)
                 ("C-;" . helm-company))
      :init
      (setq company-idle-delay 0.1
            company-tooltip-limit 99
            company-minimum-prefix-length 2
            company-echo-delay 0                ; Remove annoying blinking
            company-selection-wrap-around t
            company-show-numbers t
            ;; change the navigation direction if the popup is near the bottom of
            ;; of the window
            company-tooltip-flip-when-above t
            company-dabbrev-downcase nil
            company-dabbrev-code-everywhere t
            company-backends '((company-capf
                                company-dabbrev
                                company-dabbrev-code)))

  ;; The current candidate isn't displayed inline except when there's only one
  ;; left. You can rectify this by switching out
  ;; company-preview-if-just-one-frontend for company-preview-frontend:
  ;; (setq company-frontends
  ;;       '(company-pseudo-tooltip-unless-just-one-frontend
  ;;         company-preview-frontend
  ;;         company-echo-metadata-frontend))

  ;; (setq company-auto-complete nil)

      :config
      (use-package helm-company
        :bind (:map company-mode-map
                 ("C-;" . helm-company)))

      (global-company-mode))
#+end_src

**** company-jedi

[[https://github.com/syohex/emacs-company-jedi][company-jedi]] - a company mode completion backend for Python Jedi.

Use a python-mode-hook to add company-jedi backend as a local variable when
python files are opened.

#+begin_src emacs-lisp :name company-jedi
    (use-package company-jedi
      :defer t)
#+end_src

**** company-quickhelp

[[https://github.com/expez/company-quickhelp][company-quickhelp]] - Documentation popup for company mode.

#+begin_src emacs-lisp :name company-quickhelp
  (use-package company-quickhelp
    :init
    (setq company-quickhelp-delay 1.0
          company-quickhelp-max-lines 30)
    :config (company-quickhelp-mode 1))
#+end_src

** Version Control
*** Settings

Follow symlinks

#+begin_src emacs-lisp :name follow symlinks
  (setq vc-follow-symlinks t)
#+end_src

*** git-gutter

[[https://github.com/syohex/emacs-git-gutter][git-gutter]] - highlight uncomitted changes to the buffer - works with Hg & Git.

#+begin_src emacs-lisp :name git-gutter
  (use-package git-gutter
    :commands global-git-gutter-mode
    :diminish git-gutter-mode
    :init
    (setq git-gutter:update-interval 0.1
          git-gutter:ask-p nil
          git-gutter:verbosity 0
          git-gutter:handled-backends '(git))

    (add-hook 'git-gutter:update-hooks 'magit-after-revert-hook)
    (add-hook 'git-gutter:update-hooks 'magit-not-reverted-hook)
    (add-hook 'git-gutter:update-hooks 'vc-checkin-hook)
    (add-hook 'git-gutter:update-hooks 'focus-in-hook)
    (add-hook 'git-gutter:update-hooks 'auto-revert-mode-hook)
    (add-hook 'git-gutter:update-hooks 'after-revert-hook)
    (global-git-gutter-mode 1))

  (use-package fringe-helper
    :load-path "~/tmp/fringe-helper.el")

  (use-package git-gutter-fringe)
  (require 'git-gutter-fringe)

  ;; Update git-gutter on focus (in case I was using git externally) - from hlissner's emacs config.
  (add-hook 'focus-in-hook #'git-gutter:update-all-windows)

  (set-face-foreground 'git-gutter-fr:modified "blue3")
  (set-face-foreground 'git-gutter:modified "blue3")
#+end_src

**** git-gutter hunks and ivy mode

[[http://blog.binchen.org/posts/enhance-emacs-git-gutter-with-ivy-mode.html][git-gutter and ivy mode]] - traverse git-gutter hunks using ivy mode.

#+begin_src emacs-lisp :name git-gutter and ivy
  (require 'ivy)
  (require 'git-gutter)

  (defun my-reshape-git-gutter (gutter)
    "Re-shape gutter for `ivy-read'."
    (let* ((linenum-start (aref gutter 3))
           (linenum-end (aref gutter 4))
           (target-line "")
           (target-linenum 1)
           (tmp-line "")
           (max-line-length 0))
      (save-excursion
        ;; find out the longest stripped line in the gutter
        (while (<= linenum-start linenum-end)
          (goto-line linenum-start)
          (setq tmp-line (replace-regexp-in-string "^[ \t]*" ""
                                                   (buffer-substring (line-beginning-position)
                                                                     (line-end-position))))
          (when (> (length tmp-line) max-line-length)
            (setq target-linenum linenum-start)
            (setq target-line tmp-line)
            (setq max-line-length (length tmp-line)))

          (setq linenum-start (1+ linenum-start))))
      ;; build (key . linenum-start)
      (cons (format "%s %d: %s"
                    (if (eq 'deleted (aref gutter 1)) "-" "+")
                    target-linenum target-line)
            target-linenum)))

  (defun my-goto-git-gutter ()
    (interactive)
    (if git-gutter:diffinfos
        (let* ((collection (mapcar 'my-reshape-git-gutter
                                   git-gutter:diffinfos)))
          (ivy-read "git-gutters:"
                    collection
                    :action (lambda (linenum)
                              (goto-line linenum))))
      (message "NO git-gutters!")))
#+end_src

*** git-messenger

[[https://github.com/syohex/emacs-git-messenger][git-messenger]] provides a function that pops up the commit message of the current
line.  Useful for quickly seeing why a line has changed.

#+begin_src emacs-lisp :name git-messenger
(use-package git-messenger
  :defer t
  :init
  (progn
    (setq git-messenger:show-detail t
          git-messenger:handled-backends '(git)))
  :config (define-key git-messenger-map (kbd "m") 'git-messenger:copy-message))
#+end_src

*** git-timemachine

[[https://github.com/pidu/git-timemachine][git-timemachine]] - allows you to go back and forth to the revisions of a file.

#+begin_src emacs-lisp :name git-timemachine
(use-package git-timemachine
  :defer t
  :bind ("C-c t" . git-timemachine))

;; From redguardtoo - http://blog.binchen.org/posts/new-git-timemachine-ui-based-on-ivy-mode.html
(defun my-git-timemachine-show-selected-revision ()
  "Show last (current) revision of file."
  (interactive)
  (let (collection)
    (setq collection
          (mapcar (lambda (rev)
                    ;; re-shape list for the ivy-read
                    (cons (concat (substring (nth 0 rev) 0 7) "|" (nth 5 rev) "|" (nth 6 rev)) rev))
                  (git-timemachine--revisions)))
    (ivy-read "commits:"
              collection
              :action (lambda (rev)
                        (git-timemachine-show-revision rev)))))

(defun my-git-timemachine ()
  "Open git snapshot with the selected version.  Based on ivy-mode."
  (interactive)
  (unless (featurep 'git-timemachine)
    (require 'git-timemachine))
  (git-timemachine--start #'my-git-timemachine-show-selected-revision))
#+end_src

*** gitignore-mode

[[https://github.com/magit/git-modes][git-modes]] - pull in the mode for editing .gitignore files.

#+begin_src emacs-lisp :name gitignore-mode
(use-package gitignore-mode
  :defer t)
#+end_src
*** Magit

[[https://github.com/magit/magit][Magit]] - The best git porcelain in the world!
https://magit.vc/

#+begin_src emacs-lisp :name magit
(use-package magit
  :defer t
  :config
  (setq  magit-log-arguments '("--graph" "--decorate" "--color")
          magit-save-repository-buffers 'dontask
          magit-revert-buffers 'silent))
#+end_src

**** CANCELED Magithub

[[https://github.com/vermiculus/magithub][Magithub]] - A collection of interfaces to get Github integrated into
Magit workflows.

Wed Apr 25 14:40:52 2018 - CANCELED because it was having issues
finding ~/.authinfo  Not sure why.

#+BEGIN_SRC emacs-lisp :name magithub
  (use-package magithub
    :after magit
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/github"))
#+END_SRC

** Editing with Ginzu knives
*** easy-kill

[[https://github.com/leoliu/easy-kill][easy-kill]] kill or mark things easily

#+BEGIN_SRC emacs-lisp :name easy-kill
(use-package easy-kill
  :defer t)
#+END_SRC

*** move-text

[[https://github.com/emacsfodder/move-text][move-text]] - Move region or current line up or down.

#+BEGIN_SRC emacs-lisp :name move-text
(use-package move-text
   :defer t
   :config (move-text-default-bindings))
#+END_SRC

*** zzz-to-char

[[https://github.com/mrkkrp/zzz-to-char][zzz-to-char]] - Fancy replacement for zap-to-char in Emacs.  Allows you to
quickly select the exact char you want to zap to.

#+begin_src emacs-lisp :name zzz-to-char
(use-package zzz-to-char
  :init (setq zzz-to-char-reach 120))
#+end_src

** General Utilities

*** Shells and Terminals inside of Emacs

    Another possible fix for term/zsh problems if they occur - https://stackoverflow.com/questions/8918910/weird-character-zsh-in-emacs-terminal
    Found a fix for the term+zsh problem - https://www.reddit.com/r/emacs/comments/5p3njk/help_terminal_zsh_control_characters_in_prompt/

#+BEGIN_SRC emacs-lisp :name terminals
  (use-package ansi-color
    :commands ansi-color-for-comint-mode-on
    :init
    (progn
      (setq comint-scroll-to-bottom-on-input t
            comint-scroll-to-bottom-on-output t
            comint-scroll-show-maximum-output t
            comint-completion-autolist t
            comint-input-ignoredups t
            comint-completion-addsuffix t
            comint-promp-read-only nil
            comint-completion-recexact nil
            comint-buffer-maximum-size 100000
            comint-input-ring-size 5000
            term-default-bg-color "#080808"
            term-default-fg-color "#00ff00"
            comint-get-old-input (lambda () "")))
    :config
    (progn
      (add-hook 'term-mode-hook
            #'(lambda ()
            (yas-minor-mode -1)  ; interferes w/ Tab
            ;(autopair-mode -1)   ; interferes w/ Return
            (setq term-mode-buffer-maximum-size 10000
              show-trailing-whitespace nil)))

      (use-package multi-term
        :ensure multi-term
        :init
        (progn
      (add-hook 'term-mode-hook
            (lambda ()
              (yas-minor-mode -1)
              ;(autopair-mode -1)
              (setq term-buffer-maximum-size 10000
                show-trailing-whitespace nil)))
      (setq multi-term-program "/bin/zsh"
            multi-term-switch-after-close nil
            term-bind-key-alist '(("C-c C-c" . term-interrupt-subjob)
                      ("M-p" . previous-line)
                      ("M-n" . next-line)
                      ("C-s" . isearch-forward)
                      ("C-r" . term-send-reverse-search-history)
                      ("C-m" . term-send-raw)
                      ("M-f" . term-send-forward-word)
                      ("M-b" . term-send-backward-word)
                      ("M-o" . term-send-backspace)
                      ([backspace] . term-send-backspace)
                      ("<RETURN>" . term-send-raw)
                      ([del] . term-send-del)
                      ("C-d" . term-send-eof)
                      ([home] . term-send-home)
                      ("C-a" . term-send-home)
                      ([end] . term-send-end)
                      ("C-e" . term-send-end)
                      ("M-h" . windmove-left)
                      ("M-j" . windmove-down)
                      ("M-k" . windmove-up)
                      ("M-l" . windmove-right)
                      ("M-x" . execute-extended-command)
                      ("C-p" . term-send-up)
                      ("C-n" . term-send-down)
                      ("M-M" . term-send-forward-kill-word)
                      ("C-w" . term-send-backward-kill-word)
                      ("M-r" . term-send-reverse-search-history)
                      ("M-," . term-send-input)
                      ("M-." . comint-dynamic-complete)))))))
#+END_SRC

*** Expand region

Gradually expand the region.

#+BEGIN_SRC emacs-lisp :name expand-region
  (use-package expand-region
:commands (er/mark-word er/mark-symbol er/mark-symbol-with-prefix er/mark-next-accessor er/mark-method-call er/mark-inside-quotes er/mark-outside-quotes er/mark-inside-pairs er/mark-outside-pairs er/mark-comment er/mark-url er/mark-email er/mark-defun er/mark-html-attribute er/mark-inner-tag er/mark-outer-tag)
    :defer t
    :bind ("C-=" . er/expand-region))
#+END_SRC
*** goto-chg

[[https://github.com/emacs-evil/goto-chg][goto-chg]] - Go to the last change in the buffer.

#+begin_src emacs-lisp :name goto-chg
(use-package goto-chg)
#+end_src

*** list-environment

[[https://github.com/dgtized/list-environment.el][list-environment]] - List out the current environment variables.  You can also
modify them in the *Process Environment* buffer.  =M-x list-environment=

#+begin_src emacs-lisp :name list-environment
  (use-package list-environment
    :defer t)
#+end_src

*** lorem-ipsum

[[https://github.com/jschaf/emacs-lorem-ipsum][Lorem Ipsum]] add filler text to whatever you are working on.  The following
commands are available:
=lorem-ipsum-insert-sentences=
=lorem-ipsum-insert-paragraphs=
=lorem-ipsum-insert-list=

#+begin_src emacs-lisp :name lorem ipsum
  (use-package lorem-ipsum
    :defer t)
#+end_src

*** Paradox

Use Paradox to make package management nicer.
TODO: How do I make better use of this?  Should rebind some keys as well.
See spacemacs/layers/+distribution/spacemacs/package.el for usage.

#+begin_src emacs-lisp :name Paradox
(use-package paradox
  :commands paradox-list-packages
  :init
  (progn
    ;; Shamelessly cribed from Spacemacs - this makes all of the
    ;; security token be handled gracefully.
    (defun spacemacs/paradox-list-packages ()
      "Load depdendencies for auth and open the package list."
      (interactive)
      (require 'epa-file)
      (require 'auth-source)
      (when (and (not (boundp 'paradox-github-token))
                 (file-exists-p "~/.authinfo.gpg"))
        (let ((authinfo-result (car (auth-source-search
                                     :max 1
                                     :host "github.com"
                                     :port "paradox"
                                     :user "paradox"
                                     :require '(:secret)))))
          (let ((paradox-token (plist-get authinfo-result :secret)))
            (setq paradox-github-token (if (functionp paradox-token)
                                           (funcall paradox-token)
                                         paradox-token)))))
      (paradox-list-packages nil))))
#+end_src
*** Persistent Scratch
[[https://github.com/Fanael/persistent-scratch][
persistent-scratch]] is an Emacs package that preserves the state of scratch buffers across
Emacs sessions by saving the state to and restoring it from a file.

#+begin_src emacs-lisp :name persistent-scratch
  (use-package persistent-scratch
    :init
    (setq persistent-scratch-save-file (expand-file-name "persistent-scratch" deftmacs-crumbs-directory))
    :config
    (persistent-scratch-setup-default))

  ;; *scratch* is immortal - dont kill it accidentally
  (add-hook 'kill-buffer-query-functions
            (lambda ()
              (not (member (buffer-name) '("*scratch*" "scratch.el")))))
#+end_src

*** Quickrun

[[https://github.com/syohex/emacs-quickrun][Quickrun]] - Run command quickly. This packages is inspired quickrun.vim

#+begin_src emacs-lisp :name quickrun
  (use-package quickrun
    :commands (quickrun
               quickrun-region
               quickrun-with-arg
               quickrun-shell
               quickrun-compile-only
               quickrun-replace-region))
#+end_src

*** Rainbow mode

[[https://julien.danjou.info/projects/emacs-packages][rainbow-mode]] - Show hex codes as their actual color.

#+begin_src emacs-lisp :name rainbow-mode
  (use-package rainbow-mode
    :defer t
    :commands rainbow-turn-on
    :init
    (add-hook 'prog-mode-hook 'rainbow-turn-on)
    :config
    (setq rainbow-x-colors nil))
#+end_src

*** smartparens

[[https://github.com/Fuco1/smartparens][smartparens]] - deals with parens pairs and tries to be smart about it.

A [[https://ebzzry.github.io/emacs-pairs.html][great article]] showing how to use it effectively, extensive documentation
in the [[https://github.com/Fuco1/smartparens/wiki][wiki]] and a [[https://www.reddit.com/r/emacs/comments/38k1j5/paredit_smartparens_autopair/][reddit article]] with comparisons to autopair, paredit & lispy.

#+begin_src emacs-lisp :name smartparens
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    ;; Handle single quotes and apostrophes correctly in lisp like languages.
    ;; From https://github.com/Fuco1/smartparens/issues/286
    (sp-with-modes sp-lisp-modes
      ;; disable ', it's the quote character!
      (sp-local-pair "'" nil :actions nil)
      ;; also only use the pseudo-quote inside strings where it serve as
      ;; hyperlink.
      (sp-local-pair "`" "'" :when '(sp-in-string-p sp-in-comment-p))
      (sp-local-pair "`" nil
                     :skip-match (lambda (ms mb me)
                                   (cond
                                    ((equal ms "'")
                                     (or (sp--org-skip-markup ms mb me)
                                         (not (sp-point-in-string-or-comment))))
                                    (t (not (sp-point-in-string-or-comment)))))))

    (show-smartparens-global-mode t))

  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+end_src

*** Undo Tree

[[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] - Make undo something more like the undo/redo you get in other
editors.  There is also =undo-tree-visualize= that allows you to visually
walk through the changes that you have made.

#+begin_src emacs-lisp :name undo-tree
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :init
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (global-undo-tree-mode)
    :config
    ;; Get rid of linum glitches with undo-tree
    (defun undo-tree-visualizer-update-linum (&rest args)
      (linum-update undo-tree-visualizer-parent-buffer))
    (advice-add 'undo-tree-visualize-undo :after #'undo-tree-visualizer-update-linum)
    (advice-add 'undo-tree-visualize-redo :after #'undo-tree-visualizer-update-linum)
    (advice-add 'undo-tree-visualize-undo-to-x :after #'undo-tree-visualizer-update-linum)
    (advice-add 'undo-tree-visualize-redo-to-x :after #'undo-tree-visualizer-update-linum)
    (advice-add 'undo-tree-visualizer-mouse-set :after #'undo-tree-visualizer-update-linum)
    (advice-add 'undo-tree-visualizer-set :after #'undo-tree-visualizer-update-linum))
#+end_src

*** wrap-region

[[https://github.com/rejeep/wrap-region.el][wrap-region]] - Wrap a region with punctuation or tags

#+begin_src emacs-lisp :name wrap-region
  (use-package wrap-region
    :diminish wrap-region-mode
    :config
    (wrap-region-add-wrappers
     '(("*" "*" nil (org-mode))
       ("~" "~" nil (org-mode))
       ("/" "/" nil (org-mode))
       ("=" "=" "+" (org-mode))
       ("_" "_" nil (org-mode))
       ("$" "$" nil (org-mode latex-mode))))
    (add-hook 'org-mode-hook 'wrap-region-mode))
#+end_src

*** yasnippet

I use [[https://github.com/joaotavora/yasnippet][yasnippet]] for all of my snippet needs - the [[http://joaotavora.github.io/yasnippet/][manual]].

#+begin_src emacs-lisp :name yasnippet
  (use-package yasnippet
    :defer t
    :diminish yas-minor-mode
    :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
    :init
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"
                             "~/.emacs.d/default-snippets")
          yas-verbosity 3)
    (yas-global-mode 1)
    (use-package helm-c-yasnippet))
#+end_src

** Software Development Utilities

*** aggressive-indent-mode

[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] - keep your code nicely aligned while you type.

#+begin_src emacs-lisp :name aggressive-indent-mode
  (use-package aggressive-indent
    :defer t)
#+end_src

*** flycheck

[[http://www.flycheck.org/en/latest/][flycheck]] - on the fly syntax checking

#+begin_src emacs-lisp :name flycheck
  (use-package flycheck
    :defer t
    :diminish flycheck-mode
    :init
    (setq flycheck-standard-error-navigation      nil
          flycheck-idle-change-delay              15
          flycheck-disabled-checkers              '(tex-chktex emacs-lisp-checkdoc)
          flycheck-emacs-lisp-initialize-packages t
          flycheck-check-syntax-automatically     '(mode-enabled idle-change save))

    ;; Turn off for some modes
    ;; Turns off for *scratch* buffer.
    (setq flycheck-global-modes '(not lisp-interaction-mode org-mode))

    ;; Turn on everywhere else.
    (add-hook 'after-init-hook #'global-flycheck-mode)
    :config

    (push '("^\\*Flycheck.+\\*$" :regexp t :dedicated t :position bottom :stick t :noselect t) popwin:special-display-config))

  ;; so that linting and type errors don't mess with eldoc
  (use-package flycheck-pos-tip
    :defer t
    :diminish flycheck-pos-tip-mode
    :config (flycheck-pos-tip-mode))

  (use-package helm-flycheck
    :defer t)
#+end_src

*** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] - rainbow parenthesis

#+begin_src emacs-lisp :name rainbow-delimiters
  (use-package rainbow-delimiters
    :defer t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Software Development
*** Common Lisp

#+begin_src emacs-lisp :name common-lisp
  (use-package slime
    :commands slime-setup
    :init (setq inferior-lisp-program "/usr/local/bin/sbcl")
    :config
    (use-package slime-company
      :ensure slime
      :config
      (slime-setup '(slime-fancy slime-company))))
#+end_src

*** Emacs Lisp
**** Settings

#+begin_src emacs-lisp :name emacs-lisp-settings
  ;; (add-hook 'emacs-lisp-mode-hook #'aggressive-mode-hook)
#+end_src

**** cl-lib highlighting

[[https://github.com/skeeto/cl-lib-highlight][cl-lib-highlight]] - Syntax highlighting for cl-lib, so that =cl-loop=, =cl-defun=, =cl-defstruct= and the like get highlighted

#+begin_src emacs-lisp :name cl-lib highlighting
  (use-package cl-lib-highlight
    :config
    (cl-lib-highlight-initialize))
#+end_src

**** Evaluation

Borrowed from Sacha Chau who borrowed it from Steve Purcell - change
=C-x C-e= to evaluate regions as well as last sexp.

#+begin_src emacs-lisp :name emacs-lisp-evaluation
  (defun sanityinc/eval-last-sexp-or-region (prefix)
    "Eval region from BEG to END if active, otherwise the last sexp."
    (interactive "P")
    (if (and (mark) (use-region-p))
        (eval-region (min (point) (mark)) (max (point) (mark)))
      (pp-eval-last-sexp prefix)))

  (bind-key "C-x C-e" 'sanityinc/eval-last-sexp-or-region emacs-lisp-mode-map)
#+end_src

**** elisp-slime-nav

[[https://github.com/purcell/elisp-slime-nav][elisp-slime-nav]] - Slime-style navigation of Emacs Lisp source.

#+begin_src emacs-lisp :name elisp-slime-nav
;; elisp-slime-nav-find-elisp-thing-at-point
;; elisp-slime-nav-describe-thing-at-point
(use-package elisp-slime-nav
  :defer t
  :diminish elisp-slime-nav-mode
  :config
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook lisp-interaction-mode-hook))
    (add-hook hook 'elisp-slime-nav-mode)))
#+end_src

**** CANCELED eval-sexp-fu

Thu Oct 12 19:34:50 2017 - canceled because it has some deprecation issues.

Flash the region that is evaluated (visual feedback) in elisp.

#+begin_src emacs-lisp :name eval-sexp-fu
  (use-package eval-sexp-fu
    :load-path "~/tmp/eval-sexp-fu.el"
    :init
    (setq eval-sexp-fu-flash-duration 0.4)
    :config
    (turn-on-eval-sexp-fu-flash-mode))
#+end_src

**** eldoc

#+begin_src emacs-lisp :name eldoc
(use-package "eldoc"
  :diminish eldoc-mode
  :commands turn-on-eldoc-mode
  :init
  (progn
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)))
#+end_src

**** ielm

REPL for elisp

#+begin_src emacs-lisp :name ielm
  (setq ielm-noisy nil)

  ;; Attribution - https://masteringemacs.org/article/evaluating-elisp-emacs
  ;; (defun ielm-auto-complete ()
  ;;   "Enables `auto-complete' support in \\[ielm]."
  ;;   (setq ac-sources '(ac-source-functions
  ;;                      ac-source-variables
  ;;                      ac-source-features
  ;;                      ac-source-symbols
  ;;                      ac-source-words-in-same-mode-buffers))
  ;;   (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
  ;;   (auto-complete-mode 1))
  ;; (add-hook 'ielm-mode-hook 'ielm-auto-complete)

  (use-package ielm
    :config (add-hook 'ielm-mode-hook '(lambda ()
                                         (smartparens-mode 1)
                                         (eldoc-mode 1))))
#+end_src

*** Golang
*** Javascript

Because work.

#+begin_src emacs-lisp :name js2-mode
(use-package js2-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+end_src

*** Python

**** Initial Configuration

#+begin_src emacs-lisp :name python
(require 'smartparens-python)

(defun deftmacs:python-mode ()
    (interactive)
    ;; (add-to-list (make-local-variable 'company-backends 'company-jedi))
    ;; I prefer superword-mode for python
    (superword-mode)
    (diminish 'superword-mode)

    ;; Jedi for autocomplete
    ;; Thu Aug 10 09:25:28 2017 - commented jedi:setup out and now
    ;; Python autocomplete works as expected
    ;; (jedi:setup)
    (setq jedi:complete-on-dot t)
    (setq jedi:get-in-function-call-delay 500)
    (setq jedi:tooltip-method '(popup))
    (add-to-list 'company-backends '(company-jedi company-files))

    ;; Turn off flyspell-mode - it interferes with jedi popup timing.
    ;; NOTE: Also make sure NOT to enable flyspell-prog-mode as this will interfere as well.
    (flyspell-mode 0)

    ;; flycheck
    (flycheck-mode 1)
    (setq flycheck-flake8rc "~/.flake8"
          flycheck-flake8-maximum-line-length 105
          flycheck-checker 'python-flake8)

    ;; autofill comments.
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1)

    ;; line numbers
    ;; (nlinum-mode)
    )

  (add-hook 'python-mode-hook 'deftmacs:python-mode)
#+end_src

**** pyvenv

Using [[https://github.com/jorgenschaefer/pyvenv][pyvenv]] to manage conda environments.

#+begin_src emacs-lisp :name pyenv
  (use-package pyvenv
    :ensure t
    :config
    (setenv "WORKON_HOME" "/Users/ebodine/miniconda3/envs")
    (pyvenv-mode 1)
    (pyvenv-tracking-mode 1))
#+end_src

*** Shell

#+begin_src emacs-lisp :name shell scripting
  (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Various file types
*** csv

Comma (or other delimiter) separated files.

#+begin_src emacs-lisp :name csv
(use-package csv-nav
  :defer t
  :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode)
  :init
  (progn
    (use-package csv-mode)
    (setq csv-separators '("," ";" "|" " "))))
#+end_src

*** Docker file mode

[[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] for editing Docker files

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC

*** jinja2

[[https://github.com/paradoxxxzero/jinja2-mode][jinja2-mode]] - A major mode for jinja2 templates.

#+begin_src emacs-lisp :name jinja2-mode
  (use-package jinja2-mode
    :ensure t)
#+end_src

*** Mardown mode

[[http://jblevins.org/projects/markdown-mode/][Markdown Mode]] - Major mode for editing [[http://daringfireball.net/projects/markdown/][Markdown]] formatted text.

#+begin_src emacs-lisp :name markdown
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'"       . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (smartparens-mode -1)

  (setq-local helm-dash-docsets '("Markdown"))
#+end_src

[[http://joostkremers.github.io/pandoc-mode/][Pandoc]] - Convert text written in one markup language into another markup language.

It is possible to create different output profiles for a single input file, so that you
can, for example, write your text in Markdown and then translate it to HTML for online
reading, PDF for offline reading and Texinfo for reading in Emacs

#+begin_src emacs-lisp :name Pandoc
  (use-package pandoc-mode)
#+end_src

[[https://github.com/blak3mill3r/vmd-mode][vmd-mode]] - Fast Github-flavored Markdown previews synchronized with changes to an
           emacs buffer (no need to save).
Dependencies: Node.js & vmd

[[https://github.com/yoshuawuyts/vmd][vmd]] - can be installed with ```npm install -g vmd```

#+begin_src emacs-lisp :name vmd-mode
  (use-package vmd-mode)
#+end_src

*** Salt mode

[[https://github.com/glynnforrest/salt-mode][salt-mode]] - Mode for editing Salt states

#+begin_src emacs-lisp :name salt-mode
  (use-package salt-mode)
#+end_src

*** SQL Mode

The interactive SQL mode is based on ComintMode. The following interpreters are supported:

    psql by PostgreSQL
    mysql by MySQL
    sqlite or sqlite3 for SQLite

    #+begin_src emacs-lisp :name sql-mode
      (add-to-list 'same-window-buffer-names "*SQL*")

      (add-hook 'sql-interactive-mode-hook
                (lambda ()
                  (toggle-truncate-lines t)))
    #+end_src

*** Text mode

#+begin_src emacs-lisp :name text mode
  (add-hook 'text-mode-hook '(lambda ()
                               (auto-fill-mode 1)
                               (setq word-wrap 1)))
#+end_src

*** Yaml & Json

Json mode

#+begin_src emacs-lisp :name json-mode
  (use-package json-mode
    :defer t
    :diminish json-mode)
#+end_src

YAML mode

#+begin_src emacs-lisp :name yaml-mode
  (use-package yaml-mode
    :mode ("\\.yml$" "\\.sls$")
    :diminish yaml-mode
    :config
    (with-eval-after-load 'yaml-mode
      '(define-key yaml-mode-map (kbd "C-j""") nil))
    (add-hook 'yaml-mode-hook
              (lambda ()
                (setq-local eclectric-indent-mode nil))))
#+end_src

** Keybindings
*** Ctrl/Alt/Super

We get bind-keys for "free" with the install of use-package.

#+begin_src emacs-lisp :name keybindings
    ;; a
    (global-set-key (kbd "C-a") 'crux-move-beginning-of-line)

  (global-unset-key (kbd "s-a"))
  (bind-keys* :prefix-map super-a-map
              :prefix "s-a"
              ("a" . mark-whole-buffer)
              ("f" . mark-defun)
              ("p" . mark-paragraph)
              ("s-a" . mark-whole-buffer)
              ("s-f" . mark-defun)
              ("s-p" . mark-paragraph)
    )

    ;; ;; b

    ;; ;; d
  (defun deftpunk/kill-current-buffer ()
      (interactive)
      (kill-buffer (current-buffer)))

    (global-unset-key (kbd "s-d"))
    (bind-keys :prefix "s-d"
               :prefix-map super-d-map
               ("d" . crux-kill-whole-line)
               ("k" . deftpunk/kill-current-buffer)
               ("l" . deftmacs/copy-current-line-or-region)
               ("s-d" . crux-kill-whole-line)
               ("s-k" . deftpunk/kill-current-buffer)
               ("s-l" . deftmacs/copy-current-line-or-region)
    )


    (global-unset-key (kbd "C-s-d"))
    (global-set-key (kbd "C-s-d") 'crux-insert-date)
    ;; e


    ;; f
    (global-unset-key (kbd "s-f"))
    (global-set-key (kbd "s-f") 'avy-goto-char-in-line)

    ;; g
    (global-unset-key (kbd "s-g"))
  (bind-keys :prefix "s-g"
               :prefix-map super-g-map
               ("c" . goto-char)
               ("g" . goto-line)
               ("," . goto-last-change-reverse)
               ("." . goto-last-change)
               ("s-c" . goto-char)
               ("s-g" . goto-line)
    )

    ;; ;; h
   (global-unset-key (kbd "s-h"))
    (global-set-key (kbd "s-h") 'windmove-left)

    ;;i
    (global-set-key (kbd "s-i") 'helm-mini)

    ;; j
    (global-unset-key (kbd "s-j"))
    (global-set-key (kbd "s-j") 'windmove-down)

    ;; k
    (global-unset-key (kbd "s-k"))
    (global-set-key (kbd "s-k") 'windmove-up)

    ;; l
    (global-unset-key (kbd "s-l"))
    (global-set-key (kbd "s-l") 'windmove-right)

    ;; n
    (global-unset-key (kbd "s-n"))
    (global-set-key (kbd "s-n") 'next-error)

    ;; o
    (global-unset-key (kbd "C-o"))
    (global-set-key (kbd "C-o") 'crux-smart-open-line)
    (global-set-key (kbd "C-S-o") 'crux-smart-open-line-above)

    ;; p
    (global-unset-key (kbd "s-p"))
    (global-set-key (kbd "s-p") 'previous-error)

    ;; r
    (global-set-key (kbd "s-r") 'recenter-positions)


    ;; t
    (global-unset-key (kbd "s-S-t"))
    (global-unset-key (kbd "s-t"))
    (global-set-key (kbd "s-S-t") 'helm-mt)

    ;; w
    (global-unset-key (kbd "C-w"))
    (global-set-key (kbd "C-w") 'backward-kill-word)

    ;; z
    (global-unset-key (kbd "s-z"))
    (global-set-key (kbd "s-z") 'zzz-up-to-char)

    ;; -
    (global-unset-key (kbd "s--"))
    (global-set-key (kbd "s--") 'ace-window)

    ;; ;
    (global-set-key (kbd "s-;") (crux-with-region-or-line comment-or-uncomment-region))

    (global-set-key (kbd "C-.") 'goto-last-change)
    (global-set-key (kbd "C-,") 'goto-last-change-reverse)

    ;; > & <
    (global-set-key (kbd "s-<") 'beginning-of-buffer)
    (global-set-key (kbd "s->") 'end-of-buffer)

    (global-set-key (kbd "s-}") 'forward-paragraph)
    (global-set-key (kbd "s-{") 'backward-paragraph)

    ;; arrows
    (global-set-key (kbd "M-<left>") 'backward-word)
    (global-set-key (kbd "M-<right>") 'forward-word)
    (global-set-key (kbd "s-<up>") 'windmove-up)
    (global-set-key (kbd "s-<down>") 'windmove-down)
    (global-set-key (kbd "s-<left>") 'windmove-left)
    (global-set-key (kbd "s-<right>") 'windmove-right)
#+end_src

*** Escape

Some code to use =Escape= to quit more things.  The minibuffer-keyboard-quit
function lives in deft-functions.el

#+begin_src emacs-lisp :name Escape keys
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

  (defun my-helm-init ()
    (interactive)
    (define-key helm-map (kbd "ESC") 'helm-keyboard-quit))
  (add-hook 'after-init-hook 'my-helm-init)

  ;; Map Escape to cancel like C-g
  (define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
  (define-key isearch-mode-map "\e" 'isearch-abort)       ;; \e seems to work better for terminals
  ;; TODO Thu Jun 30 16:41:14 2016 - This causes splits to close for some reason???
  ;;  (global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
#+end_src

*** Hydra

[[https://github.com/abo-abo/hydra][Hydra]] - Make Emacs bindings that stick around.

The :color key is a shortcut. It aggregates :exit and :foreign-keys key in the following way:

| color    | toggle                     |
|----------+----------------------------|
| red      |                            |
| blue     | :exit t                    |
| amaranth | :foreign-keys warn         |
| teal     | :foreign-keys warn :exit t |
| pink     | :foreign-keys run          |

It's also a trick to make you instantly aware of the current hydra keys that you're about to press: the
keys will be highlighted with the appropriate color.

#+begin_src emacs-lisp :name Hydra
(use-package hydra)
#+end_src

*** Hydra maps
**** hydra-cee

Hydra for what would normally be ~C-c x~ or ~C-c C-x~ commands.

#+begin_src emacs-lisp :name hydra-cee
  (defhydra hydra-cee (:color blue :hint nil)
    "
                                                                                    ,--------------------.
                                                                                    | Ctrl-c or the like |
      ,-----------------------------------------------------------------------------'--------------------'

                                     [_i_] Semantic or Imenu                          [_v_] Pyvenv Environment
                                     [_j_] Join line
                                     [_k_] Show kill ring
                                     [_l_] Flycheck            [_s_] Helm Snippets    [_y_] New Snippet
                                     [_m_] Multiterm           [_t_] Todo/Note/Bug

  "
    ("i" helm-semantic-or-imenu)
    ("j" crux-top-join-line)
    ("k" helm-show-kill-ring)
    ("l" hydra-flycheck/body :exit t)
    ("m" helm-mt)
    ("s" helm-yas-complete)
    ("t" deftpunk/hltodo-swiper)
    ("v" pyvenv-workon)
    ("y" yas-new-snippet)
    ("<ESC>" nil "Quit" :exit t)
    )
#+end_src

**** hydra-files-projectile

#+begin_src emacs-lisp :name hydra-files-projectile
  (defhydra hydra-files-projectile (:color blue
                                    :hint nil)
  "
  CURRENT PROJECT: %(no-projectile-project-p)


  _a_ Ag                                             _m_ Go to *Messages*     _s_ Go to *scratch*

  _c_ Clear Projectile Cache
                                                     _p_ Switch Projects
                                _k_ Kill Buffer
  _f_ Find Files

  "
  ("<tab>" hydra-jk/body "back")
  ("a" (lambda ()
         (interactive)
         (if (no-projectile-projectp)
             (helm-do-ag)
           (helm-projectile-ag))))
  ("c" projectile-invalidate-cache)
  ("f" counsel-find-files)
  ; ("f" (lambda ()
  ;        (interactive)
  ;        (if (no-projectile-project-p)
  ;            (helm-find-files-1 default-directory)
  ;          (helm-projectile-find-file))))
  ("k" (kill-buffer (current-buffer)))
  ("m" (lambda ()
         (interactive)
         (let ((messages-buffer (get-buffer-create "*Messages*")))
           (switch-to-buffer messages-buffer))))
  ("p" projectile-switch-project)
  ("s" eme-goto-scratch)

  ("<ESC" nil "Quit" :exit t))
#+end_src

**** hydra-flycheck

A hydra to open up flycheck errors and navigation through them - [[https://github.com/abo-abo/hydra/wiki/Flycheck][Source]]

Made the following changes:
- Added the change to disable flycheck-pos-tip-mode and renable it; it slowed
  down the movement between errors.
- Added the option t to quit-windows-on; this closes the created window.

#+begin_src emacs-lisp :name hydra-flycheck
  (defhydra hydra-flycheck
    (:pre (progn (setq hydra-lv t) (flycheck-list-errors) (flycheck-pos-tip-mode -1))
          flycheck-previous-error          :post (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*" t) (flycheck-pos-tip-mode 1))
          :hint nil)
    "
                                                                            ,-----------------.
                                                                            | Flycheck Errors |
    ,-----------------------------------------------------------------------'-----------------'
      [_f_] Filter
      [_j_] Next Error
      [_k_] Previous Error
      [_gg_] First Error
      [_G_] Last Error
    "
    ("f"  flycheck-error-list-set-filter)
    ("j"  flycheck-next-error)
    ("k"  flycheck-previous-error)
    ("gg" flycheck-first-error)
    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)))
    ("q" nil "Quit")
    ("<ESC>" nil "Quit"))
#+end_src

**** hydra-gee

#+begin_src emacs-lisp :name hydra-gee
  (defhydra hydra-gee (:color blue :hint nil)
    "
                                                         ,-----------------.
                                                         | Gee, cool stuff |
  ,------------------------------------------------------'-----------------'
      [_d_] Helm Dash
      [_g_] Goto Line
      [_G_] End of buffer
      [_l_] Goto line
      [_x_] Open URL @ pnt
    "
    ("d" helm-dash :exit t)
    ("g" beginning-of-buffer)
    ("G" end-of-buffer)
    ("l" goto-line)
    ("x" (lambda ()
           (if (eq major-mode 'org-mode)
               (org-open-at-point)
             (browse-url-at-point))))

    ("<ESC>" nil "Quit" :exit t))
#+end_src

**** hydra-version-control

Hydra for version control functions.

#+begin_src emacs-lisp :name hydra-version-control
  (defhydra hydra-version-control (:color blue :hint nil)
    "
  git-messenger
  -------------
  c - Copy commit ID        s - Pop up git show --stat
  d - Pop up git diff       S - Pop up git show --stat -p
  m - Copy commit message   q - Quit


                                                                      ,-------------------.
      General                    Git                                  | Version control   |
    ,-----------------------------------------------------------------'-------------------'
    [_v_] Magit status          [_m_] git-messenger
    [_k_] Monky status
    [_a_] vc-annotate           [_s_] stage file
                                [_u_] unstage file
                                [_b_] blame
                                [_t_] timemachine

  "
    ("<tab>" hydra-master/body "back")

    ("a" vc-annotate)

    ;; If currently monky-blame-mode then quit it, else try to blame current
    ;; file.  If no, check magit-blame-mode and either quit that or start
    ;; magit-blame.
    ("b" (lambda ()
           (interactive)
           (if (bound-and-true-p monky-blame-mode)
               (monky-quit-window)
             (progn
               (if (deftpunk/catch-error-p 'monky-blame-current-file)
                   (if (bound-and-true-p magit-blame-mode)
                       (magit-blame-quit)
                     (call-interactively 'magit-blame)))))))

    ("k" monky-status)
    ("m" git-messenger:popup-message)
    ("s" magit-stage-file)
    ("t" git-timemachine)
    ("u" magit-unstage-file)
    ("v" magit-status)

    ("<ESC>" nil "quit")
    )
#+end_src
**** hydra-window-sizing

Resize windows dynamically

#+begin_src emacs-lisp :name hydra-window-sizing
    (defhydra hydra-window-sizing (:color blue)
      "
  .------------------,
  | Window Re-sizing |
  '------------------'--------------------------------------------------------------------.

                         ^Enlarge Vertically^

			     ^[_k_]^
			      ^^↑^^

   Shrink Horizontally [_h_] ←    → [_l_] Enlarge Horizontally

                              ^^↓^^
                             ^[_j_]^

			Shrink Vertically
    "
      ("<tab>" hydra-windows/back "Back to windows")

      ("h" (lambda ()
             (interactive)
             (shrink-window-horizontally 5)) :color pink)
      ("j" (lambda ()
             (interactive)
             (shrink-window 5)) :color pink)
      ("k" (lambda ()
             (interactive)
             (enlarge-window 5)) :color pink)
      ("l" (lambda ()
             (interactive)
             (enlarge-window-horizontally 5)) :color pink)

      ("<ESC>" nil "Quit"))
#+end_src

**** hydra-windows

Hydra for window/frame control and movements.

#+begin_src emacs-lisp :name hydra-windows
    (defhydra hydra-windows (:color blue :hint nil)
      "
                                                                                                                 ,-------------------.
     Navigation        Movement + Winner                Actions                     More Actions                 | Window Management |
  ,--------------------------------------------------------------------------------------------------------------'-------------------'
       ^_k_^            [_|_] Vert split + move     [_b_] Balance windows           [_n_] Scroll other Window
       ^^↑^^            [_-_] Horizon split + move  [_c_] Delete current Window     [_p_] Scroll other Window Up
   _h_ ←   → _l_                                  [_d_] Ace delete windows
       ^^↓^^            [_w_] Ace Window            [_e_] Resize Windows            [_s_] Horizontal Split
       ^_j_^                                                                        [_v_] Vertical Split
                        [_u_] Winner Undo
                        [_r_] Winner redo           [_i_] Maximize Window           [_f_] New Frame
                                                                                    [_t_] Transpose Frame

       "
       ("<tab>" hydra-master/back "Back to Main")

       ;("a" yegge/swap-windows)
       ("b" balance-windows  :exit t)
      ("c" delete-window  :exit t)
      ("d" ace-delete-window :exit t)
      ("e" hydra-window-sizing/body)
      ("f" make-frame)
      ("i" ace-maximize-window)
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("n" scroll-other-window)
      ("o" delete-other-windows  :exit t)
      ("p" scroll-other-window-down)
      ("r" winner-redo)
      ("s" split-window-vertically  :exit t)
      ("t" transpose-frame :exit t)
      ("u" winner-undo)
      ("v" split-window-horizontally  :exit t)
      ("w" ace-window :exit t)
      ("|" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)))
      ("-" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)))
      ("=" balance-windows)

      ("<ESC>" nil "quit")
      )
#+end_src

*** Hydra mode maps
**** hydra-emacs-lisp

A hydra for Elisp modes.  It inherits the smartparens hydra.

#+begin_src emacs-lisp :name hydra-emacs-lisp
  (defhydra hydra-emacs-lisp (:color red)
    "
                                                             ,-----------------.
     Docs               Utilities                            | Emacs Lisp Mode |
,------------------------------------------------------------'-----------------'
  [_d_] Describe        [_i_] ELM
                        [_p_] ELP
 "
    ("d" describe-foo-at-point :exit t)
    ("e" eval-expression :exit t)
    ("i" ielm :exit t)
    ("p" hydra-emacs-lisp-profiler/body :exit t)
    ("r" eval-region :exit t)
    ("x" eval-defun :exit t)
    ("<ESC>" nil "Quit" :exit t)
    )
#+end_src

**** hydra-org-mode

A hydra for Org mode

#+begin_src emacs-lisp :name hydra-orgmode
  (defhydra hydra-orgmode-mode (:color blue
                                :hint nil)
    "
                                                                          .-----------.
                                                                          |  Org Mode |
    ,---------------------------------------------------------------------'-----------'
    [_e_] Mark element
    [_h_] Helm buffer headings
    [_s_] Mark subtree
    [_o_] Ace link
  "
    ("e" org-mark-element)
    ("h" helm-org-in-buffer-headings)
    ("s" org-mark-subtree)
    ("o" ace-link-org)
    ("<ESC>" nil "Quit" :exit t))
#+end_src

**** hydra-python-mode

A hydra for python.

#+begin_src emacs-lisp :name hydra-python
  (defhydra hydra-python-mode (:color blue
                                      :hint nil)
    "
                                                                            .----------.
                                                                            |  Python  |
      ,---------------------------------------------------------------------'----------'
      [_d_] Jedi - goto definition
      [_m_] Python Mark function
      [_p_] Jedi - Pop goto definition
      [_w_] Pyvenv workon Env
    "
    ("d" jedi:goto-definition)
    ("m" python-mark-defun)
    ("p" jedi:goto-definition-pop-marker)
    ("w" pyvenv-workon)
    ("<ESC>" nil "Quit" :exit t))
#+end_src

*** hydra-jk

A Hydra for the jk keychord - see Keychord below for more information.

#+begin_src emacs-lisp :name hydra-jk
  (defun deftpunk/hydra-major-mode-hack ()
    "Mucho hackiness to get different hydras for different modes but the same
  prefix key.  There has to be a better way."
    (interactive)
    (let ((my-hmodes '((lisp-interaction-mode . hydra-emacs-lisp/body)
                       (python-mode . hydra-python-mode/body)
                       (org-mode . hydra-orgmode-mode/body)
                       (emacs-lisp-mode . hydra-emacs-lisp/body))))
      (condition-case error
          (funcall (assoc-default major-mode my-hmodes))
        ('error (message "No Hydra for this major mode: %s" major-mode)))))

  (defhydra hydra-jk (:color blue :hint nil)
    "
                                                                                     ,----------------.
                                                                                     | Master Blaster |
  ,----------------------------------------------------------------------------------'----------------'

  "
    ("a" avy-goto-char-timer)
    ;; ("b" )
    ("c" hydra-cee/body)
    ("e" deftpunk/hydra-major-mode-hack)
    ("f" hydra-files-projectile/body)
    ("g" hydra-gee/body)
    ;; ("h" )
    ("i" helm-mini)
    ;; ("j" )
    ;; ("k" )
    ("l" avy-goto-char-in-line)
    ;; ("m" )
    ;; ("n" hydra-toggle-stuff/body)
    ;; ("o" )
    ;; ("p" )
    ("q" save-buffers-kill-terminal)
    ;; ("r" )l
    ("s" swiper)
    ;; ("t" )
    ;; ("u" )
    ("v" hydra-version-control/body)
    ("w" hydra-windows/body)
    ("x" helm-M-x)
    ;; ("y" )
    ("z" zzz-up-to-char)

    ("<ESC>" nil "Quit" :exit t)
    )
#+end_src

*** key-chord

[[https://www.emacswiki.org/emacs/key-chord.el][key-chord]] - Map pairs of simultaneously pressed keys to commands.

Keychord has a couple of drawbacks
1. Doesn't get recorded when recording macros.
2. Can't use function keys in keychords
3. Doesn't work well with internationalization packages.

#+begin_src emacs-lisp :name key-chord
  (use-package key-chord
    :init
    (key-chord-mode 1)
    (key-chord-define-global "jk" 'hydra-jk/body))
#+end_src
* Notes
** wrap around backward-kill-word to kill-region & sp-kill-region

Currently <delete> will kill a region, should make other things do so
as well, e.g. C-w
