#+title Deftpunk Emacs
#+author: Erick Bodine <erick.bodine@gmail.com>
#+property: header-args :tangle "/Users/bodine/MyStuff/emacsrc/init.el"
#+startup: content
#+auto_tangle: t

* About

The thermonuclear editor.

** External dependencies

- ripgrep
- pngpaste
- git


* Early-Init
:properties:
:header-args: :tangle "/Users/bodine/MyStuff/emacsrc/early-init.el"
:end:
#+name: early-init-header-block
#+begin_src emacs-lisp :exports none
;;; early-init.el --- deftpunk early-init file. -*- lexical-binding: t; buffer-read-only: t -*-
;;;
;;; Commentary:
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in emacs.d/dftpnk-emacs.org
;;;
;;; Code:
#+end_src

** Garbage Collection

You'll see this modification in many config files around the internet. The idea is that emacs sets it's memory
threshold 40 years in the past. This causes the garbage collector to run frequently and can cause delays or
muck up the speed of your setup. We pretty much disable garbage collection during the initial phase to improve
our startup time. After we have given enough time for everything to load we then set the gc-theshold to a
reasonable number. Sometimes people set the threshold back to its default value, but I keep it a little higher
to handle things like fuzzy completion and language-server requirements. (See also GCMH Mode)

#+begin_src emacs-lisp :name garbage-collection
  ;; Time how long Emacs starts up.
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  (defvar default-file-name-handler-alist file-name-handler-alist)
  (defvar extended-gc-cons-threshold most-positive-fixnum)
  (defvar default-gc-cons-threshold (* 100 1024 1024))

  ;; Native Compilation Vars
  (when (featurep 'native-compile)
    (setq native-comp-speed 2
          native-comp-async-report-warnings-errors nil
          native-comp-deferred-compilation t)
    ;; Set the right directory to store the native compilation cache
    ;; NOTE the method for setting the eln-cache directory depends on the emacs version
    (when (fboundp 'startup-redirect-eln-cache)
      (if (version< emacs-version "29")
          (add-to-list 'native-comp-eln-load-path (convert-standard-filename (expand-file-name "var/eln-cache/" user-emacs-directory)))
        (startup-redirect-eln-cache (convert-standard-filename (expand-file-name "var/eln-cache/" user-emacs-directory))))))

  ;; Prevents libgccjit error
  ;; Solution found at: https://github.com/d12frosted/homebrew-emacs-plus/issues/323
  (setenv "LIBRARY_PATH" "/usr/local/opt/gcc/lib/gcc/11:/usr/local/opt/libgccjit/lib/gcc/11:/usr/local/opt/gcc/lib/gcc/11/gcc/x86_64-apple-darwin21/11")

  (setq-default auto-window-vscroll nil
                bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right
                frame-inhibit-implied-resize t
                inhibit-default-init t
                site-run-file nil
                load-prefer-newer t
                read-process-output-max (* 1024 1024 3))

  (setq file-name-handler-alist nil
        package-enable-at-startup nil
        gc-cons-threshold extended-gc-cons-threshold)

  (defun arco/return-gc-to-default ()
    (setq-default gc-cons-threshold default-gc-cons-threshold
                  load-prefer-newer nil))

  (defun arco/reset-file-handler-alist-h ()
    (dolist (handler file-name-handler-alist)
      (add-to-list 'default-file-name-handler-alist handler))
    (setq file-name-handler-alist default-file-name-handler-alist))

  (defun deftpunk/startup-time ()
    "Display garbage collections and startup time."
    (let ((garbage-collection-messages t)) (garbage-collect))
    (let ((msg (format "started (%d) in %s" (emacs-pid) (emacs-init-time))))
      (message (concat "emacs: " msg))))

  (add-hook 'after-init-hook #'arco/reset-file-handler-alist-h)
  (add-hook 'after-init-hook #'arco/return-gc-to-default)
  (add-hook 'after-init-hook #'deftpunk/startup-time)
  (advice-add #'package--ensure-init-file :override #'ignore)

  ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
  ;; compiled ahead-of-time when they are installed and site files are compiled
  ;; when gccemacs is installed.
  (setq comp-deferred-compilation nil)

  ;; remove searching for .gz files, as all my packages are uncompressed
  ;; this halves how many files emacs tries to open (if you have a lot of
  ;; packages, emacs executes a lot of failing file opens)
  (setq jka-compr-load-suffixes nil)
  (jka-compr-update)
#+end_src

** Pre-Gui Optimization

Ever since Emacs 27.0 we can utilize the early-init file to setup a few graphical settings without seeing a
major slow down. The biggest speed ups I've seen from this is setting =vertical-scroll-bars= , =ns-appearance=,
and =ns-transparent-titlebar=. I also set the font during this time and handle a few other graphical settings.

#+begin_src emacs-lisp :name gui-optimization
  ;; Some nice UI tweaks that improve performance when specified
  ;; in early-init.el
  (modify-all-frames-parameters '((width . 105)
                                  (height . 100)
                                  (left . 0)
                                  (right . 0)
                                  (internal-border-width . 1)
                                  (vertical-scroll-bars . nil)
                                  (tool-bar-lines . 0)
                                  (ns-appearance . dark)
                                  ))

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  ;; Get rid of any window chrome.
  (when window-system
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1))
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)
#+end_src

** UTF-8

#+begin_src emacs-lisp :name utf-8
  (setq default-input-method nil
        utf-translate-cjk-mode nil)
  (set-language-environment 'utf-8)

  ;; Make UTF-8 the default coding system.
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8
        selection-coding-system 'utf-8)

  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

** Bonus keys

This allows us of C-i, C-m & C-[ ... you know, like other editors can.
https://emacsnotes.wordpress.com/2022/09/11/three-bonus-keys-c-i-c-m-and-c-for-your-gui-emacs-all-with-zero-headache/

#+begin_src emacs-lisp :name bonus-keys
  (add-hook
   'after-make-frame-functions
   (defun setup-blah-keys (frame)
     (with-selected-frame frame
       (when (display-graphic-p) ; don't remove this condition, if you want
                                          ; terminal Emacs to be usable
         ;; - When you type `Ctrl-i', Emacs see it as `BLAH-i', and NOT as 'Tab'
         ;; - When you type `Ctrl-m', Emacs see it as `BLAH-m', and NOT as 'Return'
         ;; - When you type `Ctrl-[', Emacs see it as `BLAH-lsb', and not as 'Esc'.
         ;;
         ;; That is,
         ;;
         ;; - `Ctrl-i' and 'Tab' keys are different
         ;; - `Ctrl-m' and 'Return' keys are different
         ;; - `Ctrl-[' and 'Esc' keys are different
         ;;
         ;; The three BLAH keys are the bonus keys.
         (define-key input-decode-map (kbd "C-i") [BLAH-i])
         (define-key input-decode-map (kbd "C-[") [BLAH-lsb]) ; left square bracket
         (define-key input-decode-map (kbd "C-m") [BLAH-m])
         ;; You can replace `BLAH-' above with `C-' or
         ;; `CONTROL-', it doesnt' matter.
         ;;
         ;; BLAH is merely a symbol / name; feel free to change
         ;; it to whatever you like .
         ))))
#+end_src

#+name: early-init-footer-block
#+begin_src emacs-lisp :exports none
(provide 'early-init)
;;; early-init.el ends here
#+end_src

* Init
#+name: init-header-block
#+begin_src emacs-lisp :exports none
;;; init.el --- deftpunk Emacs config file -*- lexical-binding: t; buffer-read-only: t -*-
;;;
;;; Commentary:
;;; Emacs `init.el' config for deftpunk
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in emacs.d/deftpunk-emacs.org
;;;
;;; Code:
#+end_src

** Some Globals

#+begin_src emacs-lisp :name globals
  ;;; Some constants for use elsewhere.
    (defconst deftpunk--emacs-dir (file-truename "~/.emacs.d")
      "The path to the emacs.d directory")

    (defconst deftpunk--org-configuration-file (concat deftpunk--emacs-dir "/deftpunk-emacs.org")
      "The Org mode literate configuration file.")

    (defconst deftpunk--etc-dir (concat deftpunk--emacs-dir "/etc/")
      "Location for files to save across systems.")

    (defconst deftpunk--var-dir (concat deftpunk--emacs-dir "/var/")
      "Location for cache & files that we don't save across systems.")

    ;; I use Mac & occasionally Linux, no Windoze.
    (defconst IS-MAC (eq system-type 'darwin))
    (defconst IS-LINUX (eq system-type 'gnu/linux))
#+end_src

** Package Management

   Use straight, use-package, blackout, general and others that we use together for
   package management.  I try to do as much with use-package as possible for the convenience.

*** [[https://github.com/raxod502/straight.el][straight]]

#+begin_src emacs-lisp :name straight
  (defvar bootstrap-version)
  (setq-default straight-repository-branch "develop"
		straight-recipes-gnu-elpa-use-mirror t
		straight-vc-git-default-clone-depth 1
		straight-fix-org t
		straight-fix-flycheck t
		straight-use-package-by-default t
		straight-check-for-modifications '(check-on-save find-when-checking))

  (defvar bootstrap-version)
  (let ((bootstrap-file
	     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	    (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	      (url-retrieve-synchronously
	       "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	       'silent 'inhibit-cookies)
	    (goto-char (point-max))
	    (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; This is a variable that has been renamed but straight still refers when
  ;; doing :sraight (:no-native-compile t)
  (setq comp-deferred-compilation-black-list nil)
#+end_src

*** [[https://github.com/jwiegley/use-package][Use-Package]]

#+begin_src emacs-lisp :name use-package
(setq-default use-package-verbose nil
              use-package-always-defer t
              use-package-compute-statistics nil
              use-package-expand-minimally t
              use-package-enable-imenu-support nil)
(straight-use-package 'use-package)
#+end_src

*** [[https://github.com/ajgrf/on.el][on.el]]

Some utility hooks and functions from Doom Emacs.

Hooks:
=on-first-input= - eg. delay loading which-key-mode until the 1st keys is pressed.
=on-first-file=
=on-first-buffer=
=on-init-ui=
=on-switch-buffer=
=on-switch-frame=
=on-switch-window=

#+begin_src emacs-lisp :name on.el
  (use-package on.el
    :straight (:host github :repo "ajgrf/on.el")
    :config
    (require 'on))
#+end_src

*** [[https://github.com/raxod502/blackout][Blackout]]

Similar to packages like =minions=, =diminish=, or =delight=. You can alter how your minor and major modes show up
in the mode-line.

#+begin_src emacs-lisp :name blackout
(use-package blackout
  :demand t
  :straight (:host github :repo "raxod502/blackout"))
#+end_src

*** [[https://github.com/noctuid/general.el][General]]

Manage keybindings.

#+begin_src emacs-lisp :name general.el
  (use-package general
    :demand t
    :straight t)

  ;; local leader
  ;; This allows for finer granularity than hydra-major-mode by binding to individual key maps.
  (general-create-definer deftpunk-local-leader-def
    :prefix "C-;")
#+end_src

*** [[https://github.com/abo-abo/hydra][hydra]]

Make some bindings stick around.

#+BEGIN_SRC emacs-lisp :name hydra
  (use-package hydra)
#+END_SRC

*** [[https://github.com/justbur/emacs-which-key][which-key]]

Display keybindings following your prefix command in a popup.

#+begin_src emacs-lisp :name which-key
  (use-package which-key
    :commands (which-key-mode)
    :hook (on-first-input . which-key-mode)
    :init
    (setq which-key-enable-exteded-define-key t)
    :config
    (setq which-key-idle-delay 0.5))

  (which-key-mode +1)
#+end_src

** Initial packages and libraries

*** [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

Make Emacs pretty. Don't forget to run =M-x all-the-icons-install-fonts= if this is a new install.

#+begin_src emacs-lisp :name all_the_icons
  (use-package all-the-icons)
  (require 'all-the-icons)
#+end_src

*** [[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]]

Set face classes, attributes and fonts.

The last line fixes a bug in the code which prevents Org mode files from displaying properly, which
is found on [[https://github.com/hlissner/doom-emacs/issues/4729][GitHub]].

#+begin_src emacs-lisp :name mixed-pitch
  (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode)
    :config
    (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 130)
    (set-face-attribute 'fixed-pitch nil :font "Iosevka Nerd Font")
    (set-face-attribute 'variable-pitch nil :font "Iosevka Nerd Font"))
  (add-hook 'mixed-pitch-mode-hook #'solaire-mode-reset)
#+end_src

*** [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]]

 Major Mode Hydra & Pretty Mode Hydra

- pretty-hydra provides a macro pretty-hydra-define to make it easy to create
  hydras with a pretty table layout with some other bells and whistles
- Based on pretty-hydra, major-mode-hydra allows you to create pretty hydras
  with a similar API and summon them with the same key across different major
  modes.

unicode box characters: https://en.wikipedia.org/wiki/Box-drawing_character

#+BEGIN_SRC emacs-lisp :name major-mode-hydra
  (use-package major-mode-hydra
  ;  :straight (major-mode-hydra :type git :host github :repo "jerrypnz/major-mode-hydra.el")
    :init
    ;; Set the default major-mode-hydra title using all-the-icons icon
    ;; for the major mode.  THis is just in case we don't use any of the
    ;; "with=*" functions below.
    (setq major-mode-hydra-title-generator
      '(lambda (mode)
         (s-concat "\n"
                   (s-repeat 10 " ")
                   (all-the-icons-icon-for-mode mode :v-adjust 0.05)
                   " "
                   (symbol-name mode)
                   ""))))

  ;; A bunch of utility functions from https://gist.github.com/mbuczko/e15d61363d31cf78ff17427072e0c325
  (defun with-faicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-fileicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-octicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-material (icon str &optional height v-adjust)
    (s-concat (all-the-icons-material icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-mode-icon (mode str &optional height nospace face)
    (let* ((v-adjust (if (eq major-mode 'emacs-lisp-mode) 0.0 0.05))
           (args     `(:height ,(or height 1) :v-adjust ,v-adjust))
           (_         (when face
                        (lax-plist-put args :face face)))
           (icon     (apply #'all-the-icons-icon-for-mode mode args))
           (icon     (if (symbolp icon)
                         (apply #'all-the-icons-octicon "file-text" args)
                       icon)))
      (s-concat icon (if nospace "" " ") str)))
#+END_SRC

*** [[https://github.com/purcell/exec-path-from-shell][Exec-Path-From-Shell]]

Application launching on MacOS isn't handled by a specific system. This makes it really hard to get
envrionment variables from your shell to show up in Emacs. This package makes that easier.

An insteresting article on shell startup: [[https://blog.flowblok.id.au/2013-02/shell-startup-scripts.html][shell startup scripts]]

#+begin_src emacs-lisp :name exec-path-from-shell
  (use-package exec-path-from-shell
    :config
    (dolist (var '( "CONDARC"
                    "CONDA_ENVS_PATH"
                    "FZF_DEFAULT_COMMAND"
                    "IPYTHONDIR"
                    "PYTHONPATH"
                    "JAVA_HOME"
                    "MYPY_CACHE_DIR"
                    "PATH"))
      (add-to-list 'exec-path-from-shell-variables var)))
  ;; Because MacOSX ??
  (exec-path-from-shell-initialize)
#+end_src

*** [[https://github.com/emacscollective/no-littering][no-littering]]

Helping keep my ~/.emacs.d clean.

#+begin_src emacs-lisp :name no-littering
  (use-package no-littering
    :init
    (setq no-littering-etc-directory deftpunk--etc-dir
          no-littering-var-directory deftpunk--var-dir)
    (setq auto-save-file-name-transforms
          `((".*" ,(expand-file-name "auto-save/" no-littering-var-directory) t))))
#+end_src

*** f.el

#+begin_src emacs-lisp :name f.el
(use-package f)
#+end_src

*** s.el

String library

#+begin_src emacs-lisp :name s.el
  (use-package s)
  (require 's)
#+end_src
*** [[https://github.com/bbatsov/crux][crux]]

Some useful interactive commands from bbatsov

#+begin_src emacs-lisp :name crux
  (use-package crux
    :bind (("C-a" . crux-move-beginning-of-line)
	       ("C-k" . crux-smart-kill-line)))
#+end_src

*** [[https://orgmode.org/worg/org-contrib/][Org-Plus-Contrib]]

Intercept and kickout the builtin Org version for something more recent.

#+begin_src emacs-lisp :name org-contrib
(straight-use-package '(org :host github :repo "emacs-straight/org-mode" :local-repo "org"))
#+end_src

** Some functions

#+begin_src emacs-lisp :name my-lib
    ;;; Some convenience macros from Doom Emacs ;;;

  ;; 4/22/2020 - In after! below, I removed the check to see if the package was
  ;; in the list of doom-disabled-packages
  (defmacro after! (package &rest body)
    "Evaluate BODY after PACKAGE have loaded.

    PACKAGE is a symbol or list of them. These are package names, not modes,
    functions or variables. It can be:

    - An unquoted package symbol (the name of a package)
        (after! helm BODY...)
    - An unquoted list of package symbols (i.e. BODY is evaluated once both magit
      and git-gutter have loaded)
        (after! (magit git-gutter) BODY...)
    - An unquoted, nested list of compound package lists, using any combination of
      :or/:any and :and/:all
        (after! (:or package-a package-b ...)  BODY...)
        (after! (:and package-a package-b ...) BODY...)
        (after! (:and package-a (:or package-b package-c) ...) BODY...)
      Without :or/:any/:and/:all, :and/:all are implied.

    This is a wrapper around `eval-after-load' that:

    1. Suppresses warnings for disabled packages at compile-time
    2. No-ops for package that are disabled by the user (via `package!')
    3. Supports compound package statements (see below)
    4. Prevents eager expansion pulling in autoloaded macros all at once"
    (declare (indent defun) (debug t))
    (if (symbolp package)
        (list (if (or (not (bound-and-true-p byte-compile-current-file))
                      (require package nil 'noerror))
                  #'progn
                #'with-no-warnings)
              (let ((body (macroexp-progn body)))
                `(if (featurep ',package)
                     ,body
                   ;; We intentionally avoid `with-eval-after-load' to prevent
                   ;; eager macro expansion from pulling (or failing to pull) in
                   ;; autoloaded macros/packages.
                   (eval-after-load ',package ',body))))
      (let ((p (car package)))
        (cond ((not (keywordp p))
               `(after! (:and ,@package) ,@body))
              ((memq p '(:or :any))
               (macroexp-progn
                (cl-loop for next in (cdr package)
                         collect `(after! ,next ,@body))))
              ((memq p '(:and :all))
               (dolist (next (cdr package))
                 (setq body `((after! ,next ,@body))))
               (car body))))))

  (defmacro appendq! (sym &rest lists)
    "Append LISTS to SYM in place."
    `(setq ,sym (append ,sym ,@lists)))

  ;; TODO: Need the doom-enlist function definition for this to work.
  ;;  (defmacro defadvice! (symbol arglist &optional docstring &rest body)
  ;;    "Define an advice called SYMBOL and add it to PLACES.
  ;;
  ;;    ARGLIST is as in `defun'. WHERE is a keyword as passed to `advice-add', and
  ;;    PLACE is the function to which to add the advice, like in `advice-add'.
  ;;    DOCSTRING and BODY are as in `defun'.
  ;;
  ;;    \(fn SYMBOL ARGLIST &optional DOCSTRING &rest [WHERE PLACES...] BODY\)"
  ;;    (declare (doc-string 3) (indent defun))
  ;;    (unless (stringp docstring)
  ;;      (push docstring body)
  ;;      (setq docstring nil))
  ;;    (let (where-alist)
  ;;      (while (keywordp (car body))
  ;;        (push `(cons ,(pop body) (doom-enlist ,(pop body)))
  ;;              where-alist))
  ;;      `(progn
  ;;         (defun ,symbol ,arglist ,docstring ,@body)
  ;;         (dolist (targets (list ,@(nreverse where-alist)))
  ;;           (dolist (target (cdr targets))
  ;;             (advice-add target (car targets) #',symbol))))))
  ;;
  ;;  (defmacro delq! (elt list &optional fetcher)
  ;;    "`delq' ELT from LIST in-place.
  ;;      If FETCHER is a function, ELT is used as the key in LIST (an alist)."
  ;;    `(setq ,list
  ;;           (delq ,(if fetcher
  ;;                      `(funcall ,fetcher ,elt ,list)
  ;;                    elt)
  ;;                 ,list)))

  ;; There are certain buffers I don't want to delete on accident.
  ;; Code taken from https://github.com/rememberYou/.emacs.d/blob/master/config.org
  (defvar *protected-buffers* '("*scratch*" "*Messages*"))

  (defun arco/protected-buffers ()
    "Protects some buffers from being killed."
    (dolist (buffer *protected-buffers*)
      (if (get-buffer buffer)
          (with-current-buffer buffer
            (emacs-lock-mode 'kill))
        (get-buffer-create buffer)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill)))))

  (general-add-hook 'emacs-startup-hook #'arco/protected-buffers)

  ;;;###autoload
  ;; https://stackoverflow.com/questions/251908/how-can-i-insert-current-date-and-time-into-a-file-using-emacs
  (defun today ()
    "Insert string for today's date nicely formatted in American style,
  e.g. Sunday, September 17, 2000."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "%A, %B %e, %Y")))

  ;;;###autoload
  (defun flex//kill-current-buffer ()
    "What it says."
    (interactive)
    (kill-buffer (current-buffer)))

(defun vim-return ()
  "Still want Return to do the right thing in dired mode."
  (interactive)
  (if (eq major-mode 'dired-mode)
      (dired-find-file)
    (progn
      (next-line)
      (back-to-indentation-or-beginning))))

;; not broken, toggle letter case from
;; http://ergoemacs.org/emacs/modernization_upcase-word.html][xah]] originally.
;; http://stackoverflow.com/questions/18257573/how-to-toggle-letter-cases-in-a-region-in-emacs
(defun toggle-letter-case ()
  "Toggle the letter case of current word or text selection.
   Toggles between: “all lower”, “Init Caps”, “ALL CAPS”."
  (interactive)
  (let (p1 p2 (deactivate-mark nil) (case-fold-search nil))
    (if (region-active-p)
        (setq p1 (region-beginning) p2 (region-end))
      (let ((bds (bounds-of-thing-at-point 'word) ) )
        (setq p1 (car bds) p2 (cdr bds)) ) )
    (when (not (eq last-command this-command))
      (save-excursion
        (goto-char p1)
        (cond
         ((looking-at "[[:lower:]][[:lower:]]") (put this-command 'state "all lower"))
         ((looking-at "[[:upper:]][[:upper:]]") (put this-command 'state "all caps") )
         ((looking-at "[[:upper:]][[:lower:]]") (put this-command 'state "init caps") )
         ((looking-at "[[:lower:]]") (put this-command 'state "all lower"))
         ((looking-at "[[:upper:]]") (put this-command 'state "all caps") )
         (t (put this-command 'state "all lower") ) ) ) )
    (cond
     ((string= "all lower" (get this-command 'state))
      (upcase-initials-region p1 p2) (put this-command 'state "init caps"))
     ((string= "init caps" (get this-command 'state))
      (upcase-region p1 p2) (put this-command 'state "all caps"))
     ((string= "all caps" (get this-command 'state))
      (downcase-region p1 p2) (put this-command 'state "all lower")) )
    ) )

;;
(defun deftpunk/catch-error-p (func-symbol)
  "Call the passed function solely for the purpose of catching its error."
  (let (retval)
    (condition-case error
        (funcall func-symbol)
      ('error (setq retval error)))
    retval))

;; Full history of this function is foggy and lost to time.
;; https://stackoverflow.com/questions/234963/re-open-scratch-buffer-in-emacs
(defun eme-goto-scratch ()
  "this sends you to the scratch buffer"
  (interactive)
  (let ((eme-scratch-buffer (get-buffer-create "*scratch*")))
    (switch-to-buffer eme-scratch-buffer)
    (lisp-interaction-mode)))


#+end_src

** Emacs Defaults

#+begin_src emacs-lisp :name defaults
  (setq-default
   display-time-default-load-average nil            ; Don't display load average
   fill-column 100                                  ; Set column width
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Prefer spaces over tabs, duh.
   tab-width 4                                      ; Set width for tabs
   kill-ring-max 128                                ; Maximum length of kill ring
   load-prefer-newer t                              ; Prefer the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
   user-full-name "ERick BOdine"                    ; Name
   vc-follow-symlinks t                             ; Always follow the symlinks
   frame-title-format '("Emacs: %f")                ; Frame title
   icon-title-format frame-title-format             ; OS icon title
   message-log-max 8192                             ; Don't lose any logging information.
   bidi-paragraph-separate-re "^"
   bidi-paragraph-start-re "^"
   ring-bell-function 'ignore                       ; Turn off the damn bell!
   history-delete-duplicates t                      ; Remove dups from helm-M-x & such.
   history-length 55                                ; Limit history length; see above.
   view-read-only t)                                ; Always open read-only buffers in view-mode

  ;; sane trackpad/mouse scroll settings
  (when IS-MAC
    (setq mac-redisplay-dont-reset-vscroll t
          mac-mouse-wheel-smooth-scroll nil))

  ;; Some IO related settings.
  ;; support reading large blobs of data
  (setq process-adaptive-read-buffering nil
        read-process-output-max (* 2048 2048))

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  (setq fast-but-imprecise-scrolling t)
  (setq-default scroll-conservatively 101)

  ; the jit-* stuff may just be some "cargo culting", we'll see.
  (setq font-lock-support-mode 'jit-lock-mode)
  (setq jit-lock-stealth-time nil)
  (setq jit-lock-defer-time 0.2)
  (setq jit-lock-stealth-nice 0.2)
  (setq jit-lock-stealth-load 100)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we halve startup times, particularly when we use
  ;; fonts that are larger than the system default (which would resize the frame).
  (setq frame-inhibit-implied-resize t)

  ;; Don't popup UI/graphical dialog boxes.
  (setq use-dialog-box nil)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether it has a noteable affect on Linux and Mac hasn't
  ;; been determined, but we inhibit it there anyway.
  (setq inhibit-compacting-font-caches t)

  ;; Remove command line options that aren't relevant to our current OS; means
  ;; slightly less to process at startup.
  (unless IS-MAC   (setq command-line-ns-option-alist nil))
  (unless IS-LINUX (setq command-line-x-option-alist nil))

  ;; Make apropos more useful
  (setq apropos-do-all t)

  ;; Silence advised functions warnings
  (setq ad-redefinition-action 'accept)

  ;; Don't pass over `auto-mode-alist' a second time.
  (setq auto-mode-case-fold nil)

  ;; update the UI less often
  (setq idle-update-delay 1)

  ;; don't ask to kill buffers
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))

  ;; Get rid of "For information about GNU Emacs..." message at startup
  (unless noninteractive
    (advice-add #'display-startup-echo-area-message :override #'ignore)
    (setq inhibit-startup-message t
          inhibit-startup-echo-area-message user-login-name
          inhibit-default-init t
          ;; initial-major-mode 'fundamental-mode
          initial-scratch-message "Welcome to the Church of Emacs, Cardinal deftpunk presiding"
          mode-line-format nil))
  ;; we're in a daemon session, where it'll say "Starting Emacs daemon." instead
  (unless (daemonp)
    (advice-add #'display-startup-echo-area-message :override #'ignore))

  ;; This file stores usernames, passwords, and such.
  (setq auth-sources (list (expand-file-name "authinfo.gpg" deftpunk--etc-dir)
                           "~/.authinfo.gpg"))

  ;; Some timezone stuff for logview.el and others.
  (setenv "TZ" "America/Denver")
  (setq datetime-timezone "America/Denver")

  ;; I find the custom system a nuisance, move it out of the way.  We don't actually
  ;; load it so that any accidental customize stuff stays out.
  (setq custom-file (expand-file-name "custom.el" deftpunk--etc-dir))

  ;; Replace yes/no prompts with y/n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; see https://www.emacswiki.org/emacs/BrowseUrl#h5o-7
  (after! browse-url
    (setq browse-url-browser-function 'browse-url-chrome
          browse-url-chrome-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          browse-url-new-window-flag  t))

  ;; Don't ask if you want to kill a buffer with a live process attached to it:
  (remove-hook 'kill-buffer-query-functions 'process-kill-buffer-query-function)

  (after! simple
          ;; The following may be of interest to people who (a) are happy with
          ;; "C-w" and friends for killing and yanking, (b) use
          ;; "transient-mark-mode", (c) also like the traditional Unix tty
          ;; behaviour that "C-w" deletes a word backwards. It tweaks "C-w" so
          ;; that, if the mark is inactive, it deletes a word backwards instead
          ;; of killing the region. Without that tweak, the C-w would create an
          ;; error text without an active region.
          ;; http://www.emacswiki.org/emacs/DefaultKillingAndYanking#toc2

          (defadvice kill-region (before unix-werase activate compile)
            "When called interactively with no active region, delete a single word backwards
             instead."
            (interactive
             (if mark-active (list (region-beginning) (region-end))
               (list (save-excursion (backward-word 1) (point)) (point))))))

  ;; Deleting past a tab normally changes tab into spaces. Don't do
  ;; that, kill the tab instead.
  (setq backward-delete-char-untabify-method nil)

  ;; Don't type C-u C-SPC C-u C-SPC to pop 2 marks, now you can do C-u C-SPC C-SPC
  (setq set-mark-command-repeat-pop t)

  ;; Revert buffers when the underlying file has changed.
  (global-auto-revert-mode 1)
#+end_src

** Emacs Builtins

#+begin_src emacs-lisp :name emacs-builtins
  ;; Highlight the current line.
  (global-hl-line-mode 1)

  ;; Highlight matching parens, etc.
  (show-paren-mode 1)

  ;; 
  (column-number-mode 1)

#+end_src

*** abbreviations

#+begin_src emacs-lisp :name abbreviations
  (setq save-abbrevs 'silently
        abbrev-file-name (expand-file-name "abbrev_defs" deftpunk--etc-dir))

  ;; Turn abbreviations on globally.
  (setq-default abbrev-mode t)

  ;; Read the abbrev file on startup.
  (quietly-read-abbrev-file)
#+end_src

*** [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmarks]]

https://www.emacswiki.org/emacs/BookmarkPlus#BookmarkBasics

#+begin_src emacs-lisp :name bookmarks
  ;; Control automatically saving the bookmark-list (in memory) to the bookmark-default-file
  ;; (persistent on disk).
  (setq-default bookmark-default-file (expand-file-name "bookmarks" deftpunk--etc-dir)
                bookmark-version-control t
                delete-old-versions t
                bookmark-save-flag 1)
#+end_src

*** Dired

Configure dired to our liking.

#+begin_src emacs-lisp :name dired
  ;; from https://www.reddit.com/r/emacs/comments/u2lf9t/comment/i4n9aoa/?utm_source=share&utm_medium=web2x&context=3
  (defun dired-dim-git-ignores ()
    "Dim out .gitignore contents"
    (when-let ((_ (require 'vc))
               (ignores (vc-default-ignore-completion-table 'git ".gitignore"))
               (exts (make-local-variable 'completion-ignored-extensions)))
      (dolist (item ignores) (add-to-list exts item))))

  (add-hook 'dired-mode-hook #'dired-dim-git-ignores)

  (use-package dired
    :straight (:type built-in)
    :hook (dired-mode . diredfl-mode)
    :bind (:map dired-mode-map
                ("/" . dired-narrow-fuzzy) ; Fuzzy narrowing; clear with `revert-buffer'.
                ;; Reuse the same buffer.
                ("f" . dired-find-alternate-file)
                ("a" . (lambda () (interactive) (find-alternate-file ".."))))
    :init
    (setq dired-dwim-target t            ; Try to guess target directory
          dired-listing-switches "-alh"  ; Human-readable sizes
          dired-recursive-copies 'always ; On `C', recursively copy by default
          dired-omit-files       ; Don't show hidden files in `dired-omit-mode'
          "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\..*$"
          dired-garbage-files-regexp    ; Mark these files for deletion on `%&'
          (rx "." (or "aux" "auxlock" "bbl" "blg" "out" "log" "toc" "fdb_latexmk" "synctex.gz" "fls")
              string-end))
    :config
    (use-package dired-narrow)
    (use-package diredfl)                 ; More colorful output
    (use-package dired-x                  ; Cool Extra functionality
      :straight (:type built-in)
      :demand))

  ;; from https://www.reddit.com/r/emacs/comments/u2lf9t/comment/i4n9aoa/?utm_source=share&utm_medium=web2x&context=3
  (defun dired-dim-git-ignores ()
    "Dim out .gitignore contents"
    (when-let ((_ (require 'vc))
               (ignores (vc-default-ignore-completion-table 'git ".gitignore"))
               (exts (make-local-variable 'completion-ignored-extensions)))
      (dolist (item ignores) (add-to-list exts item))))

  (add-hook 'dired-mode-hook #'dired-dim-git-ignores)

  ;; We want to revert Dired buffers (and others) when they change.
  (setq global-auto-revert-non-file-buffers t)
#+end_src

**** dired-rsync

Combine dired and rsync together.

http://yitang.uk/2022/07/31/mle-copy-files-to-local-machine/

1. On MacOS we have to update =rsync= using brew: =brew install rsync=
2. Set up rsync between 2 servers so that we don't have to use passwords - https://fedingo.com/setup-rsync-between-two-servers-without-password/

#+begin_src emacs-lisp :name dired-rsync
  (use-package dired-rsync
    :demand t
    :after dired
    :bind (:map dired-mode-map ("r" . dired-rsync))
    :config
    (add-to-list 'mode-line-misc-info '(:eval dired-rsync-modeline-status 'append)))
#+end_src

**** [[https://github.com/Fuco1/dired-hacks#dired-subtree][dired-subtree]]

Check the contents of a subdir in dired without opening it in a new buffer or inserting it below.

#+begin_src emacs-lisp :name dired-subtree
  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("TAB" . dired-subtree-toggle)))
#+end_src

*** ediff

#+begin_src emacs-lisp :name ediff
  (use-package ediff
    :hook (ediff-after-quit-hook-internal . winner-undo) ; restore the window configuration.
    :init
    (setq ediff-diff-options "-w"
          ediff-use-long-help-message t
          ediff-split-window-function #'split-window-horizontally
          ediff-window-setup-function #'ediff-setup-windows-plain))
#+end_src

*** [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][eshell]]

A shell-like command interpreter written in Emacs Lisp.

#+begin_src emacs-lisp :name eshell
  (require 'subr-x)
  (defun tuxo/prompt-color-tramp ()
    "Change prompt color if a tramp session is open"
    (if (file-remote-p default-directory)
        (set-face-foreground 'eshell-prompt "red")
      (set-face-foreground 'eshell-prompt "green")))

  (add-hook 'eshell-post-command 'tuxo/prompt-color-tramp)
#+end_src

*** flyspell

[[https://www.emacswiki.org/emacs/FlySpell][Flyspell on Emacswiki]]

#+begin_src emacs-lisp :name flyspell
  ;; from https://stackoverflow.com/questions/22107182/in-emacs-flyspell-mode-how-to-add-new-word-to-dictionary
  (defun my-save-word ()
    "Save the word at point into our personal dictionary."
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

  (setq flyspell-abbrev-p t
        flyspell-use-global-abbrev-table-p t
        flyspell-issue-welcome-flag nil          ; helps make flyspell faster.
        flyspell-issue-message-flag nil          ; helps make flyspell faster.
        ispell-local-dictionary "en_US"
        ispell-program-name "/usr/local/bin/aspell"
        ispell-personal-dictionary (expand-file-name "deftpunk-dictionary" user-emacs-directory)
        ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))

  ;; Flyspell, annoyingly, uses some keys that i happen to like for other uses.
  (general-unbind flyspell-mode-map
    "C-."
    "C-,"
    "C-;")

  ;; Skip flyspell on source blocks in Org mode.
  (add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC"))
#+end_src

**** TODO: Flyspell: Skip other kinds of blocks (quote, example) in Org mode

**** TODO: Flyspell: https://emacs.stackexchange.com/questions/14909/how-to-use-flyspell-to-efficiently-correct-previous-word

*** [[https://www.emacswiki.org/emacs/RecentFiles][recentf]]

#+begin_src emacs-lisp :name recentf
  (setq recentf-max-saved-items 250
        recentf-max-menu-items 15
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files, ie. Tramp files.
        recentf-save-file "~/.emacs.d/etc/recentf-save.el"
        recentf-auto-cleanup 'never
        recentf-exclude (list "/scp:"
                              "/ssh:"
                              "/sudo:"
                              "/tmp/"
                              "~$"
                              "COMMIT_EDITMSG"))
    (recentf-mode +1)
#+end_src

*** [[https://www.emacswiki.org/emacs/SaveHist][savehist]]

If this starts making things slow then I'll just turn it off.

#+begin_src emacs-lisp :name savehist
  (setq savehist-file (expand-file-name "savehist" deftpunk--var-dir)
        history-length 100
        history-delete-duplicates t
        savehist-save-minibuffer-history t
        savehist-additional-variables '(kill-ring
                                        search-ring
                                        mark-ring
                                        global-mark-ring
                                        regexp-search-ring
                                        extended-command-history
                                        regexp-search-ring))
  (savehist-mode 1)

  ;; Found my savehist was HUGE and locking up emacs every 5 min
  (put 'savehist-minibuffer-history-variables 'history-length 50)
  (put 'org-read-date-history                 'history-length 50)
  (put 'read-expression-history               'history-length 50)
  (put 'org-table-formula-history             'history-length 50)
  (put 'extended-command-history              'history-length 50)
  (put 'ido-file-history                      'history-length 50)
  (put 'helm-M-x-input-history                'history-length 50)
  (put 'minibuffer-history                    'history-length 50)
  (put 'ido-buffer-history                    'history-length 50)
  (put 'buffer-name-history                   'history-length 50)
  (put 'file-name-history                     'history-length 50)
#+end_src

*** saveplace

#+begin_src emacs-lisp :name saveplace
  (setq save-place-file (expand-file-name "emacs-places" deftpunk--var-dir)
        save-place-forget-unreadable-files nil  ; Setting to t makes exit slow
        )
  (save-place-mode 1)
  (add-hook 'save-place-find-file-hook 'recenter)
  (add-hook 'find-file-hook 'save-place-find-file-hook t)
#+end_src

*** [[https://www.gnu.org/software/tramp/][Tramp]]

Accessing remote files transparently

#+begin_src emacs-lisp :name Tramp
  (use-package tramp
    :straight nil
    :custom
    (tramp-default-method "ssh")
    :config
    (setq remote-file-name-inhibit-cache nil)
    (setq vc-ignore-dir-regexp
          (format "%s\\|%s"
                  vc-ignore-dir-regexp
                  tramp-file-name-regexp))
    (setq tramp-verbose 1))
#+end_src

*** visual-line-mode

#+begin_src emacs-lisp :name visual-line-mode
  ;; Configure visual representation that we are actually wrapping the line.
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+end_src

*** winner-mode

#+begin_src emacs-lisp :name winner
  ;; Ignore all the *<name>* buffers by regex.
  (setq winner-boring-buffers-regexp "^\\*")
  (winner-mode +1)
#+end_src

** Appearance

*** [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

Make Emacs pretty. Don't forget to run =M-x all-the-icons-install-fonts= if this is a new install.

#+begin_src emacs-lisp :name all_the_icons
(use-package all-the-icons)
#+end_src

**** [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]]

Add some =all-the-icons= to dired.

#+begin_src emacs-lisp :name all-the-icons-dired
  (use-package all-the-icons-dired
    :config
    :hook (dired-mode . (lambda ()
			  (interactive)
			  (unless (file-remote-p default-directory)
			    (all-the-icons-dired-mode)))))
#+end_src

*** [[https://github.com/hlissner/emacs-hide-mode-line][hide-mode-line]]

A minor-mode that masks/hides the modeline for buffers in which a modeline doesn't make sense.

#+begin_src emacs-lisp :name hide-mode-line
    (use-package hide-mode-line
      :hook ((completion-list-mode . hide-mode-line-mode)
             (shell-mode . hide-mode-line-mode)))
#+end_src

*** [[https://github.com/Fanael/highlight-defined][highlight-defined]]

Highlights defined Emacs Lisp symbols in source code.
Currently it recognizes Lisp function, built-in function, macro, faceand variable names.

#+begin_src emacs-lisp :name highlight-defined
(use-package highlight-defined
  :defer t
  :config
  (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode))
#+end_src

*** [[https://github.com/dgutov/highlight-escape-sequences/blob/master/highlight-escape-sequences.el][highlight-escape-sequences]]

Highlight escape sequences with the builtin face.

#+begin_src emacs-lisp :name highlight-escape-sequences
(use-package highlight-escape-sequences
  :defer t
  :commands hes-mode
  :init
  (add-hook 'prog-mode-hook 'hes-mode)
  :config
  (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
  (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face))
#+end_src

*** [[https://github.com/Fanael/highlight-numbers][highlight-numbers]]

Highlight numeric literals in source code.

#+begin_src emacs-lisp :name highlight-numbers
(use-package highlight-numbers
  :defer t
  :commands highlight-numbers-mode
  :init (add-hook 'prog-mode-hook #'highlight-numbers-mode))
#+end_src

*** [[https://github.com/jpkotta/highlight-operators][highlight-operators]]

Highlight operators (like & and ; in C-like modes)

#+begin_src emacs-lisp :name highlight-operators
(use-package highlight-operators
  :ensure t
  :init
  (add-hook 'c-mode-common-hook #'highlight-operators-mode))
#+end_src

*** [[https://github.com/Fanael/highlight-quoted][highlight-quotes]]

Highlight Lisp quotes and quoted symbols

#+begin_src emacs-lisp :name highlight-quotes
(use-package highlight-quoted
  :defer t
  :config
  (add-hook 'emacs-lisp-mode-hook 'highlight-quoted-mode))
#+end_src

*** [[https://github.com/gennad/auto-highlight-symbol][highlight-symbol]]

Highlight all of the visible instances in the buffer of the symbol under point.

#+begin_src emacs-lisp :name highlight-symbol
(use-package auto-highlight-symbol
  :defer t
  :commands auto-highlight-symbol-mode
  :init
  (setq ahs-case-fold-search nil
        ahs-default-range 'ahs-range-whole-buffer
        ahs-idle-interval 0.25
        ahs-inhibit-face-list nil)
  ;; but a box around the face.
  (custom-set-faces `(ahs-face ((t (:box t)))))
  (custom-set-faces `(ahs-definition-face ((t (:box t)))))
  (custom-set-faces `(ahs-plugin-whole-buffer-face ((t (:box t)))))
  :config
  (add-hook 'prog-mode-hook 'auto-highlight-symbol-mode))
#+end_src

*** [[https://github.com/tarsius/hl-todo][hl-todo]]

Highlight TODO and similar keywords in comments and strings.

By default it is only active in modes that derive from prog-mode.  It is a
dependency for =magit-hl-todos= which toggles in =magit-status=.

This package also provides commands for moving to the next or previous keyword,
to invoke occur with a regexp that matches all known keywords, and to insert a keyword.
If you want to use these commands, then you should bind them in hl-todo-mode-map, e.g.:

(define-key hl-todo-mode-map (kbd "C-c p") 'hl-todo-previous)
(define-key hl-todo-mode-map (kbd "C-c n") 'hl-todo-next)
(define-key hl-todo-mode-map (kbd "C-c o") 'hl-todo-occur)
(define-key hl-todo-mode-map (kbd "C-c i") 'hl-todo-insert)

#+begin_src emacs-lisp :name hl-todo
  (use-package hl-todo
    :init
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces '(("TODO" . "#FF0000")
                                  ("FIXME" . "#FF9999")
                                  ("FAIL" . "#FF0000")
                                  ("DEPRECATED" . "#1F39EF")
                                  ("HACK" . "#FF0000")
                                  ("XXX" . "#FF0000")
                                  ("NOTE" . "#1E90FF")))
    :hook (prog-mode . hl-todo-mode))
#+end_src

*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

Make parenthesis' standout no matter your language.

#+begin_src emacs-lisp :name rainbow-delimiters
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** [[https://julien.danjou.info/projects/emacs-packages][rainbow-mode]]

Show hex codes as their actual color.

#+begin_src emacs-lisp :name rainbow-mode
  (use-package rainbow-mode
    :defer t
    :commands rainbow-turn-on
    :init
    (add-hook 'prog-mode-hook 'rainbow-turn-on)
    :config
    (setq rainbow-x-colors nil))
#+end_src

*** [[https://github.com/hlissner/emacs-solaire-mode][Solaire mode]]

An aesthetic to help visually distinguish "real" buffers.

#+begin_src emacs-lisp :name solaire-mode
  (use-package solaire-mode
    :config (solaire-global-mode +1))
#+end_src

*** [[https://github.com/seagle0128/doom-modeline][doom-modeline]]

A really nice and performant modeline broken out of [[https://github.com/hlissner/doom-emacs][doom-emacs]] by its author.

#+begin_src emacs-lisp :name doom_modeline
  ;; So that we don't get ridiculous paths in the modeline.
  (setq find-file-visit-truename t)

  (use-package doom-modeline
    :init
    (setq doom-modeline-minor-modes t
          doom-modeline-env-version t
          doom-modeline-env-load-string "waiting...."
          doom-modeline-buffer-file-name-style 'truncate-upto-project
          doom-modeline-modal-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-major-mode-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-buffer-modification-icon t
          doom-modeline-modal-icon t
          doom-modeline-lsp t
          doom-modeline-vcs-max-length 14
          doom-modeline-gnus nil
          doom-modeline-gnus-timer 0
          doom-modeline-buffer-modification-icon t
          doom-modeline-project-detection 'projectile
          doom-modeline-icon (display-graphic-p)))
    ;;:hook (after-init . doom-modeline-mode))
#+end_src

** Themes

Tue Mar 21 22:06:38 2023
Tried Lambda themes.  didn't like so much.

*** [[https://github.com/doomemacs/themes][Doom themes]]

Because Doom themes are great.

#+begin_src emacs-lisp :name doom-themes
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)

    ;; (doom-themes-visual-bell-config)
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme)
    (doom-themes-treemacs-config))
  ;; Corrects (and improves) org-mode's native fontification.
  ;; (doom-themes-org-config)

  ;; (load-theme 'doom-moonlight t)
  ;; (load-theme 'doom-vibrant :no-confirm)
  ;; (load-theme 'doom-tokyo-night :no-confirm)
#+end_src

*** [[https://github.com/rougier/nano-theme][nano-theme]]

#+begin_src emacs-lisp :name nano-theme
  (use-package nano-theme
    :straight (:host github :repo "rougier/nano-theme")
    ;; :init (setq nano-modeline-position 'bottom
    ;;             nano-modeline-prefix 'icon)
    )
  (load-theme 'nano-light :no-confirm)
#+end_src

*** [[https://github.com/rougier/nano-modeline][nano-modeline]]

#+begin_src emacs-lisp :name nano-modeline
  (use-package nano-modeline
    :hook (after-init . nano-modeline-mode))
#+end_src

*** [[https://github.com/rougier/nano-minibuffer][nano-minibuffer]]

#+begin_src emacs-lisp :name nano-minibuffer
  (use-package nano-minibuffer
    :straight (:host github :repo "rougier/nano-minibuffer")
    :init (setq nano-minibuffer-position 'bottom))
#+end_src

** Completion

*** [[https://company-mode.github.io/][company]]

In buffer completion.

#+begin_src emacs-lisp :name company
  (use-package company
    :commands company-complete-common company-manual-begin company-grab-line
    :ghook ('emacs-startup-hook #'global-company-mode)
    :general
    ([remap completion-at-point] #'company-manual-begin
     [remap complete-symbol] #'company-manual-begin)
    (:keymaps 'company-active-map
              "TAB"      #'company-complete-selection
              "<tab>"    #'company-complete-selection
              "<space>"  #'company-complete-selection
              "C-n"      #'company-select-next-if-tooltip-visible-or-complete-selection
              "C-p"      #'company-select-previous-or-abort
              "C-t"      #'company-select-first
              "C-e"      #'company-select-last
              "<return>" #'company-cancel
              "<ESC>"    #'company-cancel)
    ;(:keymaps 'company-active-map
     ;         :predicate '(company-explicit-action-p)
              ;"<return>" #'company-complete-selection
              ;"RET"      #'company-complete-selection
      ;        "<space>"  #'company-complete-selection
       ;       "<return>"    #'company-cancel)
    (:keymaps 'comint-mode-map
              [remap indent-for-tab-command] #'company-manual-begin)
    :init
    (general-unbind :keymaps 'company-active-map "C-w" "C-h")
    (general-setq company-async-timeout 10
                  company-auto-complete nil
                  company-auto-complete-chars nil
                  company-dabbrev-other-buffers nil
                  company-dabbrev-ignore-case nil
                  company-dabbrev-downcase nil
                  company-idle-delay 0.0
                  company-echo-delay 0.0
                  company-minimum-prefix-length 2
                  company-show-numbers nil
                  company-require-match 'never
                  company-tooltip-limit 20
                  company-tooltip-align-annotations t)
    (general-setq company-frontends '(company-pseudo-tooltip-frontend
                                      company-echo-metadata-frontend))
    (general-setq company-global-modes '(not message-mode
                                             help-mode
                                             gud-mode
                                             vterm-mode
                                             eshell-mode
                                             term-mode))
    (general-setq company-backends '(company-capf company-files company-dabbrev)))

  (defun company-yasnippet-or-completion ()
    (interactive)
    (or (do-yas-expand)
        (company-complete-common)))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "::") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))
#+end_src

**** [[https://github.com/jcs-elpa/company-fuzzy][company-fuzzy]]

#+begin_src emacs-lisp :name company-fuzzy
  (use-package company-fuzzy
    :hook (company-mode . company-fuzzy-mode)
    :init
    (setq company-fuzzy-sorting-backend 'alphabetic))
#+end_src

**** [[https://github.com/tumashu/company-posframe][company-posframe]]

Floating child-frame for Company - helps avoid proportional font problems.

#+begin_src emacs-lisp :name company-posframe
  (use-package company-posframe
    :config
    (company-posframe-mode 1))
#+end_src

*** [[https://emacs-helm.github.io/helm/][Helm]]

Emacs incremental completion and selection narrowing framework

#+begin_src emacs-lisp :name Helm
  (use-package helm
    :commands (helm-mini helm-M-x helm-scroll-other-window)
    :bind (:map helm-map
                ([escape] . helm-keyboard-quit)
                ("C-w" . backward-kill-word))
    :init
    (setq helm-idle-delay                        1.0    ; Update fast sources immediately (doesn't).
          helm-input-idle-delay                  0.01   ; This actually updates things reeeelatively quickly.
          helm-quick-update                      t
          helm-M-x-requires-pattern              nil
          ;; Remove extraineous helm UI elements
          helm-display-header-line nil
          helm-mode-line-string nil
          helm-ff-auto-update-initial-value nil
          helm-find-files-doc-header nil
          ;; Setting this above 100 will slow down fuzzy matching
          helm-candidate-number-limit 65
          helm-autoresize-max-height             45     ; Set the max window height to 45% of current frame.
          helm-mode-fuzzy-match                  t      ; Turn on fuzzy matching for buffers, semantic, recentf
          helm-completion-in-region-fuzzy-match  t      ; Completion, imenu, apropos, M-x
          ;; Ignore checking if file exists on remote files and see Tramp messages in helm
          helm-buffer-skip-remote-checking       t
          helm-tramp-verbose                     6
          ;; When calling `helm-semantic-or-imenu', don't immediately jump to
          ;; symbol at point
          helm-imenu-execute-action-at-once-if-one nil
          ;; With original setting, helm calls constant (and unnecessary)
          ;; forced mode-line updates
          helm-ff-keep-cached-candidates nil
          ;; disable special behavior for left/right, M-left/right keys.
          helm-ff-lynx-style-map nil
          helm-ff-skip-boring-files              t)
    :config
    (load "helm-autoloads" nil t)

    ;; helm is too heavy for find-file-at-point
    :after
    (add-to-list 'helm-completing-read-handlers-alist '(find-file-at-point . nil)))
#+end_src

*** Ivy, Avy, Counsel, Swiper

I use Helm a lot more but Avy & Swiper are better than their Helm equivalents.

We don't install ivy explicitly because it comes along for the ride as a dependency to avy,
swiper & counsel.

**** avy

[[https://github.com/abo-abo/avy][avy]] Jump to things in Emacs tree-style

#+begin_src emacs-lisp :name avy
  (use-package avy
    :defer t
    :config
    (setq avy-all-windows nil
          avy-background t))
#+end_src

**** counsel

A collection of ivy-enhanced versions of common Emacs commands.

#+begin_src emacs-lisp :name counsel
  (use-package counsel
    :delight
    :bind (:map ivy-minibuffer-map
                ([escape] . minibuffer-keyboard-quit))
    :init
    (setq counsel-rg-base-command
          "rg -i -M 120 --no-heading --line-number --color never %s .")
    :config
    (counsel-mode 1))
#+end_src

**** ivy

#+begin_src emacs-lisp :name ivy
  (use-package ivy
    :delight
    :general
    (:keymaps 'ivy-minibuffer-map
	      "C-d" 'delete-forward-char
	      "C-h" 'delete-backward-char
	      "C-w" 'kill-word)
    :config
    ;; Counsel changes a lot of ivy's state at startup; to control for that, we
    ;; need to load it as early as possible. Some packages (like `ivy-prescient')
    ;; require this.
    (require 'counsel nil t)
    (setq ivy-height 17
	  ivy-wrap t
	  ivy-fixed-height-minibuffer t
	  projectile-completion-system 'ivy
	  ;; disable magic slash on non-match
	  ivy-magic-slash-non-match-action nil
	  ;; don't show recent files in switch-buffer
	  ivy-use-virtual-buffers nil
	  ;; ...but if that ever changes, show their full path
	  ivy-virtual-abbreviate 'full
	  ;; don't quit minibuffer on delete-error
	  ivy-on-del-error-function #'ignore
	  ;; enable ability to select prompt (alternative to `ivy-immediate-done')
	  ivy-use-selectable-prompt t)
    (ivy-mode +1))
#+end_src

**** [[https://github.com/abo-abo/swiper][swiper]]

isearch with an overview, and more. Oh, man! https://oremacs.com/swiper/

#+begin_src emacs-lisp :name swiper
  (use-package swiper
    :defer t
    :commands swiper
    :bind (:map ivy-minibuffer-map
                ("C-w" . ivy-backward-kill-word)
                ("C-y" . ivy-yank-word)
                ([escape] . minibuffer-keyboard-quit))
    :init
    (setq ivy-wrap t     ; make ivy-next-line & ivy-previous-line cycle around.
          ivy-height 25  ; make the minibuffer just a little taller.
          ivy-use-virtual-buffers t
          ivy-display-style 'fancy
          ivy-count-format "%d/%d")
    :config
    (ivy-mode 1))

  (defun deftpunk/recenter-swiper ()
    (interactive)
    (swiper)
    (recenter (1- (max 1 scroll-margin))))
#+end_src

*** [[https://github.com/abo-abo/lispy][Lispy]]

All of the features described [[https://github.com/abo-abo/lispy#features][here]]

#+begin_src emacs-lisp :name lispy
  (use-package lispy)
#+end_src

** [[http://orgmode.org/manual/index.html][Org]]

[[https://orgmode.org/manual/Emphasis-and-monospace.html][Emphasis]]
You can make words *bold*, /italic/, _underlined_, =verbatim= and ~code~, and, if you must,
‘+strike-through+’. Text in the code and verbatim string is not processed for Org mode specific syntax,
it is exported verbatim.

Org-Selectors (C-c C-,) -> Templates for src,example,quote,etc. blocks

Possibilities for adding unicode characters:
http://heikkil.github.io/blog/2015/03/22/hydra-for-unicode-input-in-emacs/
http://thewanderingcoder.com/2015/03/emacs-org-mode-styling-non-smart-quotes-zero-width-space-and-tex-input-method/

Markup:
http://ergoemacs.org/emacs/emacs_org_markup.

Consider using https://github.com/alphapapa/org-web-tools

Org mode related investigations:
[[https://github.com/yjwen/org-reveal][org-reveal]] - export to Reveal.js to make Reveal presentations
[[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] - Group items in your agenda
[[https://github.com/jjasghar/alfred-org-capture][alfred-org-capture]] - Use Alfred and org-capture together
[[https://github.com/Fuco1/org-pretty-table][org-pretty-table]] - make the tables look better

*** Org Configuration

#+begin_src emacs-lisp :name org-configuration
  ;; Make Tab in Org mode either insert a header or cycle the header folding.
  (defun config/org--insert-header-if-line-empty ()
    (when (or (bolp) (org-match-line "^[[:blank:]]+$"))
      (org-insert-heading)
      t)) ;; TODO: Add tab to normal mode, enter insert mode after adding the heading.

  (add-hook 'org-tab-after-check-for-cycling-hook
            'config/org--insert-header-if-line-empty)

  ;; Improve org mode looks
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t       ; show italicized text instead of /italicized text/
        org-startup-with-inline-images t
        org-image-actual-width '(300))

  ;; Speed keys for faster navigation.
  (setq org-use-speed-commands t)

  ;; This makes quote/verse blocks show up nicely in modus themes.
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-src-fontify-natively t)

          ;;; Agenda Configuration
  (setq org-agenda-files '("~/MyStuff/hpe.org"))

  ;; custom agenda commands/views
  (setq org-agenda-custom-commands
        '(("%" "Appointments" agenda* "Today's appointments"
           ((org-agenda-span 1)
            (org-agenda-max-entries 5)))))

  ;; "@" means add note to PROPERTY drawer
  ;; "!" means add timestamp to PROPERTY drawer
  (setq org-todo-keywords
        (quote ((sequence "TODO(t!)" "|" "FOLLOWUP(f!)" "INPROGRESS(p!)" "|" "CANCELED(c@/!)" "DONE(d!)" "HOLD(h!)"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" . (:foreground "red" :weight bold))
                ("INPROGRESS" . org-warning)
                ("FOLLOWUP" . (:foreground "orange" :weight bold))
                ("HOLD" . (:foreground "orange" :weight bold))
                ("CANCELED" . (:foreground "blue" :weight bold))
                ("DONE" . (:foreground "green" :weight bold)))))

  ;; log a note when DONE as well as the time.
  ;; can make use of a template through org-log-note-headings
  (setq org-log-done 'note)

  ;; setting the priority.
  (setq org-priority-highest 1
        org-priority-lowest 5
        org-priority-default 0)

  ;; don't put keywords in exports
  (setq-default org-export-with-todo-keywords nil)

  ;; prevent setting headline to DONE if children are not DONE
  (setq-default org-enforce-todo-dependencies t)

  ;; log task state changes in the drawer
  (setq org-log-state-notes-into-drawer t)

    ;;; Capture
  ;; Started using template files to encapsulate the capture format because i couldn't get my
  ;; templates to work otherwise.
  (setq org-capture-templates
        '(("t" "Generic TODO" entry (file+datetree "~/MyStuff/hpe.org" "Journal")
           (file "~/.emacs.d/org-templates/bare_todo.tmpl")
           :empty-lines 1)
          ("a" "Astra Task" entry (file+datetree "~/MyStuff/hpe.org" "Journal")
           (file "~/.emacs.d/org-templates/astra_todo.tmpl")
           :empty-lines 1)
          ("c" "CLP Task" entry (file+datetree "~/MyStuff/hpe.org" "Journal")
           (file "~/.emacs.d/org-templates/clp_todo.tmpl")
           :empty-lines 1)
          ("d" "Completed Task" entry (file+datetree "~/MyStuff/hpe.org" "Journal")
           (file "~/.emacs.d/org-templates/completed_task.tmpl")
           :empty-lines 1)))

  ;; add new notes at the beginning
  (setq org-reverse-note-order t)

    ;;; Keybindings

  ;; Keys for org-mode-map
  (general-define-key
   :keymaps 'org-mode-map
   ;; so that C-j actually is mapped to avy-goto-char-timer
   "C-j" 'nil
   "C-k" 'nil)

  ;; Local leader bindings.
  (deftpunk-local-leader-def
    :keymaps 'org-mode-map
    "c" '(org-todo :which-key "Org Todo + Todo States")
    "e" '(org-edit-special :which-key "Edit blk in special buffer")
    "h" '(helm-org-in-buffer-headings :which-key "Org Headers")
    "i" '(org-insert-link :which-key "Org Insert link")
    "o" '(ace-link-org :which-key "Links in Org mode document")
    "s" '(org-insert-structure-template :which-key "Insert templates")
    "t" '(org-babel-tangle :which-key "Tangle the src blocks")
    "x" '(org-open-at-point :which-key "Open link at point"))
#+end_src

*** [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]]

Automatically tangle your org files if you have =#+auto_tangle: t= in your org file.

The tangle is async.

#+begin_src emacs-lisp :org-auto-tangle
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** [[https://github.com/minad/org-modern][org-modern]]

Implements a "modern" style for Org buffers.

#+begin_src emacs-lisp :name org-modern
  ;; https://github.com/minad/org-modern/issues/106#issuecomment-1344659316
  ;; Fixes issue mentioned above
  (defun disable-point-adjustment (&rest args)
    (setq disable-point-adjustment t))
  (advice-add 'org-beginning-of-line :after #'disable-point-adjustment)

  (use-package org-modern
    :config
    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-ellipsis "…"

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────"))

(setq org-modern-hide-stars nil)

  (global-org-modern-mode)
#+end_src

*** Org src

#+begin_src emacs-lisp :name org-src
  (defun dftpnk-org-src-mode ()
    (smartparens-strict-mode)
    (rainbow-delimiters-mode t))

  (add-hook 'org-src-mode-hook #'dftpnk-org-src-mode)

  (deftpunk-local-leader-def
    :keymaps 'org-src-mode-map
    "k" '(org-edit-src-abort :which-key "Abort src blk edit")
    "e" '(org-edit-src-exit :which-key "Exit src blk edit"))
#+end_src

*** [[https://github.com/emacs-helm/helm-org][helm-org]]

Helm for org headlines and keywords completion.

#+begin_src emacs-lisp :name helm-org
  (use-package helm-org
    :defer t
    :commands (helm-org-in-buffer-headings helm-org-capture-templates))
#+end_src

*** COMMENT [[https://github.com/abo-abo/org-download][org-download]]

Facilitate moving images from point A to point B - images to/from orgmode files.

I use this when i capture images in OSX that I then paste into an Org file using =org-download-clipboard=


#+begin_src emacs-lisp :name org-download
  (use-package org-download
    :after org
    :hook (dired-mode . org-download-enable)
    :init
    (setq org-download-heading-level nil
          org-download-timestamp "org_image_%Y%m%d-%H%M%S_"
          org-download-image-dir "~/MyStuff/OrgAssets/pictures"
          org-image-actual-width 300
          org-download-screenshot-method "/opt/homebrew/bin/pngpaste %s")
    :config
    (require 'org-download))

#+end_src

*** [[https://github.com/awth13/org-appear][org-appear]]

Since we hide the emphasis markers in Org mode, this makes them show up when the cursor is on the
emphasized word.

#+begin_src emacs-lisp :name org-appear
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
#+end_src

*** [[https://www.orgroam.com/manual.html][Org roam]]

#+begin_src emacs-lisp :name org-roam
  (use-package org-roam
    :init
    (setq org-roam-directory "~/MyStuff/DeftpunkRoamNotes"
          org-roam-v2-ack t)
    :bind
    (("C-c n a" . org-roam-alias-add)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n l" . org-roam-buffer-toggle)
     ("C-c n o" . org-id-get-create)
     ("C-c n t" . org-roam-tag-add))
    :config
    (org-roam-setup))
#+end_src

**** [[https://github.com/jgru/consult-org-roam][consult-org-roam]]

Use [[https://github.com/minad/consult][consult]] to search/find org-roam files.

#+begin_src emacs-lisp :name consult-org-roam
  (use-package consult-org-roam
    :after org-roam
    :init
    (require 'consult-org-roam)
    (consult-org-roam-mode 1)
    (setq consult-org-roam-grep-func #'consult-ripgrep
          consult-org-roam-buffer-narrow-key ?r
          consult-org-roam-buffer-after-buffers t)
    (("C-c n e" . consult-org-roam-file-find)
     ("C-c n b" . consult-org-roam-backlinks)
     ("C-c n l" . consult-org-roam-forward-links)
     ("C-c n r" . consult-org-roam-search)))
#+end_src

**** [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]

A graphical frontend for your org-roam Zettelkasten

#+begin_src emacs-lisp :name org-roam-ui
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

*** ox-clip

Clipping/Copying images into and out of Org mode.  This is cross-platform.

Offers two functions:
    - ox-clip-formatted-copy
    - ox-clip-image-to-clipboard

#+begin_src emacs-lisp :name ox-clip
  (use-package ox-clip
    :after org
    :config
    (setq org-hugo-front-matter-format "yaml"))
#+end_src

** Emacs Enhancements

*** [[https://github.com/abo-abo/ace-window][ace-window]]

Selecting a window/frame to switch to

#+begin_src emacs-lisp :name ace-window
  (use-package ace-window
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-leading-char-style 'path
          aw-background t
          aw-dispatch-always t)
    :config
    (set-face-attribute 'aw-leading-char-face nil :height 4.0))
#+end_src

*** [[https://github.com/abo-abo/ace-link][ace-link]]

Select a link to jump to in Info, help, woman, org or eww modes

#+begin_src emacs-lisp :name ace-link
   (use-package ace-link
     :init (ace-link-setup-default))
#+end_src

*** [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent]]

Automatically indent as you type; i have only enabled it for "Lisp" like languages currently.

#+begin_src emacs-lisp :name aggressive-indent
  (use-package aggressive-indent
    :hook ((emacs-lisp-mode
            inferior-emacs-lisp-mode
            ielm-mode
            lisp-mode
            inferior-lisp-mode
            isp-interaction-mode
            clojure-mode
            slime-repl-mode) . aggressive-indent-mode))
#+end_src

*** [[https://www.emacswiki.org/emacs/BookmarkPlus][bookmarks-plus]]

#+begin_src emacs-lisp :name bookmarks-plus
  (use-package bookmarks+
    :straight (bookmark+ :type git :host github :repo "emacsmirror/bookmark-plus")
    :config
    (setq bookmark-version-control t
          bookmark-use-annotations nil
          bookmark-automatically-show-annotations t
          delete-old-versions t))
#+end_src

*** [[https://github.com/jguenther/discover-my-major][Discover-My-Major]]

Discover bindings for the current major mode.

#+begin_src emacs-lisp :name discover-my-major
(use-package discover-my-major
  :general
  ("C-h C-m" #'discover-my-major))
#+end_src

*** [[https://github.com/davidshepherd7/electric-operator][electric-operator]]

Automatically add spaces around operators.

#+begin_src emacs-lisp :name electric-operator
  (use-package electric-operator
    :hook ((python-mode rustic-mode sql-mode) . electric-operator-mode))
#+end_src

*** [[https://gitlab.com/koral/gcmh/][GCMH]]

The GNU Emacs Garbage Collector Magic Hack

#+begin_src emacs-lisp :name gcmh
  (use-package gcmh
    :blackout t
    :commands gcmh-idle-garbage-collect
    :init
    (setq gcmh-idle-delay 10))

  (add-hook 'focus-out-hook #'gcmh-idle-garbage-collect)
  (add-hook 'suspend-hook #'gcmh-idle-garbage-collect)
#+end_src

*** [[https://github.com/dash-docs-el/helm-dash][helm-dash]]

View Dash docsets inside of Emacs - this is very handy in conjunction with helm-bookmarks & bookmarks+

#+begin_src emacs-lisp :name helm-dash
  (use-package helm-dash
    :hook
    (clojure-mode . (lambda () (setq-local dash-docs-docsets '("Clojure"))))
    (emacs-lisp-mode . (lambda () (setq-local dash-docs-docsets '("Emacs_lisp"))))
    (python-mode . (lambda () (setq-local dash-docs-docsets '("Python_3"))))
    (rust-mode . (lambda () (setq-local dash-docs-docsets '("Rust")))))
#+end_src

*** Help

**** [[http://www.emacswiki.org/emacs/HelpPlus][HelpPlus]]

Some extended *Help* functions

~describe-keymap~ Human readable description of any keymap
~describe-command~
~describe-file~
~describe-buffer~

#+begin_src emacs-lisp :name help+
  ;; (use-package help-fns
  ;;   :straight (help-fns.el :type git :host github :repo "emacsmirror/help-fns"))
  ;;
  ;; (use-package help-fns-plus
  ;;   :straight (help-fns-plus :type git :host github :repo "emacsmirror/help-fns-plus"))
  ;;
  ;; (use-package help-plus
  ;;   :straight (help-plus :type git :host github :repo "emacsmirror/help-plus"))
#+end_src

**** [[https://github.com/Wilfred/helpful][Helpful]]

Provide more contextual information in Emacs help

#+begin_src emacs-lisp :name helpful
  (use-package helpful
    :general
    ([remap describe-function] #'helpful-callable
     [remap describe-command]  #'helpful-command
     [remap describe-variable] #'helpful-variable
     [remap display-local-help] #'helpful-at-point
     [remap describe-symbol]   #'helpful-symbol
     [remap describe-key]      #'helpful-key
     "C-h x"                   #'helpful-macro))
#+end_src

*** [[https://github.com/DarthFennec/highlight-indent-guides/][highlight-indent-guides]]

Having a discrete indication of the indentation is useful for Python.

#+begin_src emacs-lisp :name highlight-indent-guides
(use-package highlight-indent-guides
  :hook (python-mode . highlight-indent-guides-mode)
  :custom (highlight-indent-guides-method 'character))
#+end_src

*** [[https://github.com/emacsorphanage/osx-trash][osx-trash]]

Make =delete-by-moving-to-trash= do what we expect on MacOSX. Don't forget to =brew install trash= for better performance.

#+begin_src emacs-lisp :name osx-trash
  (use-package osx-trash
    :config
    (when (eq system-type 'darwin)
      (osx-trash-setup))
    (setq delete-by-moving-to-trash t))
#+end_src

*** [[https://github.com/bbatsov/projectile][projectile]]

Project management for Emacs

#+begin_src emacs-lisp :name projectile
  (use-package projectile
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map))
    :init
    (setq
     ;; Auto-discovery is slow to do by default. Better to update the list
     ;; when you need to (`projectile-discover-projects-in-search-path').
     projectile-completion-system 'default
     projectile-auto-discover t
     projectile-enable-caching t
     projectile-globally-ignored-files '(".DS_Store" "TAGS")
     projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o")
     projectile-kill-buffers-filter 'kill-only-files
     projectile-ignored-projects '("~/" "/tmp"))

    (setq projectile-cache-file (expand-file-name "projectile.cache" deftpunk--var-dir)
          projectile-known-projects-file (expand-file-name "projectile-known-projects.eld"
                                                           deftpunk--var-dir))
    ;; Do not include the straight repos
    (setq projectile-ignored-project-function
          (lambda (project-root)
            (string-prefix-p (expand-file-name "straight/" user-emacs-directory) project-root)))

    (global-set-key [remap find-tag]         #'projectile-find-tag)

    (projectile-mode +1))
#+end_src

**** [[https://github.com/bbatsov/helm-projectile][helm-projectile]]

Using Helm with projectile.
[[http://tuhdo.github.io/helm-projectile.html][Using Helm and Projectile to explore large projects]]

#+begin_src emacs-lisp :name helm-projectile
  (use-package helm-projectile
    :after helm
    (helm-projectile-on))
#+end_src

*** [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]

Restart Emacs from within Emacs.

#+begin_src emacs-lisp :name restart-emacs
  (use-package restart-emacs
    :bind
    ("C-c x r" . restart-emacs))
#+end_src

*** [[https://github.com/hrehfeld/emacs-smart-hungry-delete][smart-hungry-delete]]

Delete whitespace between words, parenthesis and other delimiters in a smart (dumb) way.

#+begin_src emacs-lisp :name smart-hungry-delete
  (use-package smart-hungry-delete
    :bind (:map prog-mode-map
           ("<backspace>" .
            smart-hungry-delete-backward-char)
           ("C-d" .
            smart-hungry-delete-forward-char))
    :hook ((prog-mode .
            smart-hungry-delete-default-prog-mode-hook)
           (c-mode-common .
            smart-hungry-delete-default-c-mode-common-hook)
           (python-mode .
            smart-hungry-delete-default-c-mode-common-hook)
           (text-mode .
            smart-hungry-delete-default-text-mode-hook)))
#+end_src

*** [[https://github.com/Fuco1/smartparens][smartparens]]

Keep my pairs clean-ish.

https://ebzzry.com/en/emacs-pairs/ - comprehensive article about smartparens and bindings.

#+begin_src emacs-lisp :name smartparens
  (use-package smartparens
    :commands (sp-local-pair)
    :config
    ;; smartparens doesn't recognize the sly-mrepl-mode
    (add-to-list 'sp-lisp-modes 'sly-mrepl-mode)

    ;; load the default smartparens rules for various languages.
    (require 'smartparens-config)

    ;; Overlays are too distracting and not terribly helpful. show-parens does
    ;; this for us already (and is faster), so...
    (setq sp-highlight-pair-overlay nil
          sp-highlight-wrap-overlay nil
          sp-highlight-wrap-tag-overlay nil)

    ;; The default is 100, because smartparen's scans are relatively expensive
    ;; (especially with large pair lists for some modes), we reduce it, as a
    ;; better compromise between performance and accuracy.
    (setq sp-max-prefix-length 25)
    ;; No pair has any business being longer than 4 characters; if they must, set
    ;; it buffer-locally. It's less work for smartparens.
    (setq sp-max-pair-length 4)
    ;; This isn't always smart enough to determine when we're in a string or not.
    ;; See https://github.com/Fuco1/smartparens/issues/783.
    (setq sp-escape-quotes-after-insert nil)

    ;; Silence some harmless but annoying echo-area spam
    (dolist (key '(:unmatched-expression :no-matching-tag))
      (setf (alist-get key sp-message-alist) nil))

    ;; You're likely writing lisp in the minibuffer, therefore, disable these
    ;; quote pairs, which lisps doesn't use for strings:
    (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
    (sp-local-pair 'minibuffer-inactive-mode "`" nil :actions nil))

  (add-hook 'prog-mode #'smartparens-strict-mode)
  (add-hook 'lisp-interaction-mode #'smartparens-strict-mode)
#+end_src

*** [[https://github.com/hlissner/emacs-so-long][so-long]]

Make dealing with long lines alot more sane - use hlissner's fork.

#+begin_src emacs-lisp :name so-long
  (use-package so-long
    :straight (so-long :type git :host github :repo "hlissner/emacs-so-long")
    :config
    ; reduce false positives w/ a larger threshold
    (setq so-long-threshold 400)

    ;;; More cool Doom stuff

    ;; Don't disable syntax highlighting and line numbers, or make the buffer
    ;; read-only, in `so-long-minor-mode', so we can have a basic editing
    ;; experience in them, at least. It will remain off in `so-long-mode',
    ;; however, because long files have a far bigger impact on Emacs performance.
    (delq! 'font-lock-mode so-long-minor-modes)
    (delq! 'display-line-numbers-mode so-long-minor-modes)
    (delq! 'buffer-read-only so-long-variable-overrides 'assq)
    ;; ...but at least reduce the level of syntax highlighting
    (add-to-list 'so-long-variable-overrides '(font-lock-maximum-decoration . 1))
    ;; ...and insist that save-place not operate in large/long files
    (add-to-list 'so-long-variable-overrides '(save-place-alist . nil))
    ;; Text files could possibly be too long too
    (add-to-list 'so-long-target-modes 'text-mode)

    ;; But disable everything else that may be unnecessary/expensive for large or
    ;; wide buffers.
    (appendq! so-long-minor-modes
              '(flycheck-mode
                flyspell-mode
                spell-fu-mode
                eldoc-mode
                smartparens-mode
                highlight-numbers-mode
                better-jumper-local-mode
                ws-butler-mode
                auto-composition-mode
                highlight-indent-guides-mode
                hl-fill-column-mode))
    (defun doom-buffer-has-long-lines-p ()
      ;; HACK Fix #2183: `so-long-detected-long-line-p' tries to parse comment
      ;;      syntax, but in some buffers comment state isn't initialized, leading
      ;;      to a wrong-type-argument: stringp error.
      (unless (bound-and-true-p visual-line-mode)
        (let ((so-long-skip-leading-comments
               (bound-and-true-p comment-use-syntax)))
          (so-long-detected-long-line-p))))
    (setq so-long-predicate #'doom-buffer-has-long-lines-p))
#+end_src

*** [[https://github.com/akicho8/string-inflection][string-inflection]]

Case conversion, e.g. underscore -> UPCASE -> CamelCase

#+begin_src emacs-lisp :name string-inflection
  (use-package string-inflection
    :config
    (defun my-string-inflection-cycle ()
      "switching by major mode"
      (interactive)
      (cond
       ((eq major-mode 'emacs-lisp-mode)
        (string-inflection-all-cycle))
       ((eq major-mode 'python-mode)
        (string-inflection-python-style-cycle))
       (t
        (string-inflection-python-style-cycle))))
    
    (global-set-key (kbd "C-q C-u") 'my-string-inflection-cycle))
#+end_src

*** [[https://github.com/bbatsov/super-save][super-save]]

Auto-saving buffers.

#+begin_src emacs-lisp :name super-save
  (setq auto-save-default nil)
  (use-package super-save
    :blackout t
    :init
    (setq super-save-remote-files nil
          super-save-auto-save-when-idle t
          super-save-exclude '(".gpg"))
    :config
    (add-to-list 'super-save-triggers 'ace-window)
    (add-to-list 'super-save-hook-triggers 'find-file-hook))
  (super-save-mode +1)
#+end_src

*** treemacs

#+begin_src emacs-lisp :name treemacs
  (use-package treemacs
    :custom (treemacs-project-follow-cleanup t))
#+end_src

*** [[https://gitlab.com/ideasman42/emacs-undo-fu][undo-fu]] & undo-fu-session

#+begin_src emacs-lisp :name undo-fu
    (use-package undo-fu
      :bind (:map global-map
                  ("C-/" . 'undo-fu-only-undo)))
#+end_src

*** [[https://elpa.gnu.org/packages/windresize.html][windresize]]

Resize the current window interactively using the arrow keys.

#+begin_src emacs-lisp :name windresize
  (use-package windresize)
#+end_src

*** [[https://github.com/lewang/ws-butler][ws-butler]]

Unobtrusively trim spaces from the end of a line.

#+begin_src emacs-lisp :name ws-butler
  (use-package ws-butler
    :straight (ws-butler :type git :host github :repo "hlissner/ws-butler")
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode))
    :custom
    (ws-butler-keep-whitespace-before-point nil))
#+end_src

*** [[https://github.com/joaotavora/yasnippet][yasnippet]] and [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]

All of our snippet needs - the yasnippet [[http://joaotavora.github.io/yasnippet/][manual]].

Writing snippets: [[https://joaotavora.github.io/yasnippet/snippet-development.html][snippet-development]]

View available snippets for give mode: ~ya-visit-snippet-file~
Show list of available snippets & their trigger words: ~ya-describe-tables~
Reload all snippets: ~ya-reload-all~

#+begin_src emacs-lisp :name yasnippet
  (defvar +deftpunk-snippets-dir (expand-file-name "snippets/" deftpunk--emacs-dir))

  (use-package yasnippet-snippets)

  (use-package yasnippet
    :defer t
    :init
    ;; Remove default ~/.emacs.d/snippets
    (defvar yas-snippet-dirs nil)

    :config
    (setq yas-verbosity 3)

    ;; Ensure the snippet is properly indented
    (setq yas-also-auto-indent-first-line t)

    ;; Allow private snippets.
    (add-to-list 'yas-snippet-dirs (expand-file-name "snippets" user-emacs-directory))

    ;; TODO: When we have the above minor-mode-on stuff worked out, remove this.
    (yas-global-mode 1))
#+end_src

** Elfeed

    b: Open the article in the browser
    G: Fetch feed updates from the servers
    s: Update the search filter
    c: Clear the search filter
    r Mark the entry as read
    u: Mark the entry as unread
    g: Refresh view of the feed listing (remove unread items)
    q: Quit the browser

#+begin_src emacs-lisp :name elfeed
  (use-package elfeed
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-x w" . elfeed ))
#+end_src

*** [[https://github.com/remyhonig/elfeed-org][elfeed-org]]

Store your elfeed RSS sites in an Org file.

#+begin_src emacs-lisp :name elfeed-org
  (use-package elfeed-org
    :init
    (setq rmh-elfeed-org-files (list (expand-file-name deftpunk--etc-dir "elfeed.org"))))
      (elfeed-org)
#+end_src

** Source Control

In an ideal world only git would exist

*** [[https://github.com/syohex/emacs-git-gutter][git-gutter]] & [[https://github.com/emacsorphanage/git-gutter-fringe][git-gutter-fringe]]

Highlighting uncommited changes in the buffer.

#+begin_src emacs-lisp :name git-gutter
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :init
    (setq git-gutter:update-interval 0.1     ; update as frequently as possible
          git-gutter:hide-gutter t           ; hide git-gutter if there are no changes
          git-gutter:verbosity 0             ; make git-gutter quiet
          git-gutter:handled-backends '(git) ; we only use git
          git-gutter:lighter " GG"           ; use GG in the modeline
          )

    ;; Disable in some modes - comment from Doom Emacs:
    ;; Disable in Org mode, as per syl20bnr/spacemacs#10555 and
    ;; syohex/emacs-git-gutter#24. Apparently, the mode-enabling function for
    ;; global minor modes gets called for new buffers while they are still in
    ;; `fundamental-mode', before a major mode has been assigned. I don't know why
    ;; this is the case, but adding `fundamental-mode' here fixes the issue.
    (setq git-gutter:disabled-modes '(fundamental-mode image-mode pdf-view-mode))

    ;; Update on more events.
    (add-hook 'git-gutter:update-hooks 'magit-after-revert-hook)
    (add-hook 'git-gutter:update-hooks 'magit-not-reverted-hook)
    (add-hook 'git-gutter:update-hooks 'vc-checkin-hook)
    (add-hook 'git-gutter:update-hooks 'focus-in-hook)
    (add-hook 'git-gutter:update-hooks 'auto-revert-mode-hook)
    (add-hook 'git-gutter:update-hooks 'after-revert-hook)

    :config
    (setq git-gutter:handled-backends '(git)))


  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

  (global-git-gutter-mode)
  (require 'git-gutter-fringe nil t)
#+end_src

*** [[https://magit.vc/][Magit]]

The absolutely best git porcelain on Planet Earth.

Some more informational links:
https://emacsair.me/2017/09/01/magit-walk-through/
https://emacsair.me/2017/09/01/the-magical-git-interface/

#+begin_src emacs-lisp :name magit
  (use-package magit
    :defer t
    :general
    (:prefix "C-x"
             "g" 'magit-status)
    :init
    (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
    (if IS-MAC
        (setq magit-git-executable "/opt/homebrew/bin/git")
      (setq magit-git-executable "/usr/local/bin/git"))
    :config
    (setq  magit-log-arguments '("--graph" "--decorate" "--color")
           magit-save-repository-buffers 'dontask
           magit-revert-buffers 'silent)

    (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
          magit-diff-refine-hunk t ; show granular diffs in selected hunk
          ;; Don't autosave repo buffers. This is too magical, and saving can
          ;; trigger a bunch of unwanted side-effects, like save hooks and
          ;; formatters. Trust us to know what we're doing.
          magit-save-repository-buffers nil))
#+end_src

**** [[https://magit.vc/manual/magit/Commit-Mode-and-Hooks.html][git-commit-mode]]

Setting up some usefull things for git-commit mode that magit uses during commit.

#+begin_src emacs-lisp :name git-commit-mode
(use-package git-commit
  :hook ((git-commit-mode . flyspell-mode)
         (git-commit-mode . git-commit-save-message)
         (git-commit-mode . turn-on-auto-fill)))
#+end_src

*** [[https://github.com/alphapapa/magit-todos][magit-todos]]

Show TODOs in Magit status buffer for each source file.

#+begin_src emacs-lisp :name magit-todos
  (use-package magit-todos
    :custom
    (magit-todos-exclude-globs '(".git" ".svn"))
    (magit-todos-submodule-list nil)
    (magit-todos-keywords '("TODO:" "FIXME:"))
    :hook
    (magit-status-mode . magit-todos-mode))
#+end_src

*** [[https://github.com/magit/git-modes][git-modes]]

Major modes for various Git config files, .gitattributes, .gitignore, etc.

#+begin_src emacs-lisp :name git-modes
(use-package git-modes
  :config
  ;; This works for .dockerignore and other .*ignore files as well.
  (dolist (pattern '("/.dockeringnore\\'"))
    (add-to-list 'auto-mode-alist (cons pattern #'gitignore-mode))))
#+end_src

*** [[https://github.com/emacsorphanage/git-messenger][git-messenger]]

Popup the commit message at the current line.

#+begin_src emacs-lisp :name git-messenger
(use-package git-messenger
  :init
  (setq git-messenger:show-detail t
	git-messenger:use-magit-popup t
	git-messenger:handled-backends '(git))
  :config
  (define-key git-messenger-map (kbd "m") 'git-messenger:copy-message)
  (define-key git-messenger-map (kbd "ESC") 'git-messenger:popup-close))
#+end_src

*** [[https://gitlab.com/pidu/git-timemachine][git-timemachine]]

Step through historic versions of a git controlled file.

Visit a git-controlled file and issue M-x git-timemachine (or bind it to a keybinding of your
choice). If you just need to toggle the time machine you can use M-x git-timemachine-toggle.

Use the following keys to navigate historic version of the file

p Visit previous historic version
n Visit next historic version
w Copy the abbreviated hash of the current historic version
W Copy the full hash of the current historic version
g Goto nth revision
t Goto revision by selected commit message
q Exit the time machine.
b Run magit-blame on the currently visited revision (if magit available).
c Show current commit using magit (if magit available).

#+begin_src emacs-lisp :name git-timemachine
  (use-package git-timemachine
    :config
    (setq git-timemachine-abbreviation-length 14
          git-timemachine-show-minibuffer-details t))

  ;; TODO: Make this cribbing from DOOM Emacs work properly.
  ;; (require 'magit-blame)
  ;; ;; Sometimes I forget `git-timemachine' is enabled in a buffer, so instead of
  ;; ;; showing revision details in the minibuffer, show them in
  ;; ;; `header-line-format', which has better visibility.
  ;; (setq git-timemachine-show-minibuffer-details nil)
  ;; (add-hook 'git-timemachine-mode-hook #'+vcs|init-header-line)
  ;; (advice-add #'git-timemachine-show-revision :after #'+vcs*update-header-line)

  ;; From redguardtoo - http://blog.binchen.org/posts/new-git-timemachine-ui-based-on-ivy-mode.html
  (defun my-git-timemachine-show-selected-revision ()
    "Show last (current) revision of file."
    (interactive)
    (let (collection)
      (setq collection
            (mapcar (lambda (rev)
                      ;; re-shape list for the ivy-read
                      (cons (concat (substring (nth 0 rev) 0 7) "|" (nth 5 rev) "|" (nth 6 rev)) rev))
                    (git-timemachine--revisions)))
      (ivy-read "commits:"
                collection
                :action (lambda (rev)
                          (git-timemachine-show-revision rev)))))

  (defun my-git-timemachine ()
    "Open git snapshot with the selected version.  Based on ivy-mode."
    (interactive)
    (unless (featurep 'git-timemachine)
      (require 'git-timemachine))
    (git-timemachine--start #'my-git-timemachine-show-selected-revision))
#+end_src

**** [[https://github.com/torgeir/helm-hunks.el][helm-hunks]]

A helm interface for browsing, staging, unstaging & killing git hunks.

#+begin_src emacs-lisp :name helm-hunks
  (use-package helm-hunks
    :commands (helm-hunks
               helm-hunks-current-buffer
               helm-hunks-staged
               helm-hunks-staged-current-buffer))
#+end_src

** Software Development

*** General Functionality

**** Comments: auto-fill & spellcheck

#+begin_src emacs-lisp :name comments
  (defun emacswiki/comment-auto-fill ()
    " Set up auto-file / wrapping of comments."
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  ;; Spellchecking in comments.
  (add-hook 'prog-mode-hook #'flyspell-prog-mode)

  ;; Wrap comments.
  (add-hook 'prog-mode-hook #'emacswiki/comment-auto-fill)
#+end_src

**** fill-column-indicator

#+begin_src emacs-lisp :name fill-column-indicator
  ;; Show fill column indicator in programming modes.
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+end_src

**** Make executeable

Make a buffer executable automatically if its a script

#+begin_src emacs-lisp :name make-executeable
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+end_src

*** [[http://www.flycheck.org/en/latest/][flycheck]]

On the fly syntax checking

#+begin_src emacs-lisp :name flycheck
  (use-package flycheck
    :commands flycheck-list-errors flycheck-buffer
    :bind (:map flycheck-error-list-mode-map
                ("C-n" . flycheck-error-list-next-error)
                ("C-p" . flycheck-error-list-previous-error)
                ("RET" . flycheck-error-list-goto-error)
                ([return] . flycheck-error-list-goto-error))
    :init
    ;; I want these checkers permanently disabled.
    ;; The emacs-lisp checker is particularly annoying.
    (setq flycheck-disabled-checkers '(tex-chktex emacs-lisp emacs-lisp-checkdoc))

    ;; Use the `load-path' of the current Emacs session during syntax checking.
    (setq flycheck-emacs-lisp-load-path 'inherit)

    ;; I want `next-error', `previous-error' and `first-error' to just navigate errors from
    ;; compilation modes.
    (setq flycheck-standard-error-navigation nil)

    ;; Check only when saving or opening files.
    (setq flycheck-check-syntax-automatically '(save mode-enabled idle-buffer-switch))

    ;; Rerunning checks on every newline is a mote excessive.
    (delq 'new-line flycheck-check-syntax-automatically)
    ;; And don't recheck on idle as often
    (setq flycheck-idle-change-delay 1.0)

    ;; For the above functionality, check syntax in a buffer that you switched to
    ;; only briefly. This allows "refreshing" the syntax check state for several
    ;; buffers quickly after e.g. changing a config file.
    (setq flycheck-buffer-switch-check-intermediate-buffers t)

    ;; Display errors a little quicker (default is 0.9s)
    (setq flycheck-display-errors-delay 0.25)

    ;; Initialize packages in the Emacs Lisp syntax checker.
    (setq flycheck-lisp-initialize-packages t)

    :config
    ;; This does NOT enable flycheck on TRAMP or encrypted files.
    (global-flycheck-mode +1))

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                (display-buffer-reuse-window
                 display-buffer-in-side-window)
                (side            . bottom)
                (reusable-frames . visible)
                (window-height   . 0.33)))
#+end_src

*** [[https://github.com/yasuyk/helm-flycheck][helm-flycheck]]

Show flycheck errors with helm.

#+begin_src emacs-lisp :name helm-flycheck
  (use-package helm-flycheck
    :after flycheck
    :bind (:map flycheck-mode-map
                ("C-c ! h" . helm-flycheck)))
#+end_src

*** [[https://github.com/abo-abo/lispy][lispy]] & lispyville


*** lsp-mode

Lsp client for Emacs

#+begin_src emacs-lisp :name lsp-mode
  (use-package lsp-mode
    :commands lsp
    :hook (((c-mode              ; clangd
             c++-mode            ; clangd
             c-or-c++-mode       ; clangd
             rust-mode           ; rust-analyzer
             python-mode         ; pyright
             clojure-mode
             ) . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-log-io nil
          lsp-restart 'auto-restart
          lsp-enable-imenu nil
          lsp-eldoc-render-all t
          lsp-eldoc-hook nil
          lsp-enable-snippet nil
          lsp-enable-folding nil
          lsp-enable-indentation nil           ; we want cider and others to handle the indentation.
          lsp-modeline-code-actions-enable nil
          lsp-modeline-diagnostics-enable nil
          lsp-eldoc-enable-hover t
          lsp-lens-enable t
          lsp-idle-delay 0.5
          )

    ;; Rust
    (setq lsp-rust-analyzer-cargo-watch-command "clippy"
          ;; enable / disable the hints as you prefer:
          lsp-rust-analyzer-server-display-inlay-hints t
          lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial"
          lsp-rust-analyzer-display-chaining-hints t
          lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil
          lsp-rust-analyzer-display-closure-return-type-hints t
          lsp-rust-analyzer-display-parameter-hints nil
          lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+end_src

- =lsp-ui-doc-focus-frame= to enter the documentation frame to navigate and search around
- =lsp-ui-doc-unfocus-frame= to leave documentation frame

#+begin_src emacs-lisp :name lsp-ui
  (use-package lsp-ui
    :commands lsp-ui-mode
    :init
    (setq lsp-ui-doc-enable nil
          lsp-ui-doc-header t
          lsp-ui-peek-always-show t
          lsp-ui-sideline-show-hover t
          lsp-ui-doc-include-signature t
          lsp-ui-doc-border (face-foreground 'default)
          lsp-ui-doc-position 'bottom
          lsp-ui-doc-show-with-cursor nil
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-delay 0.05))
#+end_src

**** [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]]

Integrates Ivy with lsp-mode.

NOTE: There is also [[https://github.com/emacs-lsp/helm-lsp][helm-lsp]] which I need to investigate.

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp :name lsp-ivy
  (use-package lsp-ivy
    :after lsp-mode)
#+end_src

**** [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]]

Provides an even nicer UI on top of lsp-mode using Treemacs

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

#+begin_src emacs-lisp :name lsp-treemacs
  (use-package lsp-treemacs
    :after (treemacs lsp-mode)
    :config
    (lsp-treemacs-sync-mode 1))
#+end_src


** Clojure

*** [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]]

Provides major mode for Clojure(Script)

#+begin_src emacs-lisp :name clojure-mode
  (use-package clojure-mode
    :defer t
    :init
    (setq clojure-indent-style 'always-align)
    :hook ((clojure-mode . subword-mode)
           (clojure-mode . aggressive-indent-mode)
           (clojure-mode . smartparens-strict-mode))
    :config
    (defun +clojure-ns-kill-ring-save ()
      "Save the current clojure ns to the kill ring."
      (interactive)
      (let ((ns (funcall clojure-expected-ns-function)))
        (kill-new ns)
        (message (format "Saved to kill-ring: %s" ns)))))

  (deftpunk-local-leader-def
    :keymaps 'clojure-mode-map
    "j" '(cider-jack-in :which-key "Jack into a Cider REPL")
    "eb" '(cider-load-buffer :which-key "Load the buffer")
    "n" '(cider-repl-set-ns :which-key "Set the namespace for the REPL"))
#+end_src

*** cider

#+begin_src emacs-lisp :name cider
  (use-package cider
    :after clojure-mode
    :general
    (:keymaps 'cider-repl-mode-map
              "RET" #'cider-repl-newline-and-indent
              "C-<return>" #'cider-repl-return)
    :hook (cider-repl-mode . (lambda ()
                               (interactive)
                               (setq scroll-conservatively 101)
                               (smartparens-strict-mode t)))
    :init
    (defun deftpunk/cider-repl-prompt (namesapce)
      "Return a prompt string that mentions the NAMESPACE."
      (format "%s 💀 " (cider-abbreviate-ns namesapce)))

    (setq cider-repl-display-help-banner nil
          cider-repl-display-in-current-window t
          cider-repl-pop-to-buffer-on-connect t
          cider-repl-use-pretty-printing t
          cider-repl-result-prefix "  =>"
          cider-eval-result-prefix ""
          cider-repl-prompt-function #'deftpunk/cider-repl-prompt
          cider-connection-message-fn nil
          cider-eldoc-display-for-symbol-at-point t
          cider-repl-history-size 1000
          cider-reply-history-display-duplicates nil
          cider-repl-history-file (concat deftpunk--var-dir "cider-history")
          cider-repl-buffer-size-limit 100000))

  (deftpunk-local-leader-def
    :keymaps 'cider-repl-mode-map
    "h" '(cider-repl-history :which-key "REPL history")
    "l" '(cider-load-buffer :which-key "Load the buffer")
    "n" '(cider-repl-set-ns :which-key "Set the namespace")
    "z" '(cider-switch-to-last-clojure-buffer :which-key "Switch to the last *.clj buffer"))
#+end_src

** Common Lisp

*** [[https://github.com/joaotavora/sly][Sylvester the Cat (SLY)]]

I use SLY instead of SLIME for Common Lisp development - [[https://joaotavora.github.io/sly/][manual]]

#+begin_src emacs-lisp :name sly
  (use-package sly-asdf)
  (use-package sly-macrostep)
  (use-package sly-named-readtables)
  (use-package sly-quicklisp)

  ;; Set the path to sbcl
  (setq inferior-lisp-program "/usr/local/bin/sbcl")

  (use-package sly
    :after (sly-quicklisp sly-macrostep)
    :config
    (add-to-list 'sly-contribs 'sly-asdf 'append)
    (setq sly-complete-symbol-function 'sly-flex-completions))
#+end_src

** Emacs Lisp

*** eldoc

Turn on eldoc everywhere its useful.

#+begin_src emacs-lisp :name eldoc
(use-package eldoc
  :init
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  (add-hook 'ielm-mode-hook #'eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook #'eldoc-mode)
  :config
  (setq eldoc-idle-delay 0.1))
#+end_src

** Java

This is really just for Java interop while doing Clojure.  It uses [[https://projects.eclipse.org/projects/eclipse.jdt.ls][Eclipse’s JDT Language Server]].

#+begin_src emacs-lisp :name lsp-java
  (use-package lsp-java
    :after lsp)
#+end_src

** Python

#+begin_src emacs-lisp :name python-mode
  (defun deftpunk/python-mode-hook ()
    "Setting up some basics for Python."
    (setq-local fill-column 105)
    ;; (origami-mode)
    (smartparens-strict-mode)
    (highlight-indent-guides-mode)
    (display-line-numbers-mode 1))

  (defun +python-use-correct-flycheck-executables-h ()
    "Use the correct Python executables for Flycheck."
    (let ((executable python-shell-interpreter) w)
      (save-excursion
        (goto-char (point-min))
        (save-match-data
          (when (or (looking-at "#!/usr/bin/env \\(python[^ \n]+\\)")
                    (looking-at "#!\\([^ \n]+/python[^ \n]+\\)"))
            (setq executable (substring-no-properties (match-string 1))))))))

  (use-package python
    :mode ((rx ".py" string-end) . python-mode)
    :hook ((python-mode . deftpunk/python-mode-hook)
           (python-mode . +python-use-correct-flycheck-executables-h))
    :config
    ;; Try to compile using the appropriate version of Python for
    ;; the file.
    ;; (setq-local flycheck-python-pycompile-executable executable)

    ;; Use pylint for work & flake8 for personal projects.
    (setq-local flycheck-python-pylint-executable "pylint")
    (setq-local flycheck-python-flake8-executable "flake8")

    (setq python-shell-interpreter (executable-find "ipython")
          python-shell-interpreter-args "-i --simple-prompt --no-color-info"
          python-shell-prompt-block-regexp "\\.\\.\\.\\.: "
          python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
          python-shell-completion-setup-code
          "from IPython.core.completerlib import module_completion"
          python-shell-completion-string-code
          "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")

    ;; some smartparens "smartness" for single quotes
    ;; (sp-local-pair 'python-mode "'" nil
    ;;                :unless '(sp-point-before-word-p
    ;;                          sp-point-after-word-p
    ;;                          sp-point-before-same-p))
    )
#+end_src

*** [[https://github.com/necaris/conda.el][conda.el]]

I prefer to use miniconda, I feel it is a cleaner virtual environment

#+begin_src emacs-lisp :name conda
  (use-package conda
    :init
    (setq conda-env-home-directory (expand-file-name "~/miniconda3/"))
    :config
    ;; integration with term/eshell
    (conda-env-initialize-interactive-shells)
    (after! eshell (conda-env-initialize-eshell))

    ;; auto-activation (see below for details)
    (conda-env-autoactivate-mode t)
    ;; automatically activate a conda environment on the opening of a file:
    (add-hook 'find-file-hook (lambda () (when (bound-and-true-p conda-project-env-path)
                                           (conda-env-activate-for-buffer))))

    ;; integration with term/eshell
    (conda-env-initialize-interactive-shells)
    (after! eshell (conda-env-initialize-eshell))

    ;; auto-activation (see below for details)
    (conda-env-autoactivate-mode t)
    ;; automatically activate a conda environment on the opening of a file:
    (add-hook 'find-file-hook (lambda () (when (bound-and-true-p conda-project-env-path)
                                              (conda-env-activate-for-buffer))))

    ;; Add to the modeline so that we know which env is activated.
    (add-to-list 'global-mode-string
                 '(conda-env-current-name (" conda:" conda-env-current-name " "))
                 'append))
#+end_src

*** [[https://github.com/glyph/python-docstring-mode][python-docstring-mode]]

#+begin_src emacs-lisp :name python-docstring-mode
  (use-package python-docstring-mode
    :straight (:host github :repo "glyph/python-docstring-mode"))
#+end_src

*** lsp-pyright

#+begin_src emacs-lisp :name lsp-pyright
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred
#+end_src

** Rust

Thanks to https://robert.kra.hn/posts/rust-emacs-setup/ for Rust setup - TODO: add dap-mode integration.

*** Dependencies

=Rust=
- Install the Rust tool chain with Cargo & [[https://rustup.rs/][rustup]]
- Make sure that the ~.cargo/bin~ directory is in your PATH (rustup should do this by default).
- rust-analyzer will also need the Rust source code, you can install that with ~rustup component add rust-src~

=rust-analyzer=
Install the ~rust-analyzer~ binary
#+begin_example
$ git clone https://github.com/rust-analyzer/rust-analyzer.git
$ cd rust-analyzer
$ cargo xtask install --server # will install rust-analyzer into $HOME/.cargo/bin
#+end_example

If you need to run an older version because of some bug or incompatibility:
#+begin_example
git clone --depth 1 --branch 2022-03-07 https://github.com/rust-analyzer/rust-analyzer.git
cd rust-analyzer
cargo xtask install --server
#+end_example

*** [[https://github.com/brotzeit/rustic][Rustic]]

Based on rust-mode and adds a lot more functionality.

#+begin_src emacs-lisp :name Rust
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))
#+end_src

** Miscellaneous File Types

*** CSV

*** [[https://github.com/spotify/dockerfile-mode][Dockerfile]]

"Handle" dockerfiles

#+begin_src emacs-lisp :name dockerfile-mode
  (use-package dockerfile-mode
    :mode "Dockerfile.*\\'")
#+end_src

*** JSON

*** log files

A derived minor mode for log files from - https://www.masteringemacs.org/article/my-emacs-keybindings

#+begin_src emacs-lisp :name log-files
  (define-derived-mode log-mode text-mode "log" "Major mode for log files"
    (auto-revert-tail-mode 1)
    (set-variable 'truncate-lines t))
  (add-to-list 'auto-mode-alist (cons "\\.log\\|\\.LOG" 'log-mode))
#+end_src

*** Markdown

When I have to author Confluence docs its easier to start in Markdown.  This is also for the
ubiquitous README.md files.  I could also export to markdown from org-mode; will try that out
sometime.

**** Markdown mode

[[http://jblevins.org/projects/markdown-mode/][Markdown Mode]] - Major mode for editing [[http://daringfireball.net/projects/markdown/][Markdown]] formatted text.

#+begin_src emacs-lisp :name markdown
  (use-package markdown-mode
    :defer t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'"       . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :config
    (defun flex-emacs:markdown ()
      (interactive)
      (smartparens-mode -1))
    (add-hook 'markdown-mode #'flex-emacs:markdown))
#+end_src
**** Pandoc

[[http://joostkremers.github.io/pandoc-mode/][Pandoc]] - Convert text written in one markup language into another markup language.

It is possible to create different output profiles for a single input file, so that you
can, for example, write your text in Markdown and then translate it to HTML for online
reading, PDF for offline reading and Texinfo for reading in Emacs

#+begin_src emacs-lisp :name Pandoc
    (use-package pandoc-mode
      :defer t)
#+end_src
**** vmd-mode

[[https://github.com/blak3mill3r/vmd-mode][vmd-mode]] - Fast Github-flavored Markdown previews synchronized with changes to an
           emacs buffer (no need to save).
Dependencies: Node.js & vmd

[[https://github.com/yoshuawuyts/vmd][vmd]] - can be installed with ```npm install -g vmd```

#+begin_src emacs-lisp :name vmd-mode
  (use-package vmd-mode
    :defer t)
#+end_src

*** TOML

Rust uses *.toml & Poetry for Python does as well.

#+begin_src emacs-lisp :name toml-mode
  (use-package toml-mode
    :mode "\\.toml\\'")
#+end_src

*** YAML

** Terminals & Shells

https://systemcrafters.cc/emacs-from-scratch/learn-to-love-the-terminal-modes/

*** [[https://github.com/akermu/emacs-libvterm][vterm]]

A fully fledged terminal emulator within Emacs

You need to have cmake installed in order to build libvterm.

#+begin_src emacs-lisp :name vterm
  (use-package vterm)
#+end_src

** Keybindings

TODO: Work out personal prefixes:
- C-; -> currently using as an evil local leader, maybe use as a global leader
- C-z -> maybe use this is a "local leader" / "major mode map leader"
- Swap C-<spc> & C-v -> In Emacs mode, C-spc starts selection (set-mark-command).  I could use
  C-spc as a global leader equivalent & C-v as the set-mark-command


*** Hydras

**** files/projects/buffers hydra

#+begin_src emacs-lisp :name files-hydra
  ;; https://emacs.stackexchange.com/questions/60025/switch-to-scratch-buffer-global-set-key
  (defun bh/switch-to-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))

  (defvar hydra-files--title (with-faicon "file" "Files/Projects/Buffers" 1 -0.05))
  (pretty-hydra-define files-hydra
    (:color red :title hydra-files--title)
    ("Files"
     (("f" find-files "Find Files")
      ("p" projectile-find-files "Find files in project"))

     "Buffers"
     (("c" 'bh/switch-to-scratch "Switch to the *scratch* buffer"))

     "Projects"
     (("s" 'projectile-switch-project "Switch to different project"))))
#+end_src

**** version-control hydra

#+begin_src emacs-lisp :name version-control-hydra
  ;; A modified unpackaged/magit-status
  ;; I removed the deletion of the other window.
      ;;;###autoload
  (defun deftpunk:unpackaged/magit-status ()
    "Open a `magit-status' buffer and close the other window so only Magit is visible.
      If a file was visited in the buffer that was active when this
      command was called, go to its unstaged changes section."
    (interactive)
    (let* ((buffer-file-path (when buffer-file-name
                               (file-relative-name buffer-file-name
                                                   (locate-dominating-file buffer-file-name ".git"))))
           (section-ident `((file . ,buffer-file-path) (unstaged) (status))))
      (magit-status)
      (when buffer-file-path
        (goto-char (point-min))
        (cl-loop until (when (equal section-ident (magit-section-ident (magit-current-section)))
                         (magit-section-show (magit-current-section))
                         (recenter)
                         t)
                 do (condition-case nil
                        (magit-section-forward)
                      (error (cl-return (magit-status-goto-initial-section-1))))))))

  (defvar version-control-hydra--title (with-faicon "code" "Version Control" 1 -0.05))
  (pretty-hydra-define version-control-hydra
    (:color blue :title version-control-hydra--title)
    ("Magit"
     (("a" vc-annotate "side-by-side blame")
      ("d" magit-file-dispatch "do stuff with git")
      ("g" magit-status "magit status")
      ("G" deftpunk:unpackaged/magit-status "Only magit-status")
      ("h" helm-hunks-current-buffer "Helm Git hunks")
      ("j" (progn (git-gutter:next-hunk 1) (recenter)) "next hunk")
      ("k" (progn (git-gutter:previous-hunk 1) (recenter)) "previous hunk")
      ("m" git-messenger:popup-message "git messenger")
      ("l" magit-log "Git log")
      ("t" git-timemachine "timemachine"))))
#+end_src

**** windows hydra

#+begin_src emacs-lisp :name windows-hydra
  (defun spacemacs/alternate-window ()
    "Switch back and forth between current and last window in the
  current frame."
    (interactive)
    (let (;; switch to first window previously shown in this frame
          (prev-window (get-mru-window nil t t)))
      ;; Check window was not found successfully
      (unless prev-window (user-error "Last window not found."))
      (select-window prev-window)))

                                          ;(defvar windows-hydra--title (with-faicon "window-maximize" "Windows" 1 -0.05))
  (pretty-hydra-define windows-hydra
    (:color red :title "Windows")
    ("Change Size"
     (("b" balance-windows "balance window height")
      ("m" maximize-window "maximize current window")
      ("M" minimize-window "minimize current window")
      ("r" windresize "resize the current window"))

     "The Splits"
     (("h" split-window-below "split horizontally")
      ("v" split-window-right "split vertically")
      ("c" delete-window "delete current window")
      ("o" delete-other-windows "delete-other-windows"))

     "Window Movement"
     (("-" ace-window "ace window" :color blue)
      ("h" windmove-left "← window")
      ("j" windmove-down "↓ window")
      ("k" windmove-up "↑ window")
      ("l" windmove-right "→ window")
      ("r" toggle-window-split "rotate windows")
      ("w" spacemacs/alternate-window "last window"))))
#+end_src

*** C-i bindings

#+begin_src emacs-lisp :name leaer-keybindings
  ;; A modified unpackaged/magit-status
  ;; I removed the deletion of the other window.
      ;;;###autoload
  (defun deftpunk:unpackaged/magit-status ()
    "Open a `magit-status' buffer and close the other window so only Magit is visible.
      If a file was visited in the buffer that was active when this
      command was called, go to its unstaged changes section."
    (interactive)
    (let* ((buffer-file-path (when buffer-file-name
                               (file-relative-name buffer-file-name
                                                   (locate-dominating-file buffer-file-name ".git"))))
           (section-ident `((file . ,buffer-file-path) (unstaged) (status))))
      (magit-status)
      (when buffer-file-path
        (goto-char (point-min))
        (cl-loop until (when (equal section-ident (magit-section-ident (magit-current-section)))
                         (magit-section-show (magit-current-section))
                         (recenter)
                         t)
                 do (condition-case nil
                        (magit-section-forward)
                      (error (cl-return (magit-status-goto-initial-section-1))))))))

  (defvar version-control-hydra--title (with-faicon "code" "Version Control" 1 -0.05))
  (pretty-hydra-define version-control-hydra
    (:color blue :title version-control-hydra--title)
    ("Magit"
     (("a" vc-annotate "side-by-side blame")
      ("d" magit-file-dispatch "do stuff with git")
      ("g" magit-status "magit status")
      ("G" deftpunk:unpackaged/magit-status "Only magit-status")
      ("h" helm-hunks-current-buffer "Helm Git hunks")
      ("j" (progn (git-gutter:next-hunk 1) (recenter)) "next hunk")
      ("k" (progn (git-gutter:previous-hunk 1) (recenter)) "previous hunk")
      ("m" git-messenger:popup-message "git messenger")
      ("l" magit-log "Git log")
      ("t" git-timemachine "timemachine"))))

  ;; Main leader hydra
  (defvar hydra-jk--title (with-faicon "cogs" "Control Panel" 1 -0.05))
  (pretty-hydra-define hydra-jk
    (:color blue :title hydra-jk--title)
    ("Org"
     (("a" org-agenda "Org Agenda")
      ("c" org-capture "Org Capture"))

     "Files, Directories, Projects"
     (("ff" helm-find-file "Find Files")
      ("ft" vterm "Terminal")
      ("fp" projectile-find-file "Find files in Project"))

     "Tools"
     ;; (("d" dirvish "Dirvish")
     (("d" dired "Dired")
      ("e" major-mode-hydra "Major Mode Hydra")
      ("i" helm-mini "Buffers/Recentf")
      ("k" flex//kill-current-buffer "Kill current Buffer")
      ("q" save-buffers-kill-terminal "Exit Emacs")
      ("r" counsel-rg "Ripgrep")
      ("s" deftpunk/recenter-swiper "Swiper")
      ("w" save-buffer "Save Buffer")
      ("y" helm-show-kill-ring "Kill ring"))

     "Version Control"
     (("g" version-control-hydra/body "Git stuff"))

     "Windows"
     (("-" ace-window "ace-window"))

     "Exit"
     (("q" save-buffers-kill-terminal "Exit Emacs"))))

     (define-key global-map (kbd "<BLAH-i>") 'hydra-jk/body)
#+end_src

*** Righteous keybindings

#+begin_src emacs-lisp :name global-unbind
  ;; These keys make great prefix keys so unbind them from whatever they were previously bound to.
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-q"))

  ;; Unbind some Super keys.
  (global-unset-key (kbd "s-a"))
  (global-unset-key (kbd "s-f"))
  (global-unset-key (kbd "s-i"))

  ;; Call org-agenda from anywhere
  (global-set-key (kbd "s-a") 'org-agenda)
  (global-set-key (kbd "s-i") 'helm-mini)


  ;; This "should" allow you to use ESC in more situations that would require C-g
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  ;; Make eval-last-sexp output prettier
  (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)

  (defun deftpunk/url-at-point ()
    "Make opening the url at point a little more flexible."
    (interactive)
    (if (string-equal major-mode "org-mode")
        (unless (ignore-errors (or (org-open-at-point) t))
          (ace-link))
      (unless (ignore-errors (or (browse-url-at-point) t))
        (ace-link))))

  ;; Using C-j for jumping around
  ;; TODO: Use General for mapping?
  (global-unset-key (kbd "C-j"))

  (global-set-key (kbd "C-j f") 'avy-goto-char-in-line)
  (global-set-key (kbd "C-j g") 'goto-line)
  (global-set-key (kbd "C-j j") 'avy-goto-char-timer)
  (global-set-key (kbd "C-j o") 'ace-link)
  (global-set-key (kbd "C-j x") 'deftpunk/url-at-point)


  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "C--") 'ace-window)

  ;; Create a toggle for starting/stopping keyboard macros
  (defun deftpunk/toggle-kmacro ()
    "Toggle kmacro start/end."
    (interactive "P")
    (if defining-kbd-macro
        (kmacro-end-macro)
      (kmacro-start-macro)))
  (global-unset-key (kbd "<f2>"))
  (global-set-key (kbd "<f2>") 'deftpunk/toggle-kmacro)

  (global-unset-key (kbd "s-d"))
  (global-set-key (kbd "s-d") 'dired)

  (global-set-key (kbd "C-x k") 'kill-this-buffer)

  ;; https://www.reddit.com/r/emacs/comments/r7l3ar/comment/hn3kuwh/?utm_source=share&utm_medium=web2x&context=3
  (defun my/scroll-down-half-page ()
    "scroll down half a page while keeping the cursor centered"
    (interactive)
    (let ((ln (line-number-at-pos (point)))
          (lmax (line-number-at-pos (point-max))))
      (cond ((= ln 1) (move-to-window-line nil))
            ((= ln lmax) (recenter (window-end)))
            (t (progn
                 (move-to-window-line -1)
                 (recenter))))))

    (defun my/scroll-up-half-page ()
      "scroll up half a page while keeping the cursor centered"
      (interactive)
      (let ((ln (line-number-at-pos (point)))
            (lmax (line-number-at-pos (point-max))))
        (cond ((= ln 1) nil)
              ((= ln lmax) (move-to-window-line nil))
              (t (progn
                   (move-to-window-line 0)
                   (recenter))))))

    (global-unset-key (kbd "C-v"))
    (global-unset-key (kbd "M-v"))
    (global-set-key (kbd "C-v") 'my/scroll-down-half-page)
    (global-set-key (kbd "M-v") 'my/scroll-up-half-page)

    ;; Remap the normal help key so that i can use it as the usual readline key
    (global-unset-key (kbd "C-h"))
    (global-set-key (kbd "C-c h") 'help)
    (global-set-key (kbd "C-c C-h") 'help)

    (global-set-key (kbd "C-h") 'backward-delete-char)
#+end_src

*** [[https://www.emacswiki.org/emacs/key-chord.el][key-chord]]

Map pairs of simultaneously pressed keys to commands.

Keychord does have some drawbacks:
1. Doesn't get recorded when recording macros.
2. Can't use function keys in keychords
3. Doesn't work well with internationalization packages.

I use something similar in Neovim to bring up ":"

#+begin_src emacs-lisp :name jk-binding
  (use-package key-chord
    :init
    (key-chord-mode 1))
  (key-chord-define-global "jk" 'helm-M-x)
#+end_src

** Server

Start the emacs server as a last thing to do.

#+begin_src emacs-lisp :name emacs-server
  (server-start)
#+end_src

** Work On

*** imenu-list for orgde
- see https://github.com/rougier/dotemacs

*** have leader call pretty-hydra instead of general
- see my no-evil for way to do this?  certainly should work for local leader

*** snippets
- investigate auto-snippets - https://cestlaz.github.io/posts/using-emacs-46-auto-yasnippets/
- where are the default snippets??
- rename my private snippets root dir
- bindings for snippet functions, e.g. creating a new one

*** workspaces
- persp-mode (Doom uses this)
- integrate eyebrowse & desktop-mode

*** Investigate vertico+orderless+consult+embark+marginalia

*** esup
https://github.com/jschaf/esup
esup is a tool for profiling the startup time of Emacs. This snippet is a work around of a bug where
esup tries to step into the byte-compiled version of `cl-lib’, and fails horribly:
https://github.com/jschaf/esup/issues/85

*** pyright error links
https://robbmann.io/emacsd/#pyright-error-links-in-and-lowast-compilation-and-lowast

*** elips bug hunter
https://github.com/Malabarba/elisp-bug-hunter

*** Use ace-window dispatch to delete buffer in other window

*** Why does <ESC> kill the other window??
