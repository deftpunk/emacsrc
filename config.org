#+TITLE: config.org
#+AUTHOR: Deftpunk
#+STARTUP: content
#+OPTIONS: toc:4 :num:nil ^:nil

* About 

** Emacs

The big, beautiful, thermonuclear, editing reactor.

#+begin_quote
“Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.”

“Emacs is written in Lisp, which is the only computer language that is
beautiful.”

--Neal Stephenson
#+end_quote

** My Configuration

My configuration is based on [[https://orgmode.org/][Orgmode]] and optimization/perfomance lessons gleaned from
reviewing [[https://github.com/hlissner/doom-emacs][doom-emacs]] and other configuration's source. - see Credits section.

*** Some brief highlights

- lots & lots of [[https://github.com/emacs-evil/evil][Evil]]; it keeps my hands pain-free.

- I don't make use of custom.el, I prefer to be explicit about the things that I am changing.

- All of the extraneous Emacs files/dirs are kept under =.local/= & =.emacs.d/etc/=
  I tried out [[https://github.com/tarsius/no-littering][no-littering]] but found that it didn't work quite as I would have liked.

- Package management is handled by [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/Malabarba/paradox/][Paradox]]

- I autoload as many of the functions that I use as possible.  Avoid =require= and =load/load-file= as much as possible.

*** Versions of Emacs for MacOSX

I do most of my work on MacOSX these days and have tried several different builds
of Emacs on that Operating System.

**** Install via homebrew

I am currently using the Emacs you install via Homebrew with several extensions.
See the External Dependencies below before installing/using.

=brew install emacs --with-cocoa --with-modules --with-gnutls --with-imagemagick@6=

**** The railwaycat version

Wed Aug 23 11:54:20 2017 - Tried the [[https://github.com/railwaycat/homebrew-emacsmacport][railwaycat emacsmacport]] port.  Ultimately decided
not to use it.

- didn't solve my ansi-term/zsh problem with full configuration
- the Command key is now Alt; I liked having Alt & Super keys
- looks really, really nice
- the devicons package did not work out of the box, nor did the flycheck, etc. images

**** The emacs-plus version

Tried [[https://github.com/d12frosted/homebrew-emacs-plus][Emacs Plus]] as well, had similar problems as the railwaycat port - Emacs 25

*** External Dependencies

I rely on a few external programs to work with my Emacs installation.  Install
these =first= before installing/running Emacs.

   1. Install xcode
   2. Install the following packages via =brew install=
      - gls
      - coreutils
      - cask
      - ripgrep
      - aspell
      - zstd
   3. Install Node.js & the vmd module - =npm install -g vmd=
   4. Install libvterm
   5. Download latest org-mode
   6. Install the losveka font - https://github.com/be5invis/iosevka
      =brew tap homebrew/cask-fonts && brew cask install font-iosevka && brew cask install font-iosevka-slab=

clone evil-unimpaired to src/
clone bookmark-plus to src/

** Credits

Most of the basic settings and initial configuration are done in the
=core/core*.el= files that are a heavy copy of [[https://github.com/hlissner/doom-emacs][doom-emacs]] and how it configures
Emacs.  The result is a pretty fast initial startup given the amount of stuff.
I also copy some ideas and code from [[http://spacemacs.org/][spacemacs]], [[https://seagle0128.github.io/.emacs.d/][centaur emacs]] and others - full
props and credit to the authors of those fantastic configurations.

https://github.com/geza-herman/emacs

* Libraries

#+begin_src emacs-lisp :name crux
(use-package crux)
#+end_src

* UI

** all-the-icons

[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] - Make Emacs pretty.
Don't forget to run =M-x all-the-icons-install-fonts= if this is a new install.

#+begin_src emacs-lisp :name all_the_icons
(use-package all-the-icons)
#+end_src

** doom modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] - A really nice and performant modeline broken out of [[https://github.com/hlissner/doom-emacs][doom-emacs]] by its author.

#+begin_src emacs-lisp :name doom_modeline
  (use-package doom-modeline
    :init
    (setq doom-modeline-minor-modes t
          doom-modeline-window-width-limit 80
          doom-modeline-buffer-file-name-style 'truncate-upto-project
          doom-modeline-modal-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-major-mode-icon t
          doom-modeline-major-mode-color-icon t
          doom-modeline-buffer-modification-icon t
          doom-modeline-lsp t
          doom-modeline-vcs-max-length 14
          doom-modeline-gnus nil
          doom-modeline-gnus-timer 0
          doom-modeline-buffer-modification-icon t
          doom-modeline-project-detection 'projectile
          doom-modeline-icon (display-graphic-p))
    :hook (after-init . doom-modeline-mode))
#+end_src

** Extra highlights

*** cl-lib

[[https://github.com/skeeto/cl-lib-highlight][cl-lib]] Syntax highlighting for cl-lib, so that =cl-loop=, =cl-defun=,
=cl-defstruct= and the like get highlighted

#+begin_src emacs-lisp :name cl-lib
(use-package cl-lib-highlight
  :defer t
  :config
  (cl-lib-highlight-initialize))
#+end_src

*** highlight defined

https://github.com/Fanael/highlight-defined
Highlights defined Emacs Lisp symbols in source code.
Currently it recognizes Lisp function, built-in function, macro, faceand variable names.

#+BEGIN_SRC emacs-lisp :name highlight-defined
(use-package highlight-defined
  :defer t
  :config
  (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode))
#+END_SRC

*** highlight escape sequences

[[https://github.com/dgutov/highlight-escape-sequences/blob/master/highlight-escape-sequences.el][highlight-escape-sequences]] highlight escape sequences with the builtin face.

#+begin_src emacs-lisp :name highlight-escape-sequences
(use-package highlight-escape-sequences
  :defer t
  :commands hes-mode
  :init
  (add-hook 'prog-mode-hook 'hes-mode)
  :config
  (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
  (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face))
#+end_src

*** highlight-indent-guides

[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] Highlight indentation levels.

#+begin_src emacs-lisp :name highlight-indent-guides
(use-package highlight-indent-guides
  :defer t
  :delight highlight-indent-guides-mode
  :init
  (setq highlight-indent-guides-method 'character
        ;; default is \x2502 but it is very slow on Mac
        highlight-indent-guides-character ?\xFFE8
        highlight-indent-guides-responsive 'top)
  :config
  ;; only in Python
  (add-hook 'python-mode-hook 'highlight-indent-guides-mode))
#+end_src

*** highlight numbers

[[https://github.com/Fanael/highlight-numbers][highlight-numbers]] Highlight numeric literals in source code.

#+begin_src emacs-lisp :name highlight-numbers
(use-package highlight-numbers
  :defer t
  :commands highlight-numbers-mode
  :init (add-hook 'prog-mode-hook #'highlight-numbers-mode))
#+end_src

*** highlight quotes

[[https://github.com/Fanael/highlight-quoted][highlight-quotes]] Highlight Lisp quotes and quoted symbols

#+begin_src emacs-lisp :name highlight-quotes
(use-package highlight-quoted
  :defer t
  :config
  (add-hook 'emacs-lisp-mode-hook 'highlight-quoted-mode))
#+end_src

*** highlight symbols

[[https://github.com/gennad/auto-highlight-symbol][highlight-symbol]] Highlight the symbol under point.

#+begin_src emacs-lisp :name highlight-symbol
(use-package auto-highlight-symbol
  :defer t
  :commands auto-highlight-symbol-mode
  :init
  (setq ahs-case-fold-search nil
        ahs-default-range 'ahs-range-whole-buffer
        ahs-idle-interval 0.25
        ahs-inhibit-face-list nil)
  ;; but a box around the face.
  (custom-set-faces `(ahs-face ((t (:box t)))))
  (custom-set-faces `(ahs-definition-face ((t (:box t)))))
  (custom-set-faces `(ahs-plugin-whole-buffer-face ((t (:box t)))))
  :config
  (add-hook 'prog-mode-hook 'auto-highlight-symbol-mode))
#+end_src

** minions

[[https://github.com/tarsius/minions][minions]] Hide minor-modes from the modeline by putting them in a menu.

If you want to still see a handful of important minor-modes:
(push 'flymake-mode minions-direct)
(push 'overwrite-mode minions-direct)

#+begin_src emacs-lisp :name minions
  (use-package minions
    :config (minions-mode 1))
#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] - Make parenthesis' standout no matter your language.

#+begin_src emacs-lisp :name rainbow-delimiters
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Rainbow mode

[[https://julien.danjou.info/projects/emacs-packages][rainbow-mode]] - Show hex codes as their actual color.

#+begin_src emacs-lisp :name rainbow-mode
  (use-package rainbow-mode
    :defer t
    :commands rainbow-turn-on
    :init
    (add-hook 'prog-mode-hook 'rainbow-turn-on)
    :config
    (setq rainbow-x-colors nil))
#+end_src

** Themes

#+begin_src emacs-lisp :name doom-themes
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)

    ;; The Doom version of Challenger Deep
    (load-theme 'doom-moonlight t)

    ;; Improve treemacs look.
    (doom-themes-treemacs-config)

    ;; Correct & improve org-mode's native fontification.
    (doom-themes-org-config)
  )
#+end_src

** solaire mode

[[https://github.com/hlissner/emacs-solaire-mode][solaire mode]] Give windows that you are working on a brighter background.

#+begin_src emacs-lisp :name solaire-mode
;; A more complex, more lazy-loaded config
(use-package solaire-mode
  ;; Ensure solaire-mode is running in all solaire-mode buffers
  :hook (change-major-mode . turn-on-solaire-mode)
  ;; ...if you use auto-revert-mode, this prevents solaire-mode from turning
  ;; itself off every time Emacs reverts the file
  :hook (after-revert . turn-on-solaire-mode)
  ;; To enable solaire-mode unconditionally for certain modes:
  :hook (ediff-prepare-buffer . solaire-mode)
  ;; Highlight the minibuffer when it is activated:
  :hook (minibuffer-setup . solaire-mode-in-minibuffer)
  :config
  ;; The bright and dark background colors are automatically swapped the first 
  ;; time solaire-mode is activated. Namely, the backgrounds of the `default` and
  ;; `solaire-default-face` faces are swapped. This is done because the colors 
  ;; are usually the wrong way around. If you don't want this, you can disable it:
  (setq solaire-mode-auto-swap-bg nil)

  (solaire-global-mode +1))
#+end_src

* Keybinding utilities

Things like hydra, major-mode-hydra, posframe and general.el that have to come pretty early so that we
can take advantage of them with other major mode packages and the like.

** posframe

A child frame at point connected to the root window's buffer.  I use this with
hydra/major-mode-hydra/pretty-hydra for convenience.

#+begin_src emacs-lisp :name posframe
  (use-package posframe)
#+end_src

** The General

[[https://github.com/noctuid/general.el][general.el]] - We use general.el to setup evil-mode, leader and other keybindings, as a result we pull it
in quite early.

Set the 'general-override-states' and enable the 'general-override-mode' so
that evil-collection and others don't override bindings that I want.

#+begin_src emacs-lisp :name general.el
  (use-package general
    :config
    (setq general-override-states '(insert
                                    emacs
                                    hybrid
                                    normal
                                    visual
                                    motion
                                    operator
                                    replace))
    (general-override-mode))
#+end_src

** Hydra

[[https://github.com/abo-abo/hydra][hydra]] - Make some bindings stick around.

#+BEGIN_SRC emacs-lisp :name hydra
  (use-package hydra)
#+END_SRC

** major-mode-hydra (includes pretty-hydra)

pretty-hydra saves us the trouble of formating the docstring using classic hydra (can be a pain).

#+BEGIN_SRC emacs-lisp :name majore-mode-hydra
  (use-package major-mode-hydra
    :init
    ;; Set the major-mode-hydra title using all-the-icons icon for the major mode
    (setq major-mode-hydra-title-generator
        '(lambda (mode)
           (s-concat "\n"
                     (s-repeat 10 " ")
                     (all-the-icons-icon-for-mode mode :v-adjust 0.05)
                     " "
                     (symbol-name mode)
                     " commands"))))

  ;; A bunch of utility functions from https://gist.github.com/mbuczko/e15d61363d31cf78ff17427072e0c325
  (defun with-faicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-fileicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-octicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-material (icon str &optional height v-adjust)
    (s-concat (all-the-icons-material icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-mode-icon (mode str &optional height nospace face)
    (let* ((v-adjust (if (eq major-mode 'emacs-lisp-mode) 0.0 0.05))
           (args     `(:height ,(or height 1) :v-adjust ,v-adjust))
           (_         (when face
                        (lax-plist-put args :face face)))
           (icon     (apply #'all-the-icons-icon-for-mode mode args))
           (icon     (if (symbolp icon)
                         (apply #'all-the-icons-octicon "file-text" args)
                       icon)))
      (s-concat icon (if nospace "" " ") str)))
#+END_SRC

** hydra-posframe

#+BEGIN_SRC emacs-lisp :name hydra-posframe
  (use-package hydra-posframe
    :defer t
    :straight (hydra-posframe :type git :host github :repo "Ladicle/hydra-posframe")
    :hook (after-init . hydra-posframe-mode)) ; was hydra-posframe-enable
#+END_SRC

** which-key

[[https://github.com/justbur/emacs-which-key][which-key]] - Display available keybindings.

- =which-key-show-top-level= will show most key bindings without a prefix. It
  is most and not all, because many are probably not interesting to most
  users.
- =which-key-show-major-mode= will show the currently active major-mode
  bindings. It's similar to =C-h m= but in a which-key format. It is also
  aware of evil commands defined using =evil-define-key=.
- =which-key-show-next-page= is the command used for paging.
- =which-key-undo= can be used to undo the last keypress when in the middle
  of a key sequence.

#+begin_src emacs-lisp :name which-key
  (use-package which-key
    :commands which-key-mode
    :init
    (setq which-key-allow-evil-operators t
          which-key-show-operator-state-maps t)
    :config
    (which-key-mode))
#+end_src

* General Utilites

Make Emacs nicer to use in some way.

** ace-link

[[https://github.com/abo-abo/ace-link][ace-link]] Select a link to jump to in Info, help, woman, org or eww modes

#+begin_src emacs-lisp :name ace-link
   (use-package ace-link
     :init (ace-link-setup-default))
#+end_src

** ace-window

[[https://github.com/abo-abo/ace-window][ace-window]] - Selecting a window/frame to switch to

#+begin_src emacs-lisp :name ace-window
  (use-package ace-window
    :defer t
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-leading-char-style 'path
          aw-dispatch-alist '((?? aw-show-dispatch-help))
          aw-background t
          aw-dispatch-always t)
    :config
    (set-face-attribute 'aw-leading-char-face nil :height 4.0))
#+end_src

** aggressive-indent-mode

[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] Indent your code.

#+begin_src emacs-lisp :name aggressive-indent-mode
  (use-package aggressive-indent-mode
    :commands (aggressive-indent-mode)
    :defer 1
    :config
    (add-hook! 'emacs-lisp-mode-hook #'aggressive-indent-mode))

  (add-hook! 'clojure-mode-hook #'aggressive-indent-mode)
#+end_src

** better-jumper

[[https://github.com/gilbertw1/better-jumper][better-jumper]] Jumping in different contexts.  We use it to jump back to killed buffers.

#+begin_src emacs-lisp :name better-jumper
  (use-package better-jumper
    :commands doom-set-jump-a doom-set-jump-maybe-a doom-set-jump-h
    :preface
    ;; REVIEW Suppress byte-compiler warning spawning a *Compile-Log* buffer at
    ;; startup. This can be removed once gilbertw1/better-jumper#2 is merged.
    (defvar better-jumper-local-mode nil)
    :init
    (global-set-key [remap evil-jump-forward]  #'better-jumper-jump-forward)
    (global-set-key [remap evil-jump-backward] #'better-jumper-jump-backward)
    (global-set-key [remap xref-pop-marker-stack] #'better-jumper-jump-backward)
    :config
    (defun doom-set-jump-a (orig-fn &rest args)
      "Set a jump point and ensure ORIG-FN doesn't set any new jump points."
      (better-jumper-set-jump (if (markerp (car args)) (car args)))
      (let ((evil--jumps-jumping t)
            (better-jumper--jumping t))
        (apply orig-fn args)))

    (defun doom-set-jump-maybe-a (orig-fn &rest args)
      "Set a jump point if ORIG-FN returns non-nil."
      (let ((origin (point-marker))
            (result
             (let* ((evil--jumps-jumping t)
                    (better-jumper--jumping t))
               (apply orig-fn args))))
        (unless result
          (with-current-buffer (marker-buffer origin)
            (better-jumper-set-jump
             (if (markerp (car args))
                 (car args)
               origin))))
        result))

    (defun doom-set-jump-h ()
      "Run `better-jumper-set-jump' but return nil, for short-circuiting hooks."
      (better-jumper-set-jump)
      nil)

    ;; Creates a jump point before killing a buffer. This allows you to undo
    ;; killing a buffer easily (only works with file buffers though; it's not
    ;; possible to resurrect special buffers).
    (advice-add #'kill-current-buffer :around #'doom-set-jump-a)

    ;; Create a jump point before jumping with imenu.
    (advice-add #'imenu :around #'doom-set-jump-a))
#+end_src

** default-text-scale

[[https://github.com/purcell/default-text-scale][default-text-scale]] Increase/Decrease the font size in Emacs frames

#+begin_src emacs-lisp :name default-text-scale
  (use-package default-text-scale
    :defer t
    :bind (("s-+" . default-text-scale-increase)
           ("s--" . default-text-scale-decrease)))
#+end_src

** helpful

   [[https://github.com/Wilfred/helpful][helpful]] Adds a lot more help informatioon to Emacs help/describe buffers.

#+begin_src emacs-lisp :name helpful
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
   
** hl-todo

[[https://github.com/tarsius/hl-todo][hl-todo]] - Highlight TODO and similar keywords in comments and strings.
By default it is only active in modes that derive from prog-mode.  It is a
dependency for =magit-hl-todos= which toggles in =magit-status=.

#+begin_src emacs-lisp :name hl-todo
  (use-package hl-todo
    :init
    (setq hl-todo-highlight-punctuation ":"))
  (add-hook 'prog-mode-hook 'hl-todo-mode)
#+end_src

** paren-face

[[https://github.com/tarsius/paren-face][paren-face]] dim parentheses in lisp modes to reduce visual distraction.

#+begin_src emacs-lisp :name paren-face
  (use-package paren-face
    :hook
    (lispy-mode . paren-face-mode))
#+end_src

** persistent-scratch

[[https://github.com/Fanael/persistent-scratch][persistent-scratch]] - Preserves the state of **scratch** buffers across Emacs sessions.  Since I put all
kinds of stuff into the **scratch** buffer this is really handy.

#+begin_src emacs-lisp :name persistent-scratch
  (use-package persistent-scratch
    :init
    (setq persistent-scratch-save-file (expand-file-name "persistent-scratch" deftpunk--local-dir))
    :config
    (persistent-scratch-setup-default))
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] - Project management for emacs - [[https://docs.projectile.mx/projectile/usage.html][The Manual]]

#+BEGIN_SRC emacs-lisp :name projectile
  (use-package projectile
    :init (setq projectile-project-search-path '("~/WorkStuff/" "~/MyStuff/"))
    :config
    (projectile-mode +1))
#+END_SRC

*** counsel-projectile

[[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] Further ivy integration into Projectile.  The most important is =counsel-projectile=

#+BEGIN_SRC emacs-lisp :name counsel-projectile
  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))
#+END_SRC

** smartparens

[[https://github.com/Fuco1/smartparens][smartparens]] Keep my pairs clean ish.

#+begin_src emacs-lisp :name smartparens
  (use-package smartparens
    :config
    ;; smartparens doesn't recognize the sly-mrepl-mode
    (add-to-list 'sp-lisp-modes 'sly-mrepl-mode)

    ;; load the default smartparens rules for various languages.
    (require 'smartparens-config)

    ;; Overlays are too distracting and not terribly helpful. show-parens does
    ;; this for us already (and is faster), so...
    (setq sp-highlight-pair-overlay nil
          sp-highlight-wrap-overlay nil
          sp-highlight-wrap-tag-overlay nil)

    (with-eval-after-load 'evil
      ;; But if someone does want overlays enabled, evil users will be stricken
      ;; with an off-by-one issue where smartparens assumes you're outside the
      ;; pair when you're really at the last character in insert mode. We must
      ;; correct this vile injustice.
      (setq sp-show-pair-from-inside t)
      ;; ...and stay highlighted until we've truly escaped the pair!
      (setq sp-cancel-autoskip-on-backward-movement nil))

    ;; The default is 100, because smartparen's scans are relatively expensive
    ;; (especially with large pair lists for some modes), we reduce it, as a
    ;; better compromise between performance and accuracy.
    (setq sp-max-prefix-length 25)
    ;; No pair has any business being longer than 4 characters; if they must, set
    ;; it buffer-locally. It's less work for smartparens.
    (setq sp-max-pair-length 4)
    ;; This isn't always smart enough to determine when we're in a string or not.
    ;; See https://github.com/Fuco1/smartparens/issues/783.
    (setq sp-escape-quotes-after-insert nil)

    ;; Silence some harmless but annoying echo-area spam
    (dolist (key '(:unmatched-expression :no-matching-tag))
      (setf (alist-get key sp-message-alist) nil))

    ;; You're likely writing lisp in the minibuffer, therefore, disable these
    ;; quote pairs, which lisps doesn't use for strings:
    (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
    (sp-local-pair 'minibuffer-inactive-mode "`" nil :actions nil)

    ;; Smartparens breaks evil-mode's replace state
    (defvar doom-buffer-smartparens-mode nil)
    (add-hook! 'evil-replace-state-exit-hook
      (defun doom-enable-smartparens-mode-maybe-h ()
        (when doom-buffer-smartparens-mode
          (turn-on-smartparens-mode)
          (kill-local-variable 'doom-buffer-smartparens-mode))))
    (add-hook! 'evil-replace-state-entry-hook
      (defun doom-disable-smartparens-mode-maybe-h ()
        (when smartparens-mode
          (setq-local doom-buffer-smartparens-mode t)
          (turn-off-smartparens-mode)))))

  (add-hook! 'emacs-lisp-mode-hook 'smartparens-strict-mode)
#+end_src

** so-long

[[https://github.com/hlissner/emacs-so-long][so-long]] Use hlissner's fork.

#+begin_src emacs-lisp :name so-long
  (use-package so-long
    :straight (so-long :type git :host github :repo "hlissner/emacs-so-long")
    :config
    ; reduce false positives w/ a larger threshold
    (setq so-long-threshold 400)

    ;;; More cool Doom stuff

    ;; Don't disable syntax highlighting and line numbers, or make the buffer
    ;; read-only, in `so-long-minor-mode', so we can have a basic editing
    ;; experience in them, at least. It will remain off in `so-long-mode',
    ;; however, because long files have a far bigger impact on Emacs performance.
    (delq! 'font-lock-mode so-long-minor-modes)
    (delq! 'display-line-numbers-mode so-long-minor-modes)
    (delq! 'buffer-read-only so-long-variable-overrides 'assq)
    ;; ...but at least reduce the level of syntax highlighting
    (add-to-list 'so-long-variable-overrides '(font-lock-maximum-decoration . 1))
    ;; ...and insist that save-place not operate in large/long files
    (add-to-list 'so-long-variable-overrides '(save-place-alist . nil))
    ;; Text files could possibly be too long too
    (add-to-list 'so-long-target-modes 'text-mode)

    ;; But disable everything else that may be unnecessary/expensive for large or
    ;; wide buffers.
    (appendq! so-long-minor-modes
              '(flycheck-mode
                flyspell-mode
                spell-fu-mode
                eldoc-mode
                smartparens-mode
                highlight-numbers-mode
                better-jumper-local-mode
                ws-butler-mode
                auto-composition-mode
                undo-tree-mode
                highlight-indent-guides-mode
                hl-fill-column-mode))
    (defun doom-buffer-has-long-lines-p ()
      ;; HACK Fix #2183: `so-long-detected-long-line-p' tries to parse comment
      ;;      syntax, but in some buffers comment state isn't initialized, leading
      ;;      to a wrong-type-argument: stringp error.
      (unless (bound-and-true-p visual-line-mode)
        (let ((so-long-skip-leading-comments
               (bound-and-true-p comment-use-syntax)))
          (so-long-detected-long-line-p))))
    (setq so-long-predicate #'doom-buffer-has-long-lines-p))
#+end_src

** super-save

[[https://github.com/bbatsov/super-save][super-save]] Automatically save your buffers.

#+begin_src emacs-lisp :name super-save
  (use-package super-save
    :delight "SS"
    :init
    ;; don't save Tramp files.
    (setq super-save-remote-files nil
          ;; Save when idle
          super-save-auto-save-when-idle t
          ;; Idle timeout
          super-save-idle-duration 5)
    :config
    (super-save-mode +1))
#+end_src

** switch-buffer-functions

The switch-buffer-functions package allows us to update the recentf buffer list as we switch between
them, so that the list produced by counsel-buffer-or-recentf is shown in the order the buffers have been
visited, rather than in the order they were opened. Thanks to @tau3000 for the tip.

#+begin_src emacs-lisp :name switch-buffer-functions
  (use-package switch-buffer-functions
    :after recentf
    :preface
    (defun my-recentf-track-visited-file (_prev _curr)
      (and buffer-file-name
           (recentf-add-file buffer-file-name)))
    :init
    (add-hook 'switch-buffer-functions #'my-recentf-track-visited-file))
#+end_src

** ws-butler

[[https://github.com/lewang/ws-butler][ws-butler]] Unobtrusively trim spaces from the end of a line.

#+begin_src emacs-lisp :name ws-butler
  (use-package ws-butler
    :straight (ws-butler :type git :host github :repo "hlissner/ws-butler")
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode))
    :custom
    (ws-butler-keep-whitespace-before-point nil))
#+end_src

* Prose
* Org Mode

Use the Org mode we downloaded into src
  ;; Use the latest Org mode.
  ;; To install or update the latest Org:
  ;; 1. git clone or git pull in src/org-mode
  ;; 2. make autoloads
  (add-to-list 'load-path (concat deftpunk--src-dir "/org-mode/lisp"))
  (require 'org-loaddefs)

The manual: [[http://orgmode.org/manual/index.html][Org Manual]]

[[https://orgmode.org/manual/Emphasis-and-monospace.html][Emphasis]]
You can make words *bold*, /italic/, _underlined_, =verbatim= and ~code~, and, if you must,
‘+strike-through+’. Text in the code and verbatim string is not processed for Org mode specific syntax,
it is exported verbatim.

[[http://orgmode.org/manual/Easy-templates.html#Easy-templates][Easy templates:]]

TODO: Easy templates have been superseded by Org-Selectors (C-c C-,) - need to figure out what I want to
do here as I kind of like the easy template flow.

<s <TAB> expands/completes the 'src' block
<e <TAB> -> example block
<q <TAB> -> quote
<v <TAB> -> verse; renders block quotes and newline breaks

Possibilities for adding unicode characters:
http://heikkil.github.io/blog/2015/03/22/hydra-for-unicode-input-in-emacs/
http://thewanderingcoder.com/2015/03/emacs-org-mode-styling-non-smart-quotes-zero-width-space-and-tex-input-method/

Markup:

http://ergoemacs.org/emacs/emacs_org_markup.

Consider using https://github.com/alphapapa/org-web-tools

#+BEGIN_SRC emacs-lisp :name org-mode
    (defvar org-mode-map--title (with-faicon "book" "Org Mode bindings" 1 -0.05))
    (major-mode-hydra-define org-mode
      (:title org-mode-map--title :color blue :separator "=")
      ("Tools"
       (("h" helm-org-in-buffer-headings "Org headings")
        ("l" org-insert-link "Org insert link"))))

    ;;; Make some new org-capture-templates
    ;(add-to-list 'org-capture-templates
     ;            '("w" "Work Task" entry
      ;             (file "~/MyStuff/org_files/netapp_work.org")
       ;            "* TODO %?" :empty-lines 1))

    ;;; Keys for org-mode-map
    (general-define-key
     :states 'normal
     :keymaps 'org-mode-map
     ;; These 2 interfere with window navigation.
     "C-j" 'nil
     "C-k" 'nil)
#+END_SRC

** helm-org

[[https://github.com/emacs-helm/helm-org][helm-org]] Helm for org headlines and keywords completion.

#+BEGIN_SRC emacs-lisp :name helm-org
  (use-package helm-org
    :defer t
    :commands (helm-org-in-buffer-headings helm-org-capture-templates))

  ;; In order for make org-capture & org-set-tags work properly, uncomment below
  ;; (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
  ;; (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags)))
#+END_SRC

** org-superstar-mode

[[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] Makes pretty Org stars, headers and plain lists.

#+begin_src emacs-lisp :name org-bullets
  (use-package org-superstar-mode
    :straight (org-superstar-mode :type git :host github :repo "integral-dw/org-superstar-mode")
    :hook (org-mode . org-superstar-mode)
    :config
     ;; Make leading stars truly invisible, by rendering them as spaces!
    (setq org-superstar-leading-bullet ?\s
          org-superstar-leading-fallback ?\s
          org-hide-leading-stars nil))
#+end_src

* Software Utilites

** flycheck

[[http://www.flycheck.org/en/latest/][flycheck]] - on the fly syntax checking

#+begin_src emacs-lisp :name flycheck
  (use-package flycheck
    :defer 1
    :commands flycheck-list-errors flycheck-buffer
    :bind (:map flycheck-error-list-mode-map
           ("C-n" . flycheck-error-list-next-error)
           ("C-p" . flycheck-error-list-previous-error)
           ("j" . flycheck-error-list-next-error)
           ("k" . flycheck-error-list-previous-error)
           ("RET" . flycheck-error-list-goto-error)
           ([return] . flycheck-error-list-goto-error))
    :init
    ;; I want these checkers permanently disabled.
    (setq flycheck-disabled-checkers '(tex-chktex emacs-lisp-checkdoc))

    ;; Use the `load-path' of the current Emacs session during syntax checking.
    (setq flycheck-emacs-lisp-load-path 'inherit)

    ;; I want `next-error', `previous-error' and `first-error' to just navigate errors from
    ;; compilation modes.
    (setq flycheck-standard-error-navigation nil)

    ;; Check only when saving or opening files.
    (setq flycheck-check-syntax-automatically '(save mode-enabled idle-buffer-switch))

    ;; For the above functionality, check syntax in a buffer that you switched to
    ;; only briefly. This allows "refreshing" the syntax check state for several
    ;; buffers quickly after e.g. changing a config file.
    (setq flycheck-buffer-switch-check-intermediate-buffers t)

    ;; Display errors a little quicker (default is 0.9s)
    (setq flycheck-display-errors-delay 0.25)

    ;; Initialize packages in the Emacs Lisp syntax checker.
    (setq flycheck-lisp-initialize-packages t)

    :config
    (global-flycheck-mode +1))

(add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
              (display-buffer-reuse-window
               display-buffer-in-side-window)
              (side            . bottom)
              (reusable-frames . visible)
              (window-height   . 0.33)))
#+end_src

** Git

*** git-gutter & git-gutter-fringe

[[https://github.com/syohex/emacs-git-gutter][git-gutter]] - Highlighting uncommited changes in the buffer.

#+begin_src emacs-lisp :name git-gutter
(use-package git-gutter
  :defer t
  :delight "gg"
  :init
  (setq git-gutter:update-interval 0.1
        git-gutter:ask-p nil
        git-gutter:verbosity 0
        git-gutter:handled-backends '(git))

  (add-hook 'git-gutter:update-hooks 'magit-after-revert-hook)
  (add-hook 'git-gutter:update-hooks 'magit-not-reverted-hook)
  (add-hook 'git-gutter:update-hooks 'vc-checkin-hook)
  (add-hook 'git-gutter:update-hooks 'focus-in-hook)
  (add-hook 'git-gutter:update-hooks 'auto-revert-mode-hook)
  (add-hook 'git-gutter:update-hooks 'after-revert-hook)
  (global-git-gutter-mode 1))

(use-package git-gutter-fringe)
(require 'git-gutter-fringe)

;; Update git-gutter on focus (in case I was using git externally) - from hlissner's emacs config.
(add-hook 'focus-in-hook #'git-gutter:update-all-windows)

(set-face-foreground 'git-gutter-fr:modified "blue3")
(set-face-foreground 'git-gutter:modified "blue3")
#+end_src

*** git-link

[[https://github.com/sshaw/git-link][git-link]] - Create URLs for files and commits in GitHub/Bitbucket/GitLab/... repositories.

#+begin_src emacs-lisp :name git-link
(use-package git-link
  :defer t
  :commands (git-link git-link-commit git-link-homepage))
#+end_src

*** git-messenger

[[https://github.com/syohex/emacs-git-messenger][git-messenger]] - Provides a function that pops up the commit message of the current line.

#+begin_src emacs-lisp :name git-messenger
  (use-package git-messenger
    :defer t
    :init
    (setq git-messenger:show-detail t
           git-messenger:handled-backends '(git))
    :config
    (define-key git-messenger-map (kbd "m") 'git-messenger:copy-message)
    (define-key git-messenger-map (kbd "ESC") 'git-messenger:popup-close))
#+end_src

*** git-modes

[[https://github.com/magit/git-modes][git-modes]] major modes for gitattributes, gitconfig & gitignore files

The gitconfig & gitignore modes derive from `conf-unix-mode` so you can use `gitignore-mode` for other
files that have nothing to do with Git.
```lisp
(add-to-list 'auto-mode-alist
             (cons "/.dockerignore\\'" 'gitignore-mode))
```

#+begin_src emacs-lisp :name git-modes
  (use-package git-modes
    :defer t)
#+end_src

*** git-timemachine

[[https://github.com/pidu/git-timemachine][git-timemachine]] - Allows you to go back and forth to the revisions of a file.

#+begin_src emacs-lisp :name git-timemachine
(use-package git-timemachine
  :defer t
  :config
  (require 'magit-blame)
  ;; Sometimes I forget `git-timemachine' is enabled in a buffer, so instead of
  ;; showing revision details in the minibuffer, show them in
  ;; `header-line-format', which has better visibility.
  (setq git-timemachine-show-minibuffer-details nil)
  (add-hook 'git-timemachine-mode-hook #'+vcs|init-header-line)
  (advice-add #'git-timemachine-show-revision :after #'+vcs*update-header-line)

  ;; Force evil to rehash keybindings for the current state
  (add-hook 'git-timemachine-mode-hook #'evil-force-normal-state))

;; From redguardtoo - http://blog.binchen.org/posts/new-git-timemachine-ui-based-on-ivy-mode.html
(defun my-git-timemachine-show-selected-revision ()
  "Show last (current) revision of file."
  (interactive)
  (let (collection)
    (setq collection
          (mapcar (lambda (rev)
                    ;; re-shape list for the ivy-read
                    (cons (concat (substring (nth 0 rev) 0 7) "|" (nth 5 rev) "|" (nth 6 rev)) rev))
                  (git-timemachine--revisions)))
    (ivy-read "commits:"
              collection
              :action (lambda (rev)
                        (git-timemachine-show-revision rev)))))

(defun my-git-timemachine ()
  "Open git snapshot with the selected version.  Based on ivy-mode."
  (interactive)
  (unless (featurep 'git-timemachine)
    (require 'git-timemachine))
  (git-timemachine--start #'my-git-timemachine-show-selected-revision))
#+end_src

** lispy & lispyville
** lsp-mode

[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] Language Server Protocol Support

TODO: Make bindings for lsp-mode functions.

lsp-find-definition
lsp-find-refereneces


 #+begin_src emacs-lisp :name lsp-mode
   (use-package lsp-mode
     :defer 1
     :hook (prog-mode . lsp-deferred)
     :init
     (setq lsp-session-file (expand-file-name "lsp-session" deftpunk--etc-dir))

     ;; Don't prompt the user for the project root every time we open a new
     ;; lsp-worthy file, instead, try to guess it with projectile.
     (setq lsp-auto-guess-root t)
     ;; Auto-kill LSP server after last workspace buffer is killed.
     (setq lsp-keep-workspace-alive nil)
     ;; Let `flycheck-check-syntax-automatically' determine this.
     (setq lsp-flycheck-live-reporting nil)
     ;; For `lsp-clients'
     (setq lsp-server-install-dir (concat deftpunk--etc-dir "lsp/"))

     ;; Disable LSP's superfluous, expensive and/or debatably unnecessary features.
     ;; Some servers implement these poorly. Better to just rely on Emacs' native
     ;; mechanisms and make these opt-in.
     (setq lsp-enable-folding nil
           ;; HACK Fix #2911, until it is resolved upstream. Links come in
           ;;      asynchronously from the server, but lsp makes no effort to
           ;;      "select" the original buffer before laying them down, so they
           ;;      could be rendered in the wrong buffer (like the minibuffer).
           lsp-enable-links nil
           ;; Potentially slow
           lsp-enable-file-watchers nil
           lsp-enable-text-document-color nil
           lsp-enable-semantic-highlighting nil
           ;; Don't modify our code without our permission, we have
           ;; other/better ways of indenting/formatting.
           lsp-enable-indentation nil
           lsp-enable-on-type-formatting nil)

     ;; TODO: this is ugly, add python as well.
     (add-hook 'clojure-mode-hook #'lsp-deferred)
     (add-hook 'clojurec-mode-hook #'lsp-deferred)
     (add-hook 'clojurescript-mode-hook #'lsp-deferred)
     :config
     ;; Don't prompt to restart LSP servers while quitting Emacs
     (add-hook! 'kill-emacs-hook (setq lsp-restart 'ignore)

     (add-to-list 'lsp-language-id-configuration '(clojure-mode . "clojure-mode"))))
 #+end_src

*** lsp-ui

[[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] - UI integrations for lsp-mode

#+begin_src emacs-lisp :name lsp-ui
  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-ignore-duplicate t
          lsp-ui-doc-enable t
          lsp-ui-doc-position 'top
          lsp-ui-doc-include-signature t
          lsp-ui-sideline-enable t
          lsp-ui-imenu-enable t
          lsp-ui-flycheck-enable t
          lsp-ui-flycheck-list-position 'bottom
          lsp-ui-flycheck-live-reporting t
          lsp-ui-peek-enable t
          lsp-ui-peek-list-width 60
          lsp-ui-peek-peek-height 25))
#+end_src

** Magit

[[https://magit.vc/][Magit]] - The best git porcelain around.

Some more informational links:
https://emacsair.me/2017/09/01/magit-walk-through/
https://emacsair.me/2017/09/01/the-magical-git-interface/

#+begin_src emacs-lisp :name magit
  (use-package magit
    :defer t
    :custom (magit-git-executable "/usr/local/bin/git")
    :init
    ;; Prevent ~/.emacs.d/transient from being created
    (setq transient-levels-file (concat deftpunk--local-dir "transient/levels")
          transient-values-file (concat deftpunk--local-dir "transient/values")
          transient-history-file (concat deftpunk--local-dir "transient/history"))

    :config
    (setq  magit-log-arguments '("--graph" "--decorate" "--color")
           magit-save-repository-buffers 'dontask
           magit-revert-buffers 'silent)

    (setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
          magit-diff-refine-hunk t ; show granular diffs in selected hunk
      ;; Don't autosave repo buffers. This is too magical, and saving can
      ;; trigger a bunch of unwanted side-effects, like save hooks and
      ;; formatters. Trust us to know what we're doing.
      magit-save-repository-buffers nil)

    (after! evil
      ;; Switch to emacs state only while in `magit-blame-mode', then back when
      ;; its done (since it's a minor-mode).
      (add-hook! 'magit-blame-mode-hook
        (evil-local-mode (if magit-blame-mode -1 +1)))))
#+end_src

*** Magit Todos

https://github.com/alphapapa/magit-todos
Show TODOs in Magit status buffer for each file.

#+BEGIN_SRC emacs-lisp :name magit-todos
(use-package magit-todos
  :defer t
  :after magit
  :config
  (magit-todos-mode 1))
#+END_SRC

** visual-regex-steroids

[[https://github.com/benma/visual-regexp-steroids.el][visual-regex-steroids]]


* Languages & Formats

Some general setup that is specific to prog-mode.

#+begin_src emacs-lisp :name prog-mode

  ;; auto-fill comments ONLY.
  (defun deftpunk/auto-fill-comments ()
    (setq fill-column 72)
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (auto-fill-mode t))
  (add-hook 'prog-mode-hook 'deftpunk/auto-fill-comments)

  ;; Show trailing whitespace - ws-butler will handle deleting it.
  (add-hook 'prog-mode-hook '(lambda ()
                               (setq show-trailing-whitespace 1)))

#+end_src

** Ansible
** C/C++

Mostly for reading/viewing and not development.... I really don't like development in either of these
languages.

** Common Lisp

** Clojure

** Json

Hey, at least it isn't XML.

** Markdown
** Nim

** PDF Tools

[[https://github.com/politza/pdf-tools][pdf-tools]] A replacement of DocView for PDF files.
PDF files are not pre-rendered thru ghostscript or something else but created
on demand.

TODO: Compilation on Mac is possible - https://github.com/politza/pdf-tools#compiling-on-os-x

** Python

** Rust

** Shell - bash/zsh

** YAML

"Readable" JSON ... for the most part.

* Completion

I use both Helm & Counsel because they each have certain behaviors or extensions that I find more 
desirable than the other in certain situations, e.g. helm-dash & swiper

** company

[[http://company-mode.github.io/][company-mode]] Auto completion in Emacs.

#+begin_src emacs-lisp :company
  (use-package company
    :custom-face
    (company-tooltip
     ((t (:family "Iosevka"))))
    :init
    (setq company-idle-delay 0
          ;; show 10 items in the tooltip
          company-tooltip-limit 10
          ;; sow the description of what a snippet expands to.
          company-tooltip-align-annotations t
          ;; cycle the list around
          company-selection-wrap-around t
          ;; provide the "correct" casing for a completion
          company-dabbrev-ignore-case nil
          ;; do not downcase completions by default
          company-dabbrev-downcase nil
          ;; Start after 1 character
          company-minimum-prefix-length 1

          company-require-match 'never

          ;; company-global-modes
          ;; '(not erc-mode message-mode help-mode gud-mode eshell-mode)

          ;; Default backend, all the others will be buffer local.
          company-backends  '(company-capf)
          company-frontends '(company-pseudo-tooltip-frontend
                              company-echo-metadata-frontend))

    :config
    (make-variable-buffer-local 'company-minimum-prefix-length)

    ;; Got this from https://github.com/dawranliou/emacs.d#company
    ;; I have not seen the issue that this rectifies ... yet.
    (add-hook 'evil-local-mode-hook
              (lambda ()
                ;; Note:
                ;; Check if `company-emulation-alist' is in
                ;; `emulation-mode-map-alists', if true, call
                ;; `company-ensure-emulation-alist' to ensure
                ;; `company-emulation-alist' is the first item of
                ;; `emulation-mode-map-alists', thus has a higher
                ;; priority than keymaps of evil-mode.
                ;; We raise the priority of company-mode keymaps
                ;; unconditionally even when completion is not
                ;; activated. This should not cause problems,
                ;; because when completion is activated, the value of
                ;; `company-emulation-alist' is ((t . company-my-keymap)),
                ;; when completion is not activated, the value is ((t . nil)).
                (when (memq 'company-emulation-alist emulation-mode-map-alists)
                  (company-ensure-emulation-alist))))

    (global-company-mode 1))
#+end_src

*** company-posframe
*** company-presient

** Counsel, Av & Swiper

A bunch of really great stuff by abo-abo

We don't install ivy explicitly because it comes along for the ride as a dependency to avy, swiper & counsel.

*** avy

[[https://github.com/abo-abo/avy][avy]] Jump to things in Emacs tree-style

#+begin_src emacs-lisp :name avy
  (use-package avy
    :defer t
    :config
    (setq avy-all-windows nil
          avy-background t))
#+end_src

*** counsel

A collection of ivy-enhanced versions of common Emacs commands.

#+begin_src emacs-lisp :name counsel
  (use-package counsel
    :delight
    :bind (:map ivy-minibuffer-map
                ([escape] . minibuffer-keyboard-quit))
    :init
    (setq counsel-rg-base-command
          "rg -i -M 120 --no-heading --line-number --color never %s .")
    :config
    (counsel-mode 1))
#+end_src

*** ivy

#+BEGIN_SRC emacs-lisp :name ivy
  (use-package ivy
    :delight
    :config
    ;; Counsel changes a lot of ivy's state at startup; to control for that, we
    ;; need to load it as early as possible. Some packages (like `ivy-prescient')
    ;; require this.
    (require 'counsel nil t)
    (setq ivy-height 17
          ivy-wrap t
          ivy-fixed-height-minibuffer t
          projectile-completion-system 'ivy
          ;; disable magic slash on non-match
          ivy-magic-slash-non-match-action nil
          ;; don't show recent files in switch-buffer
          ivy-use-virtual-buffers nil
          ;; ...but if that ever changes, show their full path
          ivy-virtual-abbreviate 'full
          ;; don't quit minibuffer on delete-error
          ivy-on-del-error-function #'ignore
          ;; enable ability to select prompt (alternative to `ivy-immediate-done')
          ivy-use-selectable-prompt t)
    (ivy-mode +1))
#+END_SRC

**** ivy-rich

#+BEGIN_SRC emacs-lisp :name ivy-rich
  (use-package ivy-rich
    :after ivy-exit
    :init
    ;; replace "/home/username" with "~" in ivy-switch-buffer
    (setq ivy-rich-path-style 'abbrev)
    :config
    (setq ivy-rich-parse-remote-buffer nil)

    (ivy-rich-mode +1))
#+END_SRC

**** all-the-icons-ivy

[[https://github.com/asok/all-the-icons-ivy][all-the-icons-ivy]] Iconify ivy/counsel

#+begin_src emacs-lisp :name all-the-icons-ivy
  (use-package all-the-icons-ivy
    :init 
    (setq all-the-icons-ivy-file-commands
     '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
    (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+end_src

*** Swiper

[[https://github.com/abo-abo/swiper][swiper]] Swiper - isearch with an overview, and more. Oh, man! https://oremacs.com/swiper/

#+begin_src emacs-lisp :name swiper
  (use-package swiper
    :commands swiper
    :bind (:map ivy-minibuffer-map
                ("C-w" . ivy-backward-kill-word)
                ("C-y" . ivy-yank-word)
                ([escape] . minibuffer-keyboard-quit))
    :init
    (setq ivy-wrap t     ; make ivy-next-line & ivy-previous-line cycle around.
          ivy-height 25  ; make the minibuffer just a little taller.
          ivy-use-virtual-buffers t
          ivy-display-style 'fancy
          ivy-count-format "%d/%d")
    :config
    (ivy-mode 1))
#+end_src

** Helm

[[https://emacs-helm.github.io/helm/][Helm]] Emacs incremental completion and selection narrowing framework

#+BEGIN_SRC emacs-lisp :name Helm
  (use-package helm
    :commands (helm-mini helm-M-x helm-scroll-other-window)
    :bind (:map helm-map
                ([escape] . helm-keyboard-quit))
    :init
    (setq helm-idle-delay                        1.0    ; Update fast sources immediately (doesn't).
          helm-input-idle-delay                  0.01   ; This actually updates things reeeelatively quickly.
          helm-quick-update                      t
          helm-M-x-requires-pattern              nil
          ;; Remove extraineous helm UI elements
          helm-display-header-line nil
          helm-mode-line-string nil
          helm-ff-auto-update-initial-value nil
          helm-find-files-doc-header nil
          ;; Setting this above 100 will slow down fuzzy matching
          helm-candidate-number-limit 65
          helm-autoresize-max-height             45     ; Set the max window height to 45% of current frame.
          helm-mode-fuzzy-match                  t      ; Turn on fuzzy matching for buffers, semantic, recentf
          helm-completion-in-region-fuzzy-match  t      ; Completion, imenu, apropos, M-x
          ;; Ignore checking if file exists on remote files and see Tramp messages in helm
          helm-buffer-skip-remote-checking       t
          helm-tramp-verbose                     6
          ;; When calling `helm-semantic-or-imenu', don't immediately jump to
          ;; symbol at point
          helm-imenu-execute-action-at-once-if-one nil
          ;; With original setting, helm calls constant (and unnecessary)
          ;; forced mode-line updates
          helm-ff-keep-cached-candidates nil
          ;; disable special behavior for left/right, M-left/right keys.
          helm-ff-lynx-style-map nil
          helm-ff-skip-boring-files              t)
    :config
    (load "helm-autoloads" nil t)

    ;; helm is too heavy for find-file-at-point
    (after! helm-mode
      (add-to-list 'helm-completing-read-handlers-alist '(find-file-at-point . nil))))
#+END_SRC

*** helm-dash

[[https://github.com/dash-docs-el/helm-dash][helm-dash]] - Browse Dash docsets inside emacs.

#+begin_src emacs-lisp :name helm-dash
(use-package helm-dash
  :defer t
  :commands (helm-dash helm-dash-at-point)
  :init
  (setq helm-dash-docsets-path (expand-file-name "dash-docsets" deftpunk--emacs-dir))
  :config
  (setq helm-dash-common-docsets '("Python_3" "Clojure")))
        ;; helm-dash-browser-func 'eww-browse-url))
#+end_src

*** helm-hunks

[[https://github.com/torgeir/helm-hunks.el][helm-hunks]] A helm interface for git hunks - browsing, staging, unstaging and killing.

#+BEGIN_SRC emacs-lisp :name helm-hunks
(use-package helm-hunks
  :defer t
  :config
  (setq helm-hunks-preview-diffs t))
(add-hook 'git-gutter:update-hooks 'helm-hunks-refresh-hook)
#+END_SRC

*** helm-tramp

[[https://github.com/masasam/emacs-helm-tramp][helm-tramp]] Tramp helm interface for ssh server and docker and vagrant

#+BEGIN_SRC emacs-lisp :name helm-tramp
(use-package helm-tramp
  :defer t
  :init (setq tramp-default-method "ssh")
  :config
  ;; Speed up tramp & helm-tramp by turning some things off.
  ;; We turn some other Tramp specific things off in the Tramp section.
  (add-hook 'helm-tramp-pre-command-hook '(lambda ()
                                            (global-aggressive-indent-mode 0)
                                            (projectile-mode 0)))
  (add-hook 'helm-tramp-quit-hook '(lambda ()
                                     (global-aggressive-indent-mode 1)
                                     (projectile-mode 1))))

;; Besides ~/.ssh/config, you can add connections manually.
;; (setq helm-tramp-custom-connections '(/ssh:domain|sudo:user@localhost:/))
#+END_SRC

** yasnippets

All of my snippet needs. [[https://github.com/joaotavora/yasnippet][yasnippet]] and [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] plus our own.

The yasnippet [[http://joaotavora.github.io/yasnippet/][manual]].

#+begin_src emacs-lisp :name yasnippet
    (defvar +deftpunk-snippets-dir (expand-file-name "snippets/" deftpunk--etc-dir))

    (use-package yasnippet-snippets)

    (use-package yasnippet
      :defer t
      :init
      ;; Remove default ~/.emacs.d/snippets
      (defvar yas-snippet-dirs nil)

      (if (daemonp)
          (after! yasnippet (yas-reload-all))
        ;; Ensure `yas-reload-all' is called as late as possible. Other modules
        ;; could have additional configuration for yasnippet. For example,
        ;; file-templates.
        (add-transient-hook! 'yas-minor-mode-hook (yas-reload-all)))

      (add-hook! '(text-mode-hook
                   prog-mode-hook
                   conf-mode-hook
                   snippet-mode-hook)
                 #'yas-minor-mode-on)

      :config
      (setq yas-verbosity 3)

      ;; Ensure the snippet is properly indented
      (setq yas-also-auto-indent-first-line t)

      ;; Allow private snippets in DOOMDIR/snippets
      (add-to-list 'yas-snippet-dirs '+deftpunk-snippets-dir))

    (use-package helm-c-yasnippet
      :init (setq helm-yas-space-match-any-greedy t))
#+end_src

* Shells & Terminals
** eshell
** vterm
* The Prime Evil

** Evil dependencies

*** goto-chg

[[https://github.com/emacs-evil/goto-chg][goto-chg]]

Provides support for the motions g; g, and for the last-change-register ., also
provides the functions goto-last-change and goto-last-change-reverse.

#+begin_src emacs-lisp :name goto-chg
(use-package goto-chg)
#+end_src

*** undo-tree

(use-package! undo-tree
  :when (featurep! +tree)
  ;; Branching & persistent undo
  :hook (doom-first-buffer . global-undo-tree-mode)
  :config
  (setq undo-tree-visualizer-diff t
        undo-tree-auto-save-history t
        undo-tree-enable-undo-in-region t
        ;; Increase undo-limits by a factor of ten to avoid emacs prematurely
        ;; truncating the undo history and corrupting the tree. See
        ;; https://github.com/syl20bnr/spacemacs/issues/12110
        undo-limit 800000
        undo-strong-limit 12000000
        undo-outer-limit 120000000
        undo-tree-history-directory-alist
        `(("." . ,(concat doom-cache-dir "undo-tree-hist/"))))

  ;; Compress undo-tree history files with zstd, if available. File size isn't
  ;; the (only) concern here: the file IO barrier is slow for Emacs to cross;
  ;; reading a tiny file and piping it in-memory through zstd is *slightly*
  ;; faster than Emacs reading the entire undo-tree file from the get go (on
  ;; SSDs). Whether or not that's true in practice, we still enjoy zstd's ~80%
  ;; file savings (these files add up over time and zstd is so incredibly fast).
  (when (executable-find "zstd")
    (defadvice! doom--undo-tree-make-history-save-file-name-a (file)
      :filter-return #'undo-tree-make-history-save-file-name
      (concat file ".zst")))

  ;; Strip text properties from undo-tree data to stave off bloat. File size
  ;; isn't the concern here; undo cache files bloat easily, which can cause
  ;; freezing, crashes, GC-induced stuttering or delays when opening files.
  (defadvice! doom--undo-tree-strip-text-properties-a (&rest _)
    :before #'undo-list-transfer-to-tree
    (dolist (item buffer-undo-list)
      (and (consp item)
           (stringp (car item))
           (setcar item (substring-no-properties (car item))))))

  ;; Undo-tree is too chatty about saving its history files. This doesn't
  ;; totally suppress it logging to *Messages*, it only stops it from appearing
  ;; in the echo-area.
  (advice-add #'undo-tree-save-history :around #'doom-shut-up-a))

** Evil

[[https://github.com/emacs-evil/evil][evil]] Using Evil to make the editor part of Emacs even better than vim/neovim.

#+begin_src emacs-lisp :name evil
  (use-package evil
    :init
    (setq evil-default-state 'normal
          evil-want-C-u-scroll    t
          evil-want-C-w-delete    t
          evil-esc-delay          0
          evil-want-Y-yank-to-eol t
          evil-shift-width        4
          evil-want-integration   t
          evil-want-keybinding    nil   ; this is for evil-collection
          evil-toggle-key         "s-z" ; I want C-z to background in terminal
          evil-want-C-i-jump      t)

    (setq-default evil-symbol-word-search 1)

    :config

    (evil-mode 1)

    ;; https://emacs.stackexchange.com/questions/14940/emacs-doesnt-paste-in-evils-visual-mode-with-every-os-clipboard/15054#15054
    ;; Imagine the following scenario.  One wants to paste some previously copied
    ;; (from application other than Emacs) text to the system's clipboard in place
    ;; of some contiguous block of text in a buffer.  Hence, one switches to
    ;; `evil-visual-state' and selects the corresponding block of text to be
    ;; replaced.  However, one either pastes some (previously killed) text from
    ;; `kill-ring' or (if `kill-ring' is empty) receives the error: "Kill ring is
    ;; empty"; see `evil-visual-paste' and `current-kill' respectively.  The
    ;; reason why `current-kill' does not return the desired text from the
    ;; system's clipboard is because `evil-visual-update-x-selection' is being run
    ;; by `evil-visual-pre-command' before `evil-visual-paste'.  That is
    ;; `x-select-text' is being run (by `evil-visual-update-x-selection') before
    ;; `evil-visual-paste'.  As a result, `x-select-text' copies the selected
    ;; block of text to the system's clipboard as long as
    ;; `x-select-enable-clipboard' is non-nil (and in this scenario we assume that
    ;; it is).  According to the documentation of `interprogram-paste-function',
    ;; it should not return the text from the system's clipboard if it was last
    ;; provided by Emacs (e.g. with `x-select-text').  Thus, one ends up with the
    ;; problem described above.  To solve it, simply make
    ;; `evil-visual-update-x-selection' do nothing:
    (fset 'evil-visual-update-x-selection 'ignore)

    ;; More Esc quits
    (define-key evil-normal-state-map [escape] 'keyboard-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key evil-insert-state-map [escape] 'evil-normal-state)
    (global-set-key [escape] 'evil-exit-emacs-state))
    ;; Always Escape
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** evil-collection

[[https://github.com/emacs-evil/evil-collection][evil-collection]] A collection of Evil bindings.

#+begin_src emacs-lisp :name evil-collection
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** evil-commentary

[[https://github.com/linktohack/evil-commentary][evil-commentary]] Make it easy to comment out (lines of) code.

The default key bindings use `gc` for the evil-commentary operator command. That means it can be used with
all available motions and counts, just like other operator commands, such as evil-delete. 

#+begin_src emacs-lisp :name evil-commentary
  (use-package evil-commentary
    :defer t
    :after evil
    :config
    (evil-commentary-mode))
#+end_src

** evil-goggles

[[https://github.com/edkolev/evil-goggles][evil-goggles]] Display a visual hint when editing with evil.

#+begin_src emacs-lisp :name evil-goggles
(use-package evil-goggles
  :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces))
#+end_src

** evil-smartparens
** evil-visualstar

[[https://github.com/bling/evil-visualstar][evil-visualstar]] Start a * or # search from the visual selection

#+begin_src emacs-lisp :name evil-visualstar
  (use-package evil-visualstar
    :config
    (global-evil-visualstar-mode 1))
#+end_src

* Keybindings

** Hydras

*** the version-control hydra

#+BEGIN_SRC emacs-lisp :name version-control-hydra
  ;; A modified unpackaged/magit-status
  ;; I removed the deletion of the other window.
  ;;;###autoload
  (defun deftpunk:unpackaged/magit-status ()
    "Open a `magit-status' buffer and close the other window so only Magit is visible.
  If a file was visited in the buffer that was active when this
  command was called, go to its unstaged changes section."
    (interactive)
    (let* ((buffer-file-path (when buffer-file-name
                               (file-relative-name buffer-file-name
                                                   (locate-dominating-file buffer-file-name ".git"))))
           (section-ident `((file . ,buffer-file-path) (unstaged) (status))))
      (magit-status)
      (when buffer-file-path
        (goto-char (point-min))
        (cl-loop until (when (equal section-ident (magit-section-ident (magit-current-section)))
                         (magit-section-show (magit-current-section))
                         (recenter)
                         t)
                 do (condition-case nil
                        (magit-section-forward)
                      (error (cl-return (magit-status-goto-initial-section-1))))))))

    (defvar version-control-hydra--title (with-faicon "code" "Version Control" 1 -0.05))
    (pretty-hydra-define version-control-hydra
      (:color blue :title version-control-hydra--title)
      ("Magit"
       (("a" vc-annotate "side-by-side blame")
        ("d" magit-file-dispatch "do stuff with git")
        ("g" magit-status "magit status")
        ("G" deftpunk:unpackaged/magit-status "Only magit-status")
        ("h" helm-hunks-current-buffer "Helm Git hunks")
        ("j" (progn (git-gutter:next-hunk 1) (recenter)) "next hunk")
        ("k" (progn (git-gutter:previous-hunk 1) (recenter)) "previous hunk")
        ("m" git-messenger:popup-message "git messenger")
        ("l" magit-log "Git log")
        ("t" git-timemachine "timemachine"))))
#+END_SRC

*** windows hydra

#+BEGIN_SRC emacs-lisp :name windows-hydra
  (defun spacemacs/alternate-window ()
    "Switch back and forth between current and last window in the
  current frame."
    (interactive)
    (let (;; switch to first window previously shown in this frame
          (prev-window (get-mru-window nil t t)))
      ;; Check window was not found successfully
      (unless prev-window (user-error "Last window not found."))
      (select-window prev-window)))

    ;(defvar windows-hydra--title (with-faicon "window-maximize" "Windows" 1 -0.05))
    (pretty-hydra-define windows-hydra
      (:color red :title "Windows" :post (progn (message "Don't break the windows!")))
      ("Change Size"
       (("s" shrink-window-horizontally "shrink horizontally")
        ("e" enlarge-window-horizontally "enlarge horizontally")
        ("b" balance-windows "balance window height")
        ("m" maximize-window "maximize current window")
        ("M" minimize-window "minimize current window"))

       "The Splits"
       (("h" split-window-below "split horizontally")
        ("v" split-window-right "split vertically")
        ("c" delete-window "delete current window")
        ("o" delete-other-windows "delete-other-windows"))

       "Window Movement"
       (("-" ace-window "ace window" :color blue)
        ("h" windmove-left "← window")
        ("j" windmove-down "↓ window")
        ("k" windmove-up "↑ window")
        ("l" windmove-right "→ window")
        ("r" toggle-window-split "rotate windows")
        ("w" spacemacs/alternate-window "last window"))))
#+END_SRC

*** the jk hydra

#+BEGIN_SRC emacs-lisp :name jk-hydra
    (defvar hydra-jk--title (with-faicon "cogs" "Control Panel" 1 -0.05))
    (pretty-hydra-define hydra-jk
      (:color blue :title hydra-jk--title
              :post (progn
                      (message "Thank you, please come again")))
      ("Tools"
       (("c" org-capture "Org Capture")
        ("e" major-mode-hydra "Major Mode Hydra")
        ("i" helm-mini "Buffers/Recentf")
        ("s" swiper "Swiper")
        ("x" helm-M-x "Fuzzy M-x"))

       "Version Control"
       (("g" version-control-hydra/body "Git stuff"))

       "Windows"
       (("-" ace-window "ace-window")
        ("w" windows-hydra/body "windows hydra"))))
#+END_SRC

*** the toggle hydra

l - line numbers
n - treemacs
t - some tagbar equivalent; maybe there is a lsp-mode outline

** Evil leader

Set up the leader key using general.el

#+begin_src emacs-lisp :name leader
  (general-create-definer my-leader-def
    ;; :prefix my-leader
    :prefix "SPC")

  ;; helpful-hydra/body - is defined in the helpful 'use-package' declaration
  (my-leader-def 'normal 'override
    ;"c" 'hydra-cee/body
    "e" 'major-mode-hydra
    ;"f" 'hydra-files-projectile/body
    "f" 'counsel-find-file
    "g" 'version-control-hydra/body
    ;"h" 'helpful-hydra/body
    "i" 'helm-mini
    "k" 'flex//kill-current-buffer
    ; Use with M-o to select other actions, e.g. switch-project
    "p" 'counsel-projectile
    "q" 'save-buffers-kill-terminal
    "r" 'counsel-rg
    "s" 'swiper
    "w" 'save-buffer
    "y" 'helm-show-kill-ring ; like the helm version better than counsel-yank-pop
    "-" 'ace-window
    )
#+end_src

** State keybindings

*** Normal State bindings

Normal state keybindings.

#+BEGIN_SRC emacs-lisp :name normal-state
  (general-define-key
   :states 'normal
   ;; run the macro in the q register
   "Q" "@q"
   "U" 'undo-tree-redo
   "Y" "yg_"
   ;; "gd" 'counsel-etags-find-tag-at-point
   ;;"gs" 'avy-goto-char-2
   "gs" 'evil-avy-goto-char-timer
   ;; Evil doesn't allow you to overload like Vim/Neovim do.  So this fails because s is not a prefix key.
   ;; But 'v' gets blown away and doesn't fail with the same error???
   ;; "ss" 'deftpunk:split-horizontally-recenter
   ;; "vv" 'deftpunk:split-vertically-recenter
   )

;; Add some bindings to the window "C-w <something" map.
;; Thu Nov 22 22:54:18 2018 - we have to bind evil-window-map this way, as
;; opposed to using general.el
(define-key evil-window-map "b" 'balance-windows)          ; replaces evil-window-bottom-right.
(define-key evil-window-map "d" 'ace-delete-window)        ; was unused
;; (define-key evil-window-map "e" 'hydra-window-sizing/body) ; was unused
(define-key evil-window-map "f" 'make-frame)               ; was unused
(define-key evil-window-map "i" 'ace-maximize-window)      ; was unused
;; (define-key evil-window-map "m" 'doom/toggle-fullscreen)   ; was unused
(define-key evil-window-map "r" 'winner-redo)              ; replaces evil-window-rotate-downwards
(define-key evil-window-map "u" 'winner-undo)              ; was unused
(define-key evil-window-map "-" 'ace-window)               ; was unused

;; Some easy window moving keys
;; Thrs Nov 22 2018 9:54:34 - for some reason I had to use the define-key mapping scheme in order toxtxt
;; get this to work(?)
(global-unset-key  (kbd "C-j"))
(global-unset-key  (kbd "C-k"))
(global-unset-key  (kbd "C-l"))
;; (global-unset-key (kbd "C-h"))
(define-key evil-normal-state-map (kbd "C-j") 'windmove-down)
(define-key evil-normal-state-map (kbd "C-k") 'windmove-up)
(define-key evil-normal-state-map (kbd "C-h") 'windmove-left)
(define-key evil-normal-state-map (kbd "C-l") 'windmove-right)

;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)

;; TODO: modify gx to use - org-open-at-point

#+END_SRC


** Ctrl/Alt/Super

#+begin_src emacs-lisp :name ctrl_alt_super
  (global-set-key (kbd "C--") 'ace-window)

  ;; Keep the font window away.
  (global-unset-key (kbd "s-t"))

#+end_src

* keychord

[[https://www.emacswiki.org/emacs/key-chord.el][key-chord]] Map pairs of simultaneously pressed keys to commands.

Keychord has a couple of drawbacks
1. Doesn't get recorded when recording macros.
2. Can't use function keys in keychords
3. Doesn't work well with internationalization packages.

Wed Dec 09 2020 15:04:01 - Tried out using `general-chord` but it didn't work with `jk` in normal mode.

#+begin_src emacs-lisp :name jk-binding
   (use-package key-chord
     :defer t
     :init
     (key-chord-mode 1))
   (key-chord-define-global "jk" 'hydra-jk/body)
#+end_src

* Notes
** Packages to investigate

 centaur tabs - maybe more like Neovim tabs?
https://github.com/ema2159/centaur-tabs

beginend - go to the semantic beginning or ending of a mode/file
https://github.com/DamienCassou/beginend

** Changes to make

Add to the following with ace-window to scrolldown/up a specific window

#+begin_src emacs-lisp
(defun my-scroll-down-other-window (&optional arg)
 "Like `scroll-other-window' but takes a prefix argument
 that indicates which window to scroll."
  (interactive "p")
  (save-selected-window
    (other-window arg)
    (scroll-down)))
#+end_src
